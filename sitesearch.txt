0 1: 
0 2: 
0 3: ## Heading 1
0 4: 
0 5: <a href='index.html?file=what/2022bApr.pdf' onclick="document.getElementById('main').innerHTML = 
0 6:   '<iframe src=what/2022bApr.pdf style=width:90%;height:100%;></iframe><br>';rld=1;">boox.pdf</a> <br>
0 7: 
0 8: <a  href='index.html?file=what/2022bApr.pdf' onclick="document.getElementById(`main`).innerHTML=`<iframe src=what/2022bApr.pdf style=width:90%;height:100%;></iframe><br>`;rld=1;" onMouseOver="peek(event.ctrlKey,`what/2022bApr.pdf`);">boox pdf with mouseover</a><br>
0 9: 
0 10: <a  href onclick="document.getElementById(`main`).innerHTML=`<iframe src=what/2022bApr.pdf style=width:90%;height:100%;></iframe><br>`;rld=1;" onMouseOver="peek(event.ctrlKey,`what/2022bApr.pdf`);">boox pdf no href</a><br>
0 11: 
0 12: First para.
0 13: 
0 14: Second para.
0 15: 
0 16: ```js
0 17: s='a link to a [local tunnel](what.html) & a link to a [remote tunnel](https://whatamigoingtodonow.net) uvwxyz'
0 18: s=s.replace(/\[([^\]]*?)\]\((https?\:\/\/[^\)]*?)\)/mg, '<a href="$2">3a $1</a>')
0 19: s=>>a link to a [local tunnel](what.html) & a link to a <a href="https://whatamigoingtodonow.net">3a remote tunnel</a> uvwxyz
0 20: ```
0 21: 
0 22: ```js
0 23: s='[[what/KeepNotes]] ok in mpe not editor, [[what/KeepNotes]] ok in vscode & mpe'
0 24: s=s.replace(/\[\[(.*?)\]\]/gm, '<a href="index.html?file=$1.md">$1</a>');
0 25: s=>><a href="index.html?file=Notes|what/KeepNotes.md">Notes|what/KeepNotes</a> ok in mpe not editor, <a href="index.html?file=what/KeepNotes.md">what/KeepNotes</a> ok in vscode & mpe
0 26: ```
0 27: 
0 28: 
0 29: 
0 30: 
4 1: -----------------------------------------------------------------------------
4 2: title: What .. ?
4 3: -----------------------------------------------------------------------------
4 4: 
4 5: 
4 6: <div hidden markdown>
4 7: 
4 8: `http://127.0.0.1:5500/index.html?file=what/2022bApr.pdf`
4 9: 
4 10: 
4 11: 
4 12: </div>
4 13: 
4 14: Here is an intro, [and a link](what/KeepNotes.md), [and another](syntax.md) , [and stellarium](https://stellarium-web.org/)
4 15:   
4 16: ## iframes
4 17: 
4 18: ### Image map
4 19: 
4 20: <div style="padding-bottom:65%; position:relative;display:block; width:100%;overflow: hidden;">
4 21: <iframe id="coggle" style="position:absolute; left:0; top:0; width:100%; height:100%;"   frameborder="0" src="./coggle.html"></iframe>
4 22: </div>
4 23: 
4 24: ### Semantic map
4 25: 
4 26: <div id="d1" style="position:relative; overflow: hidden; width: 900px; padding-bottom: 500px;">
4 27: <iframe style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder=0  src="./network.html"></iframe>
4 28: </div>
4 29: 
4 30: <!-- <iframe width="890" height="434" frameborder="0"  src="./network.html"></iframe> -->
4 31: 
4 32: ### Simple search vs Wink site search
4 33: 
4 34: Enter search term (regex):<div id='search' contenteditable=true>...</div><br>
4 35: <button onclick="searchFiles(document.getElementById('search').innerHTML,'sResult')">Search</button>
4 36: <p id='sResult'></p><br><br><br>
4 37: 
4 38: 
4 39: <iframe width="95%" height="60%" frameborder="0"  src="/bm25"></iframe>
4 40: 
4 41: ### Parallel web site
4 42: 
4 43: <iframe width="95%" height="60%" frameborder="0"  src="https://rmzetti.github.io"></iframe>
4 44: 
4 45: 
4 46: ### Pasted from openstreetmap's embed copy
4 47: 
4 48: <iframe width="325" height="300" frameborder="0" src="https://www.openstreetmap.org/export/embed.html?bbox=174.51541900634768%2C-36.94652058082552%2C174.62579727172852%2C-36.898008043886875&amp;layer=mapnik" style="border: 1px solid black"></iframe>
4 49: 
4 50: ### and from google maps
4 51: 
4 52: <iframe src="https://www.google.com/maps/embed?pb=!1m14!1m12!1m3!1d7460.80546153027!2d174.57949382430192!3d-36.929140477027744!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!5e1!3m2!1sen!2snz!4v1661848235110!5m2!1sen!2snz" width="500" height="300" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
4 53: 
4 54: ### From local html:
4 55: 
4 56: <div style="position:relative; overflow: hidden; width: 95%; padding-top: 70%;">
4 57: <iframe  scrolling='no' style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"  src="./javascripter.html"></iframe>
4 58: </div>
4 59: 
4 60: ### and remote
4 61: 
4 62: <iframe width="70%" height="400" src="https://whatamigoingtodonow.net"></iframe>
4 63: 
4 64: 
4 65: ### From observableHQ
4 66: 
4 67: The following graphs have been embedded using the embed code from https://observablehq.com/d/5b1c5fcaeeb466ad directly into an HTML block. Note that the page has had link sharing enabled so anyone can edit the notebook using this link…
4 68: 
4 69: <iframe width="800" height="400" frameborder="0"
4 70:   src="https://observablehq.com/embed/d6faa6afe329c34d?cells=viewof+canvas"></iframe>
4 71: 
4 72: ### Local pdf
4 73: 
4 74: <div style="padding-bottom:65%; position:relative;display:block; width:100%;overflow: hidden;">
4 75: <iframe id="pdf-js-viewer" style="position:absolute; left:0; top:0; width:100%; height:100%;"  frameborder="0" src="./lib/viewer.html?file=../what/The Portable Dragon.pdf"></iframe>
4 76: </div>
4 77: 
4 78: <!-- <div>
4 79: <object data="/what/The Portable Dragon.pdf" style="width:90vw;height:90vh">
4 80: </object>
4 81: </div> -->
4 82: 
4 83: [For additional information.. ](https://www.sitepoint.com/custom-pdf-rendering/)
4 84: 
4 85: ### Embedded from Coggle
4 86: 
4 87: If you click 'present and review' you can work your way through the coggle by clicking the connections.
4 88: 
4 89: <iframe   width="853" height="480" scrolling="no" src="https://embed.coggle.it/diagram/XZhCubstyArCE1ji/857afecb3206c560bc73123d81259e3619a65f461aad0d6896ad83437fdbfc36" frameborder="0" allowfullscreen=""></iframe>
4 90: 
4 91: 
4 92: ## About markdown ssg
4 93: 
4 94: A showdown based ssg with SEO.
4 95: 
4 96: ### Example page
4 97: 
4 98: See [headaches](what/health/Headaches.md)
4 99: 
4 100: ### Katex
4 101: 
4 102: Latex
4 103: ```latex
4 104: x=\frac{ -b\pm\sqrt{ b^2-4ac } } {2a}
4 105: ```
4 106: And in line: $ x=2, b=3;  bx=6 $
4 107: 
4 108: 
4 109: 
4 110: 
4 111: Asciimath
4 112: 
4 113: ```asciimath
4 114: x=(-b+-sqrt(b^2-4ac))/(2a)
4 115: ```
4 116: 
4 117: and in-line not really working - should be in-line with text ~g(x) = 3x^4 + 2x^2, x=3~
4 118: 
4 119: ### Scripts and editable/executable javascript codeblocks
4 120: 
4 121: The following `js` codeblock is editable, and ctrl-click will execute the code. Note that it is also using a script which can be included in the markdown but, like all scripts, will be hidden when the html is displayed. To be available to the codeblock script, any variables defined in the 'hidden' script must be global (ie. do not use "`var x=..`" or "`let x=..`" just use "`x=..`")
4 122: 
4 123: <script>
4 124: test = function(){setTitle('test');}
4 125: </script>
4 126: 
4 127: ```js
4 128: let a='hello'
4 129: setTitle(a+' goodbye');
4 130: ```
4 131: 
4 132: <br><br><br><br><br><br><br><br><br><br>
4 133: 
4 134: 
4 135: 
4 136: 
6 1: 
6 2: <div style="position:relative; overflow: hidden; width: 95%; padding-top: 70%;">
6 3: <iframe style="position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;"  src="./javascripter.html"></iframe>
6 4: </div>
6 5: 
7 1: 
7 2: 
7 3: Try this: ~  x=2  ~
7 4: 
7 5: Or this: $  x=2  $
7 6: 
7 7: Or this: $$  x=2  $$
7 8: 
7 9: Asciimath
7 10: ```asciimath
7 11: x=2
7 12: y=3
7 13: ```
7 14: 
7 15: Latex
7 16: ```latex
7 17: x=2
7 18: ```
7 19: 
9 1:   <iframe style="width:400;height:400;" src="./network.html">
9 2:   </iframe>
9 3: 
12 1: ## what site?
12 2: 
12 3: This is a working site designed to integrate with a second brain or digital garden.
12 4: 
12 5: ### Note and info creation
12 6: 
12 7: Information can be created in markdown note form using a note taker like obsidian or vscode.
12 8: Any note taker that produces markdown files in a folder that can be synced with a folder in the local version of this repo can be used.
12 9: 
12 10: The note taker(s) can be on mobile - simply sync each to the appropriate local repo folder.
12 11: 
12 12: Other info can be imported as markdown, html, pdf, etc. files, and linked in the notes via markdown links.
12 13: These files will still be accessible even if they are not specifically linked.
12 14: 
12 15: VSCode can maintain the repo locally and sync changes to the associated Github repo.
12 16: 
12 17: ### Site creation and update
12 18: 
12 19: The site may be immediately viewed from VSCode by using [Live Server](vscode:extension/ritwickdey.LiveServer). When the extension is installed, right-click `index.html` in VSCode explorer and select `Open with Live Server`. 'Live' means that the server will continue working in the background, and changes made will be immediately visible in the browser.
12 20: 
12 21: The simplest eternal site creation is by using Github pages:
12 22: 
12 23:  - In the Github repo settings page, click Actions in the TOC column and check "Allow all actions and reusaable workflows"
12 24:  - The click Pages in the TOC column, set the source as "Deploy from a branch", set the Branch as "main" or "master", then click save.
12 25: 
12 26: When this is done, as soon as changes are commited and pushed to Github, Github actions will auto-activate and create or update the site.
12 27: 
12 28: The digital garden or second brain is then accessible as https://yourname.github.io/what, just as this one is https://rmzetti.github.io/what.
12 29: 
12 30: 
13 1: https://rmzetti.github.io/what/index.html?file=atester.md
13 2: https://rmzetti.github.io/what/index.html
13 3: https://rmzetti.github.io/what/index.html?file=index.md
13 4: https://rmzetti.github.io/what/javascripter.html
13 5: https://rmzetti.github.io/what/index.html?file=javascripter.md
13 6: https://rmzetti.github.io/what/network.html
13 7: https://rmzetti.github.io/what/index.html?file=network.md
13 8: https://rmzetti.github.io/what/plotlinks.html
13 9: https://rmzetti.github.io/what/index.html?file=README.md
13 10: https://rmzetti.github.io/what/index.html?file=syntax.md
13 11: https://rmzetti.github.io/what/syntax.md.html
13 12: https://rmzetti.github.io/what/testheader.html
13 13: https://rmzetti.github.io/what/what.html
13 14: https://rmzetti.github.io/what/index.html?file=hover-exec/misc_tests.md
13 15: https://rmzetti.github.io/what/index.html?file=hover-exec/README.md
13 16: https://rmzetti.github.io/what/index.html?file=hover-exec/readmore.md
13 17: https://rmzetti.github.io/what/index.html?file=music/Intro.md
13 18: https://rmzetti.github.io/what/nutrition/nuvegan.html
13 19: https://rmzetti.github.io/what/index.html?file=what/A life of one's own.md
13 20: https://rmzetti.github.io/what/index.html?file=what/Bicycle helmets the Dutch way.md
13 21: https://rmzetti.github.io/what/index.html?file=what/ComeOfAge.md
13 22: https://rmzetti.github.io/what/index.html?file=what/KeepNotes.md
13 23: https://rmzetti.github.io/what/index.html?file=what/TheBlossomestBlossom.md
13 24: https://rmzetti.github.io/what/wordcloud/cloud.html
13 25: https://rmzetti.github.io/what/wordcloud/output.html
13 26: https://rmzetti.github.io/what/index.html?file=what/health/Headaches.md
13 27: https://rmzetti.github.io/what/what/health/Headaches.md.html
13 28: https://rmzetti.github.io/what/what/health/headaches.md_files/saved_resource.html
13 29: 
14 1: atester.md
14 2: coggle.html
14 3: cookies.html
14 4: index.html
14 5: index.md
14 6: javascripter.html
14 7: javascripter.md
14 8: math.md
14 9: network.html
14 10: network.md
14 11: pdfjs.html
14 12: plotlinks.html
14 13: README.md
14 14: sitemap.txt
14 15: sitemapRaw.txt
14 16: syntax.md
14 17: syntax.md.html
14 18: test.html
14 19: testheader.html
14 20: testphotos.html
14 21: testphotos.md
14 22: what.html
14 23: hover-exec/misc_tests.md
14 24: hover-exec/README.md
14 25: hover-exec/readmore.md
14 26: lib/stoplist.txt
14 27: lib/stoplist2.txt
14 28: lib/stoplistok.txt
14 29: music/Intro.md
14 30: nutrition/nutrients_common_foods.pdf
14 31: nutrition/nuvegan.html
14 32: 
14 33: what/A life of one's own.md
14 34: what/Bicycle helmets the Dutch way.md
14 35: what/ComeOfAge.md
14 36: what/KeepNotes.md
14 37: what/TheBlossomestBlossom.md
14 38: what/The Portable Dragon.pdf
14 39: what/Yutang Lin.pdf
14 40: what/health/Headaches.md
14 41: what/health/Headaches.md.html
14 42: wordcloud/cloud.html
14 43: wordcloud/output.html
14 44: 
15 1: -----------------------------------------------------------------------------
15 2: title   : Markdown reference
15 3: -----------------------------------------------------------------------------
15 4: 
15 5: # Markdown [Cheat Sheet](https://www.markdownguide.org/cheat-sheet/)
15 6: 
15 7: This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can’t cover every edge case, so if you need more information about any of these elements, refer, for example, to the reference guides for [basic syntax](https://www.markdownguide.org/basic-syntax) and [extended syntax](https://www.markdownguide.org/extended-syntax).
15 8: 
15 9: ## Basic Syntax
15 10: 
15 11: These are the elements outlined in [John Gruber’s original design document](https://daringfireball.net/projects/markdown/syntax). All Markdown applications support these elements.
15 12: 
15 13: ### Heading
15 14: 
15 15: ```
15 16: # H1
15 17: ## H2
15 18: ### H3
15 19: ```
15 20: 
15 21: ### Bold
15 22: 
15 23: ```
15 24: **bold text**
15 25: ```
15 26: 
15 27: ### Italic
15 28: 
15 29: ```
15 30: *italicized text*
15 31: ```
15 32: 
15 33: ### Blockquote
15 34: 
15 35: ```
15 36: > blockquote
15 37: ```
15 38: 
15 39: Gives this:
15 40: > blockquote
15 41: 
15 42: ### Ordered List
15 43: 
15 44: ```
15 45: 1. First item
15 46: 2. Second item
15 47: 3. Third item
15 48: ```
15 49: 
15 50: ### Unordered List
15 51: 
15 52: ```
15 53: - First item
15 54: - Second item
15 55: - Third item
15 56: ```
15 57: 
15 58: ### Code
15 59: 
15 60: ```
15 61: This is `code`
15 62: ```
15 63: 
15 64: gives:
15 65: 
15 66: This is `code`
15 67: 
15 68: ### Horizontal Rule
15 69: 
15 70: ---
15 71: 
15 72: ### Link
15 73: 
15 74: [Markdown Guide](https://www.markdownguide.org)
15 75: 
15 76: ### Image
15 77: 
15 78: ```
15 79: ![alt text](https://www.markdownguide.org/assets/images/tux.png "width=60")
15 80: ```
15 81: 
15 82: gives:
15 83: 
15 84: ![alt text](https://www.markdownguide.org/assets/images/tux.png "width=60")
15 85: 
15 86: ## Extended Syntax
15 87: 
15 88: These elements extend the basic syntax by adding additional features. Not all Markdown applications support these elements.
15 89: 
15 90: ### Table
15 91: 
15 92: ```
15 93: | Syntax | Description |
15 94: | ----------- | ----------- |
15 95: | Header | Title |
15 96: | Paragraph | Text |
15 97: ```
15 98: 
15 99: ### Fenced Code Block
15 100: 
15 101: Use triple backtics (fence) for the line at the start and the end of a 'code' block to get
15 102: 
15 103: ```
15 104: s="Hello world"
15 105: print(s)
15 106: ```
15 107: 
15 108: ### Footnote
15 109: 
15 110: Here's a sentence with a footnote. [^1]
15 111: 
15 112: [^1]: This is the footnote.
15 113: 
15 114: ### Heading ID
15 115: 
15 116: ### My Heading {#custom-id}
15 117: 
15 118: ### Definition List
15 119: 
15 120: term
15 121: : definition
15 122: 
15 123: ### Strikethrough
15 124: 
15 125: ~~The world is flat.~~
15 126: 
15 127: ### Task List
15 128: 
15 129: - [x] Write the press release
15 130: - [ ] Update the website
15 131: - [ ] Contact the media
15 132: 
15 133: ### Emoji
15 134: 
15 135: That is so funny! :joy:
15 136: 
15 137: (See also [Copying and Pasting Emoji](https://www.markdownguide.org/extended-syntax/#copying-and-pasting-emoji))
15 138: 
15 139: ### Highlight
15 140: 
15 141: I need to highlight these ==very important words==.
15 142: 
15 143: ### Subscript
15 144: 
15 145: H~2~O
15 146: 
15 147: ### Superscript
15 148: 
15 149: X^2^
15 150: 
20 1: 
20 2: <style>
20 3: .column {  float: left; height:"200px";width:"200px"; padding: 10px;}
20 4: .column img { opacity: 0.8; cursor: pointer; }
20 5: .column img:hover { opacity: 1; }
20 6: .row:after { content: ""; display: table; clear: both; }
20 7: .container { position: relative; display: none; }
20 8: #imgtext { position: absolute; bottom: 15px; left: 15px; color: white; font-size: 20px; }
20 9: .closebtn { position: absolute; top: 10px; right: 15px; color: white; font-size: 35px; cursor: pointer; } 
20 10: </style>
20 11: 
20 12: <div style="display: flex; justify-content: space-between;  width: 90%;">
20 13: <img src="https://lh3.googleusercontent.com/pw/AL9nZEUwpFsgQfCAUF7kPqVYXzrqJ5UIC8BnHbmzdqOesZ9qoodEz7SNKXDW1NaYvbmJSlKB1lBZCrKRVyD_YSYTI_Isu8O_uywxfS6aZhmDsN2mbidSJdROWnRpt2tkG32RUWO1XMvVzir9T7_4QW_67KS7lg" onclick="expand(this);" width="150"/>
20 14: <img src="https://lh3.googleusercontent.com/pw/AL9nZEV3COzeDPoh8NKPre-74u1N98B5hNmEvC1Hw24Z6Qcw-w5aerQ36bMxRHssREaAnQB1UqYeJz5OwD16-Pxu38-gEy9XM0KeMd7yP5_SckvwcCOKflyii_8F_VdNDALypWVW9wxol0v-6a5dO6N1zZrmJg" onclick="expand(this);" width="150"/>
20 15: <img src="https://lh3.googleusercontent.com/pw/AL9nZEV6RwPTwaPBVgVDJOQxNiqrlt2hh_5fe8ik6QbQmoU466QGnAaiojVa9QmF7vooVQCmkm8GmKCnEB91bz7pkZqOAcJUQp0Jhzkf6bzx3C8vyVLkDzP3mYaWywQlDeGzCVKHG5qMzyDx7UeZHjPWJpNzwg" onclick="expand(this);" width="150"/>
20 16: <img src="https://lh3.googleusercontent.com/pw/AL9nZEXBpynjtKAQhgLHKOYaPF3ZVg-Y3QYPKU7VWTNoC1O9D64AIyu4_ZdCmihx6PEGg3bCeoMCREmkj8i6AlPTkWU0KPNpk8UItp7lrMWENAhNAVvcI3_52OpoQszwm0WWvFWr_p3poiOOgt_C7woPAvxn4g" onclick="expand(this);" width="150"/>
20 17: </div>
20 18: 
20 19: <div class="container">
20 20:   <span onclick="this.parentElement.style.display='none'" class="closebtn">&times;</span>
20 21:   <img id="expandedImg" style="width:90%">
20 22:   <div id="imgtext"></div>
20 23: </div>
20 24: 
20 25: <script>
20 26: function expand(imgs) {
20 27:   var expandImg = document.getElementById("expandedImg");
20 28:   var imgText = document.getElementById("imgtext");
20 29:   expandImg.src = imgs.src;
20 30:   imgText.innerHTML = imgs.alt;
20 31:   expandImg.parentElement.style.display = "block";
20 32: }
20 33: </script>
20 34: 
20 35: <a href="https://lh3.googleusercontent.com/pw/AL9nZEUwpFsgQfCAUF7kPqVYXzrqJ5UIC8BnHbmzdqOesZ9qoodEz7SNKXDW1NaYvbmJSlKB1lBZCrKRVyD_YSYTI_Isu8O_uywxfS6aZhmDsN2mbidSJdROWnRpt2tkG32RUWO1XMvVzir9T7_4QW_67KS7lg" target="test">Photo link 1</a>
20 36: 
20 37: <a href="https://photos.google.com/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA/photo/AF1QipPW8IAsebbaFdn1RIIczXlKWf97vfYZpUaFwURp?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3" >Photo link 2</a>
20 38: 
20 39: <hr>
20 40: 
20 41: <h4>Embed test</h4>
20 42: <a href="https://photos.app.goo.gl/Rf58i5tRr5iA24uV7"> album</a>
20 43: 
20 44: <h3>test</h3>
20 45: 
20 46: <img width="640px" height="480px" src="https://lh3.googleusercontent.com/pw/AL9nZEUpB6tfKnZk9AyjDv2NyGQ2IQLujadIgpW5Ote6op5aAm3cnnzPo_KB9QHg_BMn43g_fFwEio_AJHw1I2xOlPXpLbOlcti7l7ujFSyV7fKjLQxMbns8x0bLml5Y9kzIQgomdXh2za6YNqAX85t0rCuiMQ=w640-h480-no?authuser=0"></img>
20 47: 
20 48: <h3>test2</h3>
20 49: 
20 50: <img src="https://lh3.googleusercontent.com/pw/AL9nZEUpB6tfKnZk9AyjDv2NyGQ2IQLujadIgpW5Ote6op5aAm3cnnzPo_KB9QHg_BMn43g_fFwEio_AJHw1I2xOlPXpLbOlcti7l7ujFSyV7fKjLQxMbns8x0bLml5Y9kzIQgomdXh2za6YNqAX85t0rCuiMQ=w640-h480-no?authuser=0"></img>
20 51: 
20 52: <!-- <iframe width="70%" height="300px" src="https://photos.app.goo.gl/Rf58i5tRr5iA24uV7"></iframe> -->
20 53: 
20 54: <!-- <iframe width="70%" height="300px" src="https://photos.google.com/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3"></iframe> -->
20 55: 
20 56: <h3>From <a href="https://www.publicalbum.org/blog/embedding-google-photos-albums/">here</a></h3>
20 57: 
20 58: <!-- <div class="pa-carousel-widget" style="width:100%; height:960px; display:none;" -->
20 59: 
20 60: <!-- https://photos.google.com/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA/photo/AF1QipOxi3Wc6GZeSe_m5JCCKBcnM71t9sEBlGfxgdCn?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3 -->
20 61: 
20 62: ```js
20 63: const https=require('https')
20 64:  const data = JSON.stringify({
20 65:       offset: 0,
20 66:   })
20 67: const options = {
20 68:   hostname: 'photos.google.com',
20 69:   port: 443,
20 70:   path: '/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3',
20 71:   method: 'GET',
20 72: };
20 73: const req = https.request(options, res => {
20 74:     console.log(`statusCode: ${res.statusCode}`);
20 75:     res.on('data', d => {
20 76:       console.log('output')
20 77:       console.log(JSON.stringify(d));
20 78:       console.log('done')
20 79:     });
20 80:   });
20 81:   req.on('error', error => {
20 82:     console.log(''+error);
20 83:   });
20 84:   req.end();
20 85: ```
20 86: 
20 87: const response = await fetch.get("https://photos.google.com/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3")
20 88:  
20 89: https://photos.google.com/share/AF1QipOqQg68u6icDpO1lHfWJblVUxLpBbuD6EURqQvm2av70YNvYM-lVJfmF9ZCBphxiA?key=OUNndTF4NmwtUnMwVi1TejlxNkpRRGYwam5yNGl3
20 90: 
20 91: 
20 92: 
20 93: <script src="https://cdn.jsdelivr.net/npm/publicalbum@latest/embed-ui.min.js" async></script>
20 94: <div class="pa-gallery-player-widget" style="width:100%; height:480px; display:none;"
20 95:   data-link="https://photos.app.goo.gl/Rf58i5tRr5iA24uV7"
20 96:   data-title="Timpendean rock art"
20 97:   data-description="64 new items · Album by rmzetti"
20 98:   data-background-color="#ffffff">
20 99:   <object data="https://lh3.googleusercontent.com/_WTDHD7ztUPmwKcw7VLYMFCI1tQN4RUBMwlD8IUbPyNtgZsohUf_QDwiVpr7EUvxvfQQygYZxjriSSSPkenADhQQcW346HNaB2vqKHc6q5Wf9URI6e_Qw7nIzCoeZRRL61djSCk3pxE=w1920-h1080"></object>
20 100: 
20 101:   <object data="https://lh3.googleusercontent.com/GQ1Zgux2LmYD2etF3jGLVGAC5z5p5YTygQGHgD-6V0o16NIo-MK_gUnU2LORAQsQPlhWdnsh30Kv_4_w1tbw7Xt5Qz_3cY4M9Fb6JbseWucmB-HBUjOsJMHRKY24yM86HI8D-EyWm7A=w1920-h1080"></object>
20 102:   <object data="https://lh3.googleusercontent.com/QQ9khNgCj7uqP790G99V2JsznObo7uAcDFPPu-Q0mP22wml61oOYDHwkY5TS1rdfa27ZAcDrGyE15DMFh9SlfUn9mbkXrbTeT8keTqn9rcaoLQ1MRdRnUIej-UWnpklUVt1tIzRGnsI=w1920-h1080"></object>
20 103:   <object data="https://lh3.googleusercontent.com/MFMS-IJoklaQQU_atB3fysVcjNU8xM6zTT0aXad_Ul1zJ_YbNLe1UVGR1KdtAR3MCYodhPD8Cn8C_Q3uPi6KwZTndZiaARJzq96hRJmX0kG_iMs_l_vLpPZ-xkcWQ5HlV2oB-a6PvvA=w1920-h1080"></object>
20 104:   <object data="https://lh3.googleusercontent.com/6ZNquT6hm9XFbb1pb_VfMObjz1mTUBwLFykwC7BWQCe95yEGwo8sapAFZ-CoOdjYUjdki1vRmskVSB-Kwed6OVKJs-RDJ8S0JAJ7hfSBY7qfL-iURcKM_cyeNfUGsjlw4Z09ESM7hAo=w1920-h1080"></object>
20 105:   <object data="https://lh3.googleusercontent.com/mu-N7lGOqX7LfZxMJO8J_pzWE-D8eMSX32VShnwxQYWR4a8ex0WC4qZ1gDx1HCkyUS5Qq2JTsc7y3Mrk_7TbdbfNoO1o8StSFgE-2DHCqVH1EnhOaUhXxZ7awpbNz1Z_3viY9QV6sPA=w1920-h1080"></object>
20 106:   <object data="https://lh3.googleusercontent.com/__1noFAXZZ5GdKgK8F8LlMi3Loe2qNzKwVvVppTtFkDiRTgnmAu8RJLPEYcfM5tXtHJBoxPGGmuszWellCsUGBlIKxwgRFVIP858mFHIStn4IGOUV7k8uhcjlXJJMdBS7Ln9NBsccTo=w1920-h1080"></object>
20 107:   <object data="https://lh3.googleusercontent.com/wwYGMLGP4gec6kW2adgRG-3AtbiD6IX_Xi1uJ7cmiksGhbP6XHMlVlE0vnGiYzj6mCpyUOL8SHBzvT_D4fjYfFpf2tPj5oje7XzWC8jrQt4RUr8gsioj7IvP8HYLJ1MCXaxIdj3ZqAQ=w1920-h1080"></object>
20 108:   <object data="https://lh3.googleusercontent.com/6eU7VObjyPA2oCfPg1uzb7j8Q3KTDI_D_mbixuiWFsVJFcPYELLIUtaWWegngtzHi5V0z7B0i7l8UoDSlnVVDGgVzhPNc1l8vNtc0ljzFM3GQW9g4AG28Yn7hFPpCE525nW6mJg6xb8=w1920-h1080"></object>
20 109:   <object data="https://lh3.googleusercontent.com/3LgsCJG70L8oVy0zkmlrAKHy7peOi-QpwX7MvZ1j5lz3QyWxjGqb9NQXB5KLgf8K_cC-rwk3bKcg1QT2C6wHOC94cn8tiA2ksHJg-3tgJvohgXzjtVMH21FQ-1u4ZcR206O_tzw6kjs=w1920-h1080"></object>
20 110:   <object data="https://lh3.googleusercontent.com/taomo137QwNu2lgCm6G7NbEmmiZgYPlvaInXRkjD6z1p--AyMTTTuOIQ-XQKCUeATi2SSwblhJ4kgcoW0RNDBIX-swlmdlk_yJosAQ2yUyRo1EtaqY5_bF4wBPcjNktWgSXe5Iv1G3w=w1920-h1080"></object>
20 111:   <object data="https://lh3.googleusercontent.com/9zx4pu0tZfubEzBslI2uTY5V_p0P74rzY91MTVqeuZsfgk6zWh7Iy8TiZzHpHphuQewni2-C0lyTXp7F1mfTXsG6KRt4IBdNi6uD2k3BgvS_bm2T3Osk4OFTKZMLGsEz6ACiqGBrnws=w1920-h1080"></object>
20 112:   <object data="https://lh3.googleusercontent.com/OPTxOrFj4ppnkGT55QevXK6GqcSoFlQLiSKaoMIGSmc6nyD9GbvP_mbbnJwkgTM9LfUFYTM-xT_304yr4Q6Lu_sHGLhjsijrWGZ-3TWIkB8G9LQItdJkigj3lfk-7oZsWf45KqFnJAQ=w1920-h1080"></object>
20 113:   <object data="https://lh3.googleusercontent.com/HWrT8vCTsdb1bRmOT205qcHkM0_Ma6Kgco5cHEaIS8Gx3jJj_K3fPDwaY1faQRc8uZnf78wqX8TX046LJrud7pG-9RP6VbJyoFNkuVqKB5OBFMeZ_QYUG6SugfHbLN4lUJRH2L9Ua-0=w1920-h1080"></object>
20 114:   <object data="https://lh3.googleusercontent.com/n7tRNSwZerHmvPyiBr56eFWqmxK2dKsf0TUEtYaM2q4T61RNi_rKNNIgfNfsu2b_3PmQ_VLG0buuugzSaSF5KM-e_0xx5Z19zXtPesg-0CH5uvwonBNSAqjUW2r22NC7nCVBDnpKtrk=w1920-h1080"></object>
20 115:   <object data="https://lh3.googleusercontent.com/-a6GLFI7Ybbo4GwTpYusoQ6Uf4p_rKR1dXjE2n47SxGXU5-iWbutBYcynALaO1nht5jmbr-bb5eoo3e2NgkrN67EJT3eLf-TdrITJdUfozRwU5WKErABa2d3fsVK3wDVV7jq6__RW84=w1920-h1080"></object>
20 116:   <object data="https://lh3.googleusercontent.com/BmWP3T3gTDMWOi5vU000l_09vg9PdsSS5t83RB6yt40EZezSDUXCMjTS2i-74DZNf1Q2kgVwMTGAObowAt6W1C5jxLY6AHnvUMUmQucBwgkaEPefcWcOawMdKKKhl3c77PqgWSsy76Y=w1920-h1080"></object>
20 117:   <object data="https://lh3.googleusercontent.com/P5XZza6l0lpEup58ImQFpgS5-II4_s1TC2R0wCSAUfD0Jujhed1zzngoGkuCzTWX6JTBO_53LeATx-5O1a8R4W431UTJZT6MJmeysoYatiOmvwAtt8aFjOYfFcbIH7LKMb93hWuho6o=w1920-h1080"></object>
20 118:   <object data="https://lh3.googleusercontent.com/6naUTtrgUru0pPeb2YLaqtL8grs5cZq8YhAFbBr6AswO1n-NBpfTop3umWD9cXN5LRM0lp-XARXv4wckLA5Uy3nJxDmyCjWZhnpN3X4w5l4xz049XRuDQKCNiWjJRsEPooioKo69FbM=w1920-h1080"></object>
20 119:   <object data="https://lh3.googleusercontent.com/v189oKJDV2beNmyNLjJNZYqTtpzl37QFLdeJr4-896_JucVNvsCHhX2AlXRMl6l_VlwyC8Vodwi08fcm7P6j8mYDkmrBdr2ULORfS0Jbj1DczdnJ9SHAyVGknvYIkUKJzJDSDfY7G74=w1920-h1080"></object>
20 120:   <object data="https://lh3.googleusercontent.com/X9tk-MyGpvi652mZFI9Ibse6Xk8eyxcSbeEG4ieS2gvK6_vUJ9vdH1f_lMwL4-Ir7f9uZTiwN-FUGxXw60yBqgHGrrGLZS3rJSf2GH0VfTjvcmRo9LQOgRwyo4pBpT6jIYI85Qy0D54=w1920-h1080"></object>
20 121:   <object data="https://lh3.googleusercontent.com/G08c7KNDxt4C46iN3A-0JSwr6ztCyhcLN6E7zc_1qmfSnRrSa5puj2qY938Ut-NUr8zpDtmPtHK4nAtl61L8ZUJqA-lVf9TCvH2M5AZ0I1BNcVD4S1fu_7yydftx0GNhvQf_bv05SiI=w1920-h1080"></object>
20 122:   <object data="https://lh3.googleusercontent.com/EyLtgN3hz3NFDc7Kz31FnP2mLhQcLx0hEAXrDrWLLGKwhASfTJhubZmQ73rfCQsxb_7RiImIDIt51c53ocp0oH4TE_x81f4W7UtcrNc6524J0Djmdgfu-sGfX9ftNTz5cxR2-yJEEIs=w1920-h1080"></object>
20 123:   <object data="https://lh3.googleusercontent.com/IoOWZ_ZdwXp_KGJ8418GuDqtO8moshgaMb_LCjbXr9bF40DBU-jDdwuPIbz0LOnyOHrTVys-q-DKtJh2sqzHm_DUad_hqdTnXVsao26nq0K2AsCUIdlTJK5uSDnTSd5n5R9_7RUQamw=w1920-h1080"></object>
20 124:   <object data="https://lh3.googleusercontent.com/pCU9r8pCGfrTCLBymifRTKcbnREquJE-n8mZsQ1YMNXdcDr3FWzjVRTrgm_O65eOts8xx_JltHhEjodYQHLgbhPzXg1mynt2LehfYjEFQvodHFx9ja4WY6mUREVKisCj2ngzrictW0Q=w1920-h1080"></object>
20 125:   <object data="https://lh3.googleusercontent.com/U7vo5c_BR1u3M1zJq2uxRzFjr4kN7y98es7T4cUHq_-ZameumXdQxrxbMk8SrZjOrHlUuBfuGXTokwag6Rh9Q5SXk5g0MeiZ_56d054JzL6__WxvEh33htE3nCnT39LYaWpe5GyGd1Q=w1920-h1080"></object>
20 126:   <object data="https://lh3.googleusercontent.com/4WCmm065UcDJ6d_WdtzOp5iWVuSfrnUel9qGKMeJpmWEtQ-G0PuEpHRGfhf9Dh97tNIlyQJfOqPkLD6eAmOG-DTvkgSQniMW5prRAadlbSmwJLmLa5KEuCp0-LjyCkKQgwN9QM65y9A=w1920-h1080"></object>
20 127:   <object data="https://lh3.googleusercontent.com/kZ9al3bQGo5w-ROhSIr5Ws7doNUmhFmxiD8DAAdZg9zUR1CfZkJR8dmhFh6ZUueJivLNROC-wVvLxHlrGHBu1rknOYe5cLCFPtfdNgH6Q_aeukj3gpGlDlWImsfvVGJfUQh8ynDytvA=w1920-h1080"></object>
20 128:   <object data="https://lh3.googleusercontent.com/xqQfRxLvDaG8aLLxNij7cfpj6-7-DBkuCkcovoiLzLzaY0L6L_Z3Kq7rt1aitrItthzUgkGDpVwGXszUHnU37lVDzWGe5t9TQLnIxhQJjLyKMnLdNkc5nBi9yxpVHwNm8mHva7wCIAg=w1920-h1080"></object>
20 129:   <object data="https://lh3.googleusercontent.com/Ocp0rO87mNm-ptHxhqjPbMSv0K5N7YiztP4ByywaDzHC4RQaAlB4w4LLBlXJAorMoPLf0WQhhNvRwoNdUxuwhwqH_c694PH5I6PkwrMGDAUuWUsL8db4UNU5PyHC3XPMvhzrjm96OLY=w1920-h1080"></object>
20 130:   <object data="https://lh3.googleusercontent.com/fKTK0uDX3rjvIbxyCc_JOIpcjeVOcTrOcyrVUpsxtBsSu3I92262Y7VkZa_n4oXPUNcWi1LC8gRiLinfIB8HBtGpNVsLugZXtS3K4AU0yPyf7lRmxmWraiJwS7TgchO_yx9-b_Xl3lg=w1920-h1080"></object>
20 131:   <object data="https://lh3.googleusercontent.com/jGdxRgSC6_AXPQ1PwFXZtgShAEe6Ir6gY37TYKc8hkVPyrqo85oydmJzlkr5r0pT14bH9TQb2B87J1suMYIRoPUGcXcBG7o4krkQW_My5uA6kpDbrctoSuLhO4WIAf1Kv6jUkxkz0dE=w1920-h1080"></object>
20 132:   <object data="https://lh3.googleusercontent.com/4E1SuzBw6xQiSWMK-AUSXAKegXkm3oIK7n9neVJe3GsbGo8TAVx8xt9XadxAfjtP7dv7Lkwk3rrYm8lhG5x9YdFKQbBcdB9iUavpJwVPG08zZNZZ7VyVYNDSv7He8hu02mwSJEIvknM=w1920-h1080"></object>
20 133:   <object data="https://lh3.googleusercontent.com/W8s5ldCPJG5LcsGDDiWkpKNBjOQx-BORekWVYW2MRa9mhT2dhD_3RvIJ8n0dVgs6nwWbtO3UMzSGK4vsQzr8fy-UIbCQuFjH_y8iNDN3sSfhIoY19_x4V7Yn2Y-RTPXRiLmmmol_9Kc=w1920-h1080"></object>
20 134:   <object data="https://lh3.googleusercontent.com/Ysrty_uwURKsT9aUKOml0phC9K1G2tbsyB1hU40dcHxjaztBWYec3E6wQkK29-CvJaOAHzNRoDvayaJqFVvHqgIUsZW3q9xz6u-usNuYeNtxzprnGPNuSKi_XXcIISWEBoDPxyhm7vY=w1920-h1080"></object>
20 135:   <object data="https://lh3.googleusercontent.com/mwlDwLQx-buLy6JCsu9E8GwVnztqnqvL5VxMbkR8jS1xWyDzNAGtv8vMDf5vecs5adlH3RNXSQQ5OU36r9XCpTNGXsgqztBcHd1TeRhiR9uujj3Xk2Ec4UgiRYsdZQ0RsMEKW8d1oFc=w1920-h1080"></object>
20 136:   <object data="https://lh3.googleusercontent.com/StkuG7adm59E0NExLY--IcDbZP9T-yqqmKlMHOAMyAEhPeHvnA-JwjJCzy1-vCwCfc4_3TYIsyIO7fEtsah8afryVipGdHa20rtZOe5xMFaMd5cuOg8M4CEXwznSoREwJy_r4l4utxA=w1920-h1080"></object>
20 137:   <object data="https://lh3.googleusercontent.com/AV3ofX_c8S0FvMN5z6654BtpSGk9oLjgdeqovuyZJFrXRg4QGgncFtziziUWFYfjfTYQP7xxMjtnRDgZTe42_I-x4tnrQ1a4SD9GiJ4liVlUBb8RJNVmX75suHQzL1zMBrTUmV4aHzc=w1920-h1080"></object>
20 138:   <object data="https://lh3.googleusercontent.com/sgOzyD8-6yuoJyR4w982wtdSclR0c6SbllbMGbo45fM54efw8lEEGaa3yMAk-h2Tm-9X4jnmydl9J5oeHu-jxKNm_VVt_a4HehsNPO9H6sPTtPBolr6L0NS4Pr2VJ5ZuZ4TmS-TME6Q=w1920-h1080"></object>
20 139:   <object data="https://lh3.googleusercontent.com/qZTDCESZftZIjGQF5UvrmMPvaY-LQxeqE3P2HnSNbcUF5yPzF_Y_AKZqEg0zYePF5naeoRz5b2TNzXjRhY_K4-N-FfqP4yTv6EZofB6-Nhhn-4Gcsesvp6ILmqPF_LQXtSaYIHaYKaM=w1920-h1080"></object>
20 140:   <object data="https://lh3.googleusercontent.com/G3a5rjjPYI1DLLQBcTija27r2TOZVlhVeFwJQMTfJ2-OLG11UbyubpfM7E_dMkCcS95XNBItJ6ZDbLpbpJTR_PNM0Yxeh85dohhyBJpndY3xbRSk8VdqGUgHXt2XOWl-hmSKB7kqDJQ=w1920-h1080"></object>
20 141:   <object data="https://lh3.googleusercontent.com/WW1AM_MTjw6NTmX1tKwGcdBpG08GckIPHYLLJY1w3_dRFLZ73_5blfbXiERxvulCs56-5yCEGF-zy7QVQjdS7Ad_TlEIx9l8WUpxvf9rR7DkHUcl3gXUbbbdD17R0nMcgDA4K_8ArxY=w1920-h1080"></object>
20 142:   <object data="https://lh3.googleusercontent.com/hDSAR7IIHvWEtQQRWPD2o_3iFFPKp8lVS23zchGmIi9qexgG7MZzukBJE_z4l1v24BMXZsN8lNcd-_7RYWaiQPxVDhN3adAcyH6MLhVtgxTZ3kavb2qKPHgmlx6AxHkpAkax9rhfOn8=w1920-h1080"></object>
20 143:   <object data="https://lh3.googleusercontent.com/GOUR6t2WtvDm8CpuxC0l1oowYV0ZygHpyRnyDmAloFJJJEN28P5-aJed-VkvLLQYmeuw1LpSPX2PfXJHqKGZHEqnE-NxZch-lP1g7hfHpbhCR4Ke1FKpFjaOwyIBE49sCee3AfXlxEI=w1920-h1080"></object>
20 144:   <object data="https://lh3.googleusercontent.com/bd5Lgfwqyp6Q3FgLrmX7RlOjSbMWJTFY8a6XR8H1a25W9eGNfii75h45larnsBygF9_jaHOzuh68q8pGap2_GWMTR0NAiOVYvIVdSI4VpTgx-hsE0hEoz6OCGUMS5Z_4rZSSUtFuNto=w1920-h1080"></object>
20 145:   <object data="https://lh3.googleusercontent.com/17hUYUSAeb_0DD8qjYeEgZzQ_Wel4uA8YQWdV-C7CMZ4Vn9M1iNTzAEV-7EYuq0oYN-EcBsspQvnmbikljw3ttpi28xsmsdXotsTe-Os759G-rA-friRS-b_vV7FNhLKEcA9xS-fQ_Q=w1920-h1080"></object>
20 146:   <object data="https://lh3.googleusercontent.com/by87tDdPUFHU-axi0Qcz0yog30D7GhtgaN9uLt7M1SltSBhY3p4mXB2yhyswUxtVVBBWYzdWWeMAvNbajh3o4VNpdIGm6HkFn3_xrShMFptRmgu5KIE9wcZBUvyjeadui5ToIAi5IZo=w1920-h1080"></object>
20 147:   <object data="https://lh3.googleusercontent.com/4KxaB1pPue8tR0IZpP_2As04Fv_DmPYMWM6zuYvbs9gQR8iBecxM0RWUHwJeKXJul69mFpXqO_Vuf8HZV1JtSSkMfj4hiuhQJmEtT9vG2A_PhXaKG9MkxTFCuV-JB5qltJbaaZ7qOS8=w1920-h1080"></object>
20 148:   <object data="https://lh3.googleusercontent.com/MOZVomiGMsAPyHdmLgN6u1PuHCOcKiM6nJ8VYK0SWlIRmxMU6m1g0H_UBfiMbzX7AdkajJb6v3jjbfFgBxp3AcWKIw463FN2VXSpIkm2zEOy4AQKQPq74wEVDPfdaIari7ONhkloTiw=w1920-h1080"></object>
20 149:   <object data="https://lh3.googleusercontent.com/qQHjUMwzZqP-ndnnR0uTohdzKcClsPGE6ekzObObMSydngoSfJtVdnJMrp9LxYkzvQYKvgEIWYbrQ59hf5Z181EbVq8NZZoj7Qc69dar10bTI9oSdmhLggZR09HlJtptnLDjr3b04ZI=w1920-h1080"></object>
20 150:   <object data="https://lh3.googleusercontent.com/qHkB_oL8x3pc6Xj6Tizuiw_euphwS6eV0gLfvKe6z9iPGPvQLkFuNeCE0Znv0p6CJc6rvv4n7jIjMweNSnK71IEYXoOHt3bE7-36GdtNystxnfACOTnHs2MZdb1QAMq_eeCSVG5q2IY=w1920-h1080"></object>
20 151:   <object data="https://lh3.googleusercontent.com/MA_M4PwiNvkLntlBpJcz0HHMNrzevNGTFir9xp1__OD7-8mAFbWMqLRrAxTaBwZcraG7xA50gkOeACLV6nqQ0LJLmJFtxDNlxl_y0Y9jTqIA_32AHH45vYHghbz3WhltriqyocdrMHI=w1920-h1080"></object>
20 152:   <object data="https://lh3.googleusercontent.com/yThwkGW20zG1gIvgHLJDQmlvxu9bBpM_mMMErC3lRCRlygfBNR8HP5oArg-GT6SxRMPf6r80IsFedabJpiiP4AJ1f0rqZa4bH4y2NDiafN7enZ0fbW5bhno2wS8ISp9gnD2QRrDqMC8=w1920-h1080"></object>
20 153:   <object data="https://lh3.googleusercontent.com/n7XVWGfuIyk0bbPZGzX-s7OAuL1JXZTILuBciSOfaJuIfSj_wCOAz-_RyOvk6Hf_P00W8SjdPa30GegPTvSY9YlKngq1F_Y2E3LiObcOlP2CDZEEwooidZ1hShKmAksdILOrcTM9diM=w1920-h1080"></object>
20 154:   <object data="https://lh3.googleusercontent.com/cb0kEBS7MrkFYwZ1JGhlrQSvTP97Ct3VGMjuTazZWkJFX6c9l6rfOlilGMKTmjKeLyY-8IdC7K_9_KEYHRpldBCFdFatFCs3hsAyDzG5ZLy3G-mhG9okamsF3iEKo-E1DBR_FzSF3l0=w1920-h1080"></object>
20 155:   <object data="https://lh3.googleusercontent.com/aBAIOyuX2mZ-A3TCp6RHryNXZMJBGPwG6JAi5adr8s34ey7TTEfKTeMs6s0Tl1pSfw_gETQqsfqf6MGx-A50Cvp82eapiKXhHPl5HWcfVvHgy5vOyTvDh7K-ryMZW2QO9RbAS8XF-Dw=w1920-h1080"></object>
20 156:   <object data="https://lh3.googleusercontent.com/_uz7w1cbYkSG5WmRsCHVRX8EUvPK_WjT_lSa9cNRTVbGxgM6VgDZ471-WPMZa8XXS9Gl_tybd-9E7FbwxGxcOvdWTzNgbzxmr2Ga_AQwg-9I8-U4wdecE1CSxuUKFW-7A6LKqT4ExXI=w1920-h1080"></object>
20 157:   <object data="https://lh3.googleusercontent.com/QDL3yRiiNJ3b1vzNljM0MyU6rLs0SeggeJWP-dfw7g6llnFGlTyww2gWdx3gW8ZGS_ZJ6yJTOjjwJD2g-vmlNEIlccxT4Gxh3KA9KEvWGkiQCPNtK-6cfSh1mJHnzrnIk3yKNfe0Q7E=w1920-h1080"></object>
20 158:   <object data="https://lh3.googleusercontent.com/BEGLHSOXrkl1mhUz7Vc0nkNuKejDoWq0z9WqBUHmG4_eLjvIL-rgpwUnCFBFiYdGqEPh_cDViNbS7SQxXgCIig7kv5Ovg9k-OKcy7pUAu24Q0Oel3KdepSQs01Cv7vlE3F5c8E5wojQ=w1920-h1080"></object>
20 159:   <object data="https://lh3.googleusercontent.com/czmbZmpwGqvuGW4Im4wuylmTF1bV4jXEx7ZYa7oSZ5zqJ6XYYO6BgYl9Z-ZEYKAZJe3NxBFNj-thGEYy9z_CWQfW2BslZSvJy8Qj2qPgSmBJVWorp-u2kvhAsXZmQxffCizvKptXk9c=w1920-h1080"></object>
20 160:   <object data="https://lh3.googleusercontent.com/AwqsvXflxP1W3CmYud1SrztakOuNSP_8jm_dk1jfGt9_oVuOElP2M7GEeIK2WqTV_QLTARqk7e32aoT4csSMOPGtuLIIvChBNM7h-wK-JRsWcseKw5e5zy9725RQ8Ljv2W6oZXfvf5M=w1920-h1080"></object>
20 161:   <object data="https://lh3.googleusercontent.com/YovVVqrKeGxZrqwIOXF6oDqw0pRrBy-xai5sMAU7wK9JpGH_BlWk2Z3bxC_t38OCokTwIB8QMDjhAo7NCX_9vLs2ytiNjxWofn20L_XQf-_TgqLT70YTxttsNzpWKtgY_VvNNw0dDyo=w1920-h1080"></object>
20 162:   <object data="https://lh3.googleusercontent.com/yZtwE8G6i6vPY-AIlK6neEV9HXTlQnnSAig9NMWDdFpbPjoUqZS2vNmdnBbrCV1flmS8f9QP3lbGEka28Xt2ogH3Pk4yltT6LMuEXtST1_qlREP25bTDEbfml4rOf5OfrnBPxJVlGzU=w1920-h1080"></object>
20 163:   <object data="https://lh3.googleusercontent.com/rOvVEgB16hFK0gnU-_DBLJ7nrOFxTDdzhWf99ZJD1Bxzg2p_9GGoUQxSCO0MgOiafj1iHEUmpnhHYkmlt3J9EWjVj4i6C0acwRe1Py-hMPIjzRActm3_fQDCESOZ6rMTvVPd3FENtj4=w1920-h1080"></object>
20 164: </div>
20 165: 
20 166: 
22 1: ## Hover-exec comparative tests
22 2: 
22 3: This provides various tests for scripts run in the VSCode extension *hover-exec*. All the test files are best viewed in the editor. Type or copy one of the following in any instance of the editor - hover to see the path/name, then click the path/name to open the file in the editor. If the cursor is in the command, using the shortcut alt+/ or opt+/ will open the file.
22 4: 
22 5: `edit %h/README` //opens the readme in the vscode editor \
22 6: `edit %h/test/readmore` //the readme but with more detail \
22 7: `edit %h/test/misc_tests` //benchmark and plotting comparative tests
22 8: 
22 9: NB. Each of the above commands (highlighted in preview) must be surrounded by single backticks. The 'edit' one-liners need not start in col 1.
22 10: 
22 11: Using *hover-exec* in the vscode editor on these files will allow live testing and comparison with the test outputs provided. Note that any changes made to these files will be reverted if *hover-exec* is updated, so save the file locally if you want to keep changes.
22 12: 
22 13: 
22 14: ## Contents
22 15: - [Hover-exec comparative tests](#hover-exec-comparative-tests)
22 16: - [Contents](#contents)
22 17: - [Javascript tests](#javascript-tests)
22 18:   - [using console.log](#using-consolelog)
22 19:   - [array operations](#array-operations)
22 20:   - [timing in javascript (without using moment.js)](#timing-in-javascript-without-using-momentjs)
22 21:   - [speed of eval vs Function within javascript code](#speed-of-eval-vs-function-within-javascript-code)
22 22: - [Javascript in the browser](#javascript-in-the-browser)
22 23: - [Plotting comparison](#plotting-comparison)
22 24:   - [Data for the plots](#data-for-the-plots)
22 25: - [Simple cross-platform cross-script speed tests](#simple-cross-platform-cross-script-speed-tests)
22 26:   - [Javascript tests: 'vm', 'eval' and 'node'](#javascript-tests-vm-eval-and-node)
22 27:   - [Javascript in the browser](#javascript-in-the-browser-1)
22 28:   - [Test using 'go' as a scripting language](#test-using-go-as-a-scripting-language)
22 29:   - [Test using 'python'](#test-using-python)
22 30:   - [Test using 'lua'](#test-using-lua)
22 31:   - [Pascal test](#pascal-test)
22 32:   - [Octave test](#octave-test)
22 33:   - [Test using scilab](#test-using-scilab)
22 34:   - [Julia test](#julia-test)
22 35: - [Configuration](#configuration)
22 36:   - [View and alter as a set ('scripts, 'swappers,'repls')](#view-and-alter-as-a-set-scripts-swappersrepls)
22 37:   - [View and alter a specific setting](#view-and-alter-a-specific-setting)
22 38: 
22 39: ## Javascript tests
22 40: 
22 41: Commands:
22 42: 
22 43: >      `js` or `js:vm` to use vscode's virtual machine
22 44: >      `js:node` to use node
22 45: >      `js:eval` to use vscode's eval
22 46: >      `html` to use javascript in the browser
22 47: 
22 48: For javascript in the browser see the following section [Javascript in the browser](#javascript-in-the-browser)
22 49: 
22 50: ### using console.log
22 51: 
22 52: ```js
22 53: // '''js //can use js, js:eval or js:node
22 54: let name='Fred'
22 55: 'hello '+name+', how are you '+3+' doing, ok?'=>> 
22 56: console.log('hello %s, how are you %s doing', name,3,', ok?')
22 57: ```
22 58: >      Test output (also identical output in-line):
22 59: >      hello Fred, how are you 3 doing , ok?
22 60: 
22 61: 
22 62: ### array operations
22 63: 
22 64: ```js
22 65: // '''js //uses vm by default
22 66: // '''js:eval //uses js syntax highlight and eval to exec
22 67: // '''js:node // uses js syntax highlight and nodejs to exec
22 68: let a=[1,2,3,4,5,6,7,8];
22 69: a.slice(2)=>> 
22 70: a.slice(0,2)=>> 
22 71: a=>> 
22 72: a.splice(2)=>> 
22 73: a=>> 
22 74: a=[1,2,3,4,5,6,7,8];
22 75: a=>> 
22 76: a.includes(6)=>> 
22 77: a.includes(5,-3)=>> 
22 78: a.includes(6,-3)=>> 
22 79: a.shift(1)=>> 
22 80: a=>> 
22 81: a.shift(1)=>> 
22 82: a=>> 
22 83: a.pop(1)=>> 
22 84: a=>> 
22 85: a.pop(1)=>> 
22 86: a=>> 
22 87: a.unshift(12)=>> 
22 88: a=>> 
22 89: a.push(['hello',true])=>> 
22 90: a=>> 
22 91: a[5]=>> 
22 92: a.push(['goodbye',false])
22 93: a=>> 
22 94: i=a.findIndex((el) => el[0]==='goodbye')=>> 
22 95: if(i===-1){i=a.length;} //because if index not found, i=-1, & splice(i,1) wrong
22 96: a.splice(i,1)=>> 
22 97: a=>> 
22 98: a.indexOf(6)=>> 
22 99: b=a.find((el) => el[0]==='hello')
22 100: b=>> 
22 101: console.log("hello ".repeat(3))
22 102: ```
22 103: >      Test output (mostly in-line):
22 104: >      hello hello hello
22 105: 
22 106: 
22 107: ### timing in javascript (without using moment.js)
22 108: 
22 109: ```js //can use js, js:eval or js:node
22 110: // '''js //can use js, js:eval or js:node
22 111: // the following line is required by node, ignored by eval & vm
22 112: const {performance}=require('perf_hooks');
22 113: let array1 = Array(1000000).fill(42);
22 114: let p=performance.now();
22 115: console.time('timer')
22 116: let t=Date.now()
22 117: array1=array1.map(x => Math.random())
22 118: array1=array1.map(String)
22 119: performance.now()-p=>> 
22 120: console.timeEnd('timer')  //vm & eval output this in dev-tools console only
22 121: console.log(array1.slice(0,2))
22 122: console.log('hello ',Date.now()-t)
22 123: console.log('abc',Date.now(),'def')
22 124: ```
22 125: >      Test output
22 126: >      [ '0.5418360655969707', '0.19301233896461345' ]
22 127: >      hello  531
22 128: >      abc 1650601634968 def
22 129: 
22 130: ---
22 131: 
22 132: ### speed of eval vs Function within javascript code
22 133: 
22 134: ```js:node
22 135: // '''js //can use js, js:eval or js:node
22 136: let n=1e6; //in the debugger use 1e5 (crashes for 1e6)
22 137: let expr = "7*7-7";
22 138: let result,t1, t2;
22 139: let p = Date.now();
22 140: for (let i = 0; i < n; i++) { //speed test loop
22 141:   result = Function("return " + expr)();
22 142: }
22 143: t1 = Date.now() - p
22 144: 'check result='+result =>> 
22 145: p = Date.now();
22 146: for (let i = 0; i < n; i++) { //speed test loop
22 147:   result = eval( expr );
22 148: }
22 149: 'check result='+result =>> 
22 150: t2 = Date.now() - p
22 151: console.log('- for n=',n,': using Function',t1,'msec using eval',t2,'msec')
22 152: ```
22 153: >      Test output:
22 154: >      js:node for n= 1000000 : using Function 675 msec using eval 190 msec
22 155: >      js:eval   for n= 1000000 : using Function 574 msec using eval 164 msec
22 156: >      js:vm    for n= 1000000 : using Function 858 msec using eval 364 msec
22 157: >      NB: in the debugger use n=1e5 (crashes for n=1e6)
22 158: 
22 159: ---
22 160: 
22 161: ## Javascript in the browser
22 162: On windows use `html` to use the default browser, on linux use `html:firefox`, or `html:chrome` or whatever is installed, and, if needed, check the *hover-exec* configuration for `firefox` (or `chrome`)
22 163: 
22 164: ```html
22 165: <!-- '''html //test output shown in the browser -->
22 166: <!--            //along with calculation timings -->
22 167: <script>
22 168: function test(){
22 169:   let t='\n Live:';
22 170:   const t1='\n >> ';
22 171:   let a=[1,2,3,4,5,6,7,8];
22 172:   t+=t1+a;
22 173:   t+=t1+a.slice(2);
22 174:   t+=t1+a.slice(0,2);
22 175:   t+=t1+a;
22 176:   t+=t1+a.splice(2);
22 177:   t+=t1+a;
22 178:   a=[1,2,3,4,5,6,7,8];
22 179:   t+=t1+a;
22 180:   t+=t1+a.includes(6);
22 181:   t+=t1+a.includes(5,-3);
22 182:   t+=t1+a.includes(6,-3);
22 183:   t+=t1+a.shift(1);
22 184:   t+=t1+a;
22 185:   t+=t1+a.pop(1);
22 186:   t+=t1+a;
22 187:   t+=t1+a.pop(1)
22 188:   t+=t1+a;
22 189:   t+=t1+a.unshift(12);
22 190:   t+=t1+a;
22 191:   t+=t1+a.push(13);
22 192:   t+=t1+a;
22 193:   let p=performance.now();
22 194:   let array1 = Array(30000000).fill(42);
22 195:   array1=array1.map(String)
22 196:   t+='\n\n >> '+Math.round(performance.now()-p)+'ms';
22 197:   t+=t1+array1.slice(-5);
22 198:   let expr = "7*7-7",n=1e6;
22 199:   let result=0;
22 200:   p = performance.now();
22 201:   for (let i=0; i<n; i++) { //speed test loop
22 202:     result = eval( expr );
22 203:   }
22 204:   t+='\n\n >> '+result;
22 205:   t+=t1+Math.round(performance.now()-p)+'ms';
22 206:   result=0;
22 207:   p = performance.now();
22 208:   for (let i=0; i<n; i++) { //speed test loop
22 209:     result = Function("return " + expr)();
22 210:   }
22 211:   t+='\n >> '+result;
22 212:   t+=t1+Math.round(performance.now()-p)+'ms';
22 213:   r2.innerText=t;
22 214: }
22 215: </script>
22 216: <h1 align="center"><br>Test results</h1>
22 217: <p align="center"> time to see live results: from 0.25 to 25 sec. depending on processor </p>
22 218: <div style="display:flex;align:center">
22 219: <div id="r1" style="margin:10;width:45%;color:blue;text-align:right">
22 220: <br> Guide (Chrome):
22 221: <br> a = 1,2,3,4,5,6,7,8
22 222: <br> a.slice(2) = 3,4,5,6,7,8
22 223: <br> a.slice(0,2) = 1,2
22 224: <br> a = 1,2,3,4,5,6,7,8
22 225: <br> a.splice(2) = 3,4,5,6,7,8
22 226: <br> but now a = 1,2
22 227: <br> reset a = 1,2,3,4,5,6,7,8
22 228: <br> a.includes(6) = true
22 229: <br> a.includes(5,-3) = false
22 230: <br> a.includes(6,-3) = true
22 231: <br> a.shift(1)= 1
22 232: <br> a = 2,3,4,5,6,7,8
22 233: <br> a.pop(1) = 8
22 234: <br> a = 2,3,4,5,6,7
22 235: <br> a.pop(1) = 7
22 236: <br> a = 2,3,4,5,6
22 237: <br> a.unshift(12) =  6
22 238: <br> a = 12,2,3,4,5,6
22 239: <br> a.push(13) = 7
22 240: <br> a = 12,2,3,4,5,6,13
22 241: <br> 
22 242: <br> time to fill 42 & map array[3e7] to String = 492ms
22 243: <br> result.slice(-5) = 42,42,42,42,42
22 244: <br> 
22 245: <br> eval test, check result is 42
22 246: <br> time = ~200ms
22 247: <br> Function test, check result is 42
22 248: <br> time (Asus ~2020) = ~450ms
22 249: </div>
22 250: <div id="r2" style="margin:10;color:red;align:left;">calculating ...</div>
22 251: </div>
22 252: <script>
22 253: r1=document.getElementById("r2");
22 254: //test();
22 255: window.setTimeout(function() {test();},150);
22 256: </script>
22 257: ```
22 258: 
22 259: ## Plotting comparison
22 260: 
22 261: These tests all use the same data utilising *hover-exec*'s *include* macro. 
22 262: To see the data quickly, hover over a line containing an *include* tag reference (not in preview).
22 263: 
22 264: ```html  //chartjs
22 265: <!-- '''html //test using chartjs -->
22 266: <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
22 267: <canvas id="myChart" style="width:100%;max-width:600px"></canvas>
22 268: <script>
22 269: let a=[ `include  #p1` ]   //note *include* is inside the array designator square brackets
22 270: let x=Array(a.length/2).fill(0).map((x,i) => a[i*2])
22 271: let y1=Array(a.length/2).fill(0).map((x,i) => a[i*2+1])
22 272: let b=[ `include  #j1` ] 
22 273: let y2=Array(b.length/2).fill(0).map((x,i) => b[i*2+1])
22 274: let c=[ `include  #go` ] 
22 275: let y3=Array(c.length/2).fill(0).map((x,i) => c[i*2+1])
22 276: new Chart("myChart", {
22 277:   type: "line",
22 278:   data: { labels: x, datasets: 
22 279:               [{ data:y1, borderColor: "red", fill: false },
22 280:                { data:y2, borderColor: "blue", fill: false },
22 281:                { data:y3, borderColor: "green", fill: false },
22 282:               ] },
22 283:   options: { legend: {display: false} }
22 284: });
22 285: </script>
22 286: ```
22 287: 
22 288: ```html //plotly
22 289: <!-- '''html //test using plotly -->
22 290:  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
22 291:  <!-- Plots go in blank <div> elements. You can size them in the plot layout,  or size the div-->
22 292: <div id="plot" style="width:70%;height:400px"></div>
22 293: <script>
22 294: let lm='lines+markers'
22 295: let a=[ `include  #p1` ]   //note *include* is inside the array designator square brackets
22 296: let b=[ `include  #j1` ] 
22 297: let c=[ `include  #go` ] 
22 298: let x=Array(a.length/2).fill(0).map((x,i) => Math.log10(a[i*2]))
22 299: let y1=Array(a.length/2).fill(0).map((x,i) => a[i*2+1])
22 300: let y2=Array(b.length/2).fill(0).map((x,i) => b[i*2+1])
22 301: let y3=Array(c.length/2).fill(0).map((x,i) => c[i*2+1])
22 302: plot1 = document.getElementById('plot');
22 303: Plotly.plot( plot1, [{ x: x, y: y1, mode: lm, name:'pascal' },
22 304:                   { x: x, y: y2, mode: lm, name:'javascript' },
22 305:                   { x: x, y: y3, mode: lm, name:'go' },]);
22 306: </script>
22 307: <a href="https://plotly.com/javascript/">plotly.js documentation</a>
22 308: ```
22 309: 
22 310: ```html //google charts
22 311: <!-- '''html //test using google charts -->
22 312: <div id="chart_div" style="width: 100%; height: 500px;"></div>
22 313: <script src="https://www.gstatic.com/charts/loader.js"></script>
22 314: <script>
22 315:   google.charts.load('current', {'packages':['corechart']});
22 316:   google.charts.setOnLoadCallback(drawChart);
22 317:   function drawChart() {
22 318:   let a=[ `include  #p1` ]
22 319:   let b=[ `include  #j1` ] 
22 320:   let c=[ `include  #go` ] 
22 321:   let x=Array(a.length/2).fill(0).map((x,i) => Math.log10(a[i*2]))
22 322:   let d=Array(a.length/2).fill(0).map((e,i)=>[x[i],a[i*2+1],b[i*2+1],c[i*2+1]])
22 323:   d=[['x','pascal','javascript','go'], ...d]
22 324:   var data = google.visualization.arrayToDataTable(d);
22 325:   var options = {
22 326:     title:'Speed Comparison',
22 327:     hAxis: {title: 'log10(Buffer size)',titleTextStyle:{color: '#222'}},
22 328:     vAxis: {minValue: 0}
22 329:   };
22 330:   var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
22 331:   chart.draw(data, options);
22 332:   }
22 333: </script>
22 334: ```
22 335: 
22 336: ```js : gnuplot
22 337: # '''js: gnuplot? //test using *gnuplot*, (js: gives some artificial syntax highlighting)
22 338: $go1 <<EOD
22 339:  `include  #go`
22 340: EOD
22 341: $pascal1 <<EOD
22 342:  `include  #p1`
22 343: EOD
22 344: $javascript1 <<EOD
22 345:  `include  #j1` 
22 346: EOD
22 347: set logscale x
22 348: plot "$javascript1" w lp title "javascript",\
22 349:        "$pascal1" w lp title "pascal",\
22 350:        "$go1" w lp title "go"
22 351: ```
22 352: 
22 353: ### Data for the plots
22 354: 
22 355: #p1
22 356: 1,  2.8481913984619769E+002,
22 357: 2,  3.2000000000000006E+002,
22 358: 4,  5.3930160442227304E+002,
22 359: 9,  5.5069448693630306E+002,
22 360: 18,  4.9220672682526657E+002,
22 361: 38,  4.4362464685143249E+002,
22 362: 78,  4.2469318639675049E+002,
22 363: 162,  3.8850784210273861E+002,
22 364: 336,  4.1373705532501759E+002,
22 365: 695,  4.0941356661070370E+002,
22 366: 1438,  4.0981270590381087E+002,
22 367: 2976,  4.0774328614234560E+002,
22 368: 6158,  4.1207063150259239E+002,
22 369: 12743,  4.1257614187723925E+002,
22 370: 26367,  4.1326873674591815E+002,
22 371: 54556,  4.0725164114438951E+002,
22 372: 112884,  4.0667517359097167E+002,
22 373: 233572,  4.0144779152324566E+002,
22 374: 483293,  3.9295922011303855E+002,
22 375: 1000000,  3.9015515260938304E+002,
22 376: #p1
22 377: 
22 378: #j1
22 379: 1, 25,
22 380: 2, 36.36363636363636,
22 381: 4, 800,
22 382: 9, 900,
22 383: 18, 1200,
22 384: 38, 1266.6666666666667,
22 385: 78, 1300,
22 386: 162, 270.00000000000006,
22 387: 336, 1344.0000000000002,
22 388: 695, 1390,
22 389: 1438, 1369.5238095238096,
22 390: 2976, 1384.186046511628,
22 391: 6158, 1256.734693877551,
22 392: 12743, 1554.0243902439024,
22 393: 26367, 1550.9999999999998,
22 394: 54556, 1515.4444444444443,
22 395: 112884, 1495.1523178807947,
22 396: 233572, 1150.6009852216748,
22 397: 483293, 668.9176470588236,
22 398: 1000000, 664.8936170212766,
22 399: #j1
22 400: 
22 401: #go
22 402: 1,  180.6195249706493,
22 403: 2.0691380811147897,  761.2722888575386,
22 404: 4.281332398719393,  804.3837292098438,
22 405: 8.858667904100825,  1112.4088534062691,
22 406: 18.32980710832436,  1379.9448248380909,
22 407: 37.926901907322495,  1374.2129029067175,
22 408: 78.47599703514611,  1604.760480862666,
22 409: 162.3776739188721,  1467.356532792988,
22 410: 335.981828628378,  1973.2297446900686,
22 411: 695.1927961775605,  1813.4675783945756,
22 412: 1438.449888287663,  1747.260753938808,
22 413: 2976.351441631319,  1971.883729329512,
22 414: 6158.48211066026,  1640.8616941970215,
22 415: 12742.749857031347,  1962.098385087474,
22 416: 26366.508987303558,  1925.588743440195,
22 417: 54555.947811685146,  1963.9029643128854,
22 418: 112883.78916846885,  1840.5875915896195,
22 419: 233572.14690901214,  945.4551695526003,
22 420: 483293.0238571752,  662.0673675355384,
22 421: 1e+06,  660.4684782172212,
22 422: #go
22 423: 
22 424: ## Simple cross-platform cross-script speed tests
22 425: 
22 426: Each test is a loop run 1e7, 1e8 or 1e9 times (depending on the script speed), with speed calculated in 1m iterations per sec.
22 427: 
22 428: These test all use straightforward calculations within a loop, rather than specific numerical packages.
22 429: 
22 430: ### Javascript tests: 'vm', 'eval' and 'node'
22 431: 
22 432: The following code block can be executed with the code block identifier set to `js` or `js:vm` for the vscode `vm` to execute, to 'js:eval' for vscode's built-in `eval` to execute, or to `js:node` for nodejs to execute. Note that to execute with `nodejs`, that package must have been previously installed on the system and should be executable with the command `node`.
22 433: 
22 434: ```js  //can be 'js' to use vm, 'js:eval' to use 'eval', or 'js:node' to use nodejs
22 435: // '''js  //can be 'js' to use vm, 'js:eval' to use 'eval', or 'js:node' to use nodejs
22 436: //timing and speed results for the three alternatives should be similar
22 437: const {performance}=require('perf_hooks'); //ignored by eval & vm
22 438: let iter=1e8;
22 439: let n=0.01;
22 440: let t1=performance.now();
22 441: for (let i=1;i<=iter;i++){ n*=i;n++;n=n/i; }
22 442: let t2=performance.now();
22 443: let tot=(t2-t1)/1000;
22 444: console.log("total time ",Math.round(tot*100)/100," sec")
22 445: console.log("speed ",Math.round(iter/tot/1e6*10)/10," million iterations per sec")
22 446: ```
22 447: >      Test output (vm, eval & node are fairly similar)
22 448: >      total time  0.47  sec
22 449: >      speed  212.3  million iterations per sec
22 450: 
22 451: ### Javascript in the browser
22 452: 
22 453: This will execute the same javascript code in the default browser:
22 454: 
22 455: ```html
22 456: <!-- '''html -->
22 457: <script>
22 458: function test(){
22 459: let iter=1e8;
22 460: let n=0.01;
22 461: let t1=performance.now();
22 462: for (let i=1;i<=iter;i++){ n*=i;n++;n=n/i; }
22 463: let t2=performance.now();
22 464: let tot=(t2-t1)/1000;
22 465: r1.innerText=""+Math.round(tot*100)/100+" sec";
22 466: r2.innerText=""+Math.round(iter/tot/1e6*10)/10+" million iterations per sec";
22 467: }
22 468: </script>
22 469: <h1 align="center"><br>Test results</h1>
22 470: <p align="center"><b>Total time:</b>
22 471: <div id="r1" align="center"><i>calculating ...</i></div>
22 472: <p align="center"><b>Speed:</b>
22 473: <div id="r2" align="center"></div>
22 474: <script>
22 475: r1=document.getElementById("r1");
22 476: r2=document.getElementById("r2");
22 477: //window.setTimeout(function() {test();},150);
22 478: test()
22 479: </script>
22 480: ```
22 481: >      Test output (in the browser, can click browser reload to repeat):
22 482: >      Total time: 0.47 sec
22 483: >      Speed: 210.7 million iterations per sec
22 484: 
22 485: A similar speed to `js`, `eval` and `node`.
22 486: 
22 487: ### Test using 'go' as a scripting language
22 488: 
22 489: If `go` is installed, it can be used as a scripting language
22 490: 
22 491: >      `go` should be executable in a terminal using > go
22 492: >      The required files go.sum and go.mod need to be present in the
22 493: >      globalStorage/temp folder. The path of this folder can be
22 494: >      seen by hovering over the following line (in the editor):
22 495: 
22 496: `%g` //hover here to see the path of *hover-exec*'s temp folder.
22 497: 
22 498: ```go //speed test 2
22 499: // '''go //speed test 2
22 500: package main
22 501: import ("fmt";"time")
22 502: func main() {
22 503:     var iter int=1e9
22 504:     var t1,t2 int64
22 505:     var n,t float64
22 506:     n=0.01
22 507:     t1=time.Now().UnixNano()
22 508:     for i:=1;i<=iter;i++ {
22 509:       n*=float64(i);
22 510:       n++;
22 511:       n=n/float64(i);
22 512:     }
22 513:     t2=time.Now().UnixNano()
22 514:     t=float64(t2-t1)/1e9  //sec
22 515:     fmt.Printf("total time %.3v sec\n",t)
22 516:     fmt.Printf("speed  %.5v million iterations per sec\n",float64(iter)/t/1e6)
22 517: }
22 518: ```
22 519: >      Test output:
22 520: >      total time 0.24 sec
22 521: >      speed  4170 million iterations per sec
22 522: >      (ie. about 20 times faster than javascript)
22 523: 
22 524: ### Test using 'python'
22 525: 
22 526: Again, the appropriate `python` needs to be executed when the `python` command is executed in a terminal. For this run, 'python 3.8.7` was used. Note that fewer iterations have been used because it takes rather longer than *javascript* or *go*.
22 527: 
22 528: ```python //speed test
22 529: # '''python //speed test
22 530: from time import time
22 531: m=1e7  # note: fewer iterations than for js or go
22 532: n=0.01
22 533: tt=time()
22 534: for ii in range(1,round(m+1)):
22 535:     n*=ii
22 536:     n+=1
22 537:     n=n/ii
22 538: tt1=time()-tt
22 539: print("total time ",round(tt1,2)," sec")
22 540: print("speed ",round(m/tt1/1e6,4)," million iterations per sec")
22 541: ```
22 542: >      Test output:
22 543: >      total time  1.68  sec
22 544: >      speed  5.958  million iterations per sec
22 545: 
22 546: ie. for this test javascript is about 30x faster than python
22 547: 
22 548: ### Test using 'lua'
22 549: 
22 550: Lua must be installed, and the config startup script should match the installation. If `lua54` is installed, the config start command should use `lua54` - check the `hover-exec` configuration and make sure the command used matches you installation. Note that the the first bit of the id `js:lua` is used to provide some simple-minded syntax highlighting (via the `js` highlighter) - the hover message makes it clear that `lua` is the actual command.
22 551: 
22 552: ```js:lua  //10 million random number calls
22 553: -- '''lua {cmd=lua53} //10 million random number calls`
22 554: local m=1e8;  -- note: fewer iterations than for js or go
22 555: local n=0.01;
22 556: local tt = os.clock();
22 557: for ii=1,m do
22 558:   n=n*ii;
22 559:   n=n+1;
22 560:   n=n/ii;
22 561: end
22 562: local tt1=os.clock()-tt;
22 563: print("total time ",math.floor(tt1*100)/100," sec")
22 564: print("speed ",math.floor(m/tt1/1e6*100)/100," million iterations per sec")
22 565: ```
22 566: >      Test output:
22 567: >      total time 	1.05	 sec
22 568: >      speed 	94.87	 million iterations per sec
22 569: 
22 570: So about 15x faster than python on this benchmark, and about half the speed of javascript.
22 571: 
22 572: ### Pascal test
22 573: 
22 574: This assumes freepascal is installed.
22 575: 
22 576: ```js:pascal //executes freepascal compile and run
22 577: // '''js:pascal //js used here for quick & dirty syntax highlighter
22 578: //      if there is a pascal syntax highlighter, just use '''pascal
22 579: program Hello;
22 580:   uses Math,SysUtils,DateUtils;
22 581:   var i,m:int64;
22 582:         a,t1:extended;
22 583: begin //30
22 584:   m:=100000000; //fewer iterations (1e8)
22 585:   t1:=now;
22 586:   a:=0.01;
22 587:   for i:=1 to m do
22 588:   begin
22 589:       a:=a*i;
22 590:       a:=a+1;
22 591:       a:=a/i;
22 592:   end;
22 593:   t1:=(now-t1)*3600*24;
22 594:   writeln('``output'); //removes compiler preface in result
22 595:   writeln('time= ',t1:6:2,' sec');
22 596:   writeln('speed= ',m/t1/1e6:6:2,' million iterations per sec')
22 597: end.
22 598: ```
22 599: >      Test output:
22 600: >      time=   1.03 sec
22 601: >      speed=  97.09 million iterations per sec
22 602: 
22 603: That's about half the speed of the javascript code
22 604: 
22 605: ### Octave test
22 606: 
22 607: ```python:octave
22 608: # '''python:octave
22 609: a=1.0;
22 610: t=time;
22 611: m=1000000; # 1e6
22 612: for i=1:m
22 613:   a=a*i;
22 614:   a=a+1;
22 615:   a=a/i;
22 616: endfor
22 617: disp(strcat('time= ',num2str(time-t),' sec'))
22 618: disp(strcat('speed= ',num2str(m/(time-t)/1e6),' million iterations per sec'))
22 619: ```
22 620: >      Test output:
22 621: >      time=1.7275 sec
22 622: >      speed=0.57593 million iterations per sec
22 623: 
22 624: That's one tenth of python's speed.
22 625: 
22 626: ### Test using scilab
22 627: 
22 628: ```js:scilab
22 629: // '''js:scilab
22 630: tic();
22 631: a=1.1;
22 632: m=1000000; //1e6
22 633: for x=1:1:m
22 634: a=a*x;
22 635: a=a+1;
22 636: a=a/x;
22 637: end
22 638: t=toc();
22 639: mprintf('Time: %.2f sec\n',t)
22 640: mprintf('Speed: %.2f  million iterations per sec\n',m/t/1e6)
22 641: ```
22 642: >      Test output:
22 643: >      Time: 1.15 sec
22 644: >      Speed: 0.87  million iterations per sec
22 645: 
22 646: About 50% faster than octave
22 647: 
22 648: ### Julia test
22 649: 
22 650: ```julia
22 651: # '''julia
22 652: m=10000000; # 1e7
22 653: a=1.1;
22 654: t=time();
22 655: for i in 1:m;
22 656:   global a=a*i; a=a+1; a=a/i;
22 657: end;
22 658: t=time()-t;
22 659: # println(a)
22 660: println("time= ",round(t,digits=2)," sec")
22 661: println("speed= ",round(m/t/1e6,digits=3)," million iterations per sec")
22 662: ```
22 663: >      Test output:
22 664: >      time= 1.69 sec
22 665: >      speed= 5.917 million iterations per sec
22 666: 
22 667: About the same speed as python.
22 668: 
22 669: ## Configuration
22 670: 
22 671: ### View and alter as a set ('scripts, 'swappers,'repls')
22 672: This code block shows all settings for `scripts','swappers' or 'repls'
22 673: The are shown in another executable code block ready to update after changes
22 674: 
22 675: ```js noInline  //noinline is necessary to ensure =>> in strings is not misinterpreted
22 676: // '''js noInline              //view and update settings
22 677: let settings='scripts';    //can be 'scripts', 'swappers', or 'repls'
22 678: config = vscode.workspace.getConfiguration("hover-exec");
22 679: let k=config.get(settings)
22 680: console.log('output:eval noinline //exec here to make any changes permanent')
22 681: console.log("//nb. the hover shows that default for '''output:eval is to exec 'eval', not to delete the 'output' block")
22 682: console.log("//      use '[delete block]' in the hover (top right) to delete")
22 683: console.log('let settings="'+settings+'";');
22 684: console.log('let s=',k)
22 685: console.log("if(config.update(settings,s,1)){write(settings+' updated!');}")
22 686: ```
22 687: 
22 688: ### View and alter a specific setting
22 689: This template code block can spefy a new or existing cmdid, and its start or swapper command
22 690: 
22 691: ```js noInline      //noinline is necessary to ensure =>> in strings is not misinterpreted
22 692: // '''js noInline  //template to change, add or undefine (remove) a specific config setting
22 693: let settings='scripts';  //can be 'scripts', 'swappers', or 'repls'
22 694: config = vscode.workspace.getConfiguration("hover-exec");
22 695: let k=config.get(settings)
22 696: let s={"newlang":"python \"%f.py\""};   //specify cmdid & start command, or
22 697: //s={"newlang":undefined};                   //uncomment this to undefine cmdid
22 698: let merge=Object.assign({},scripts,s);
22 699: if(await config.update('scripts',merge,1)){}
22 700: console.log('new config:',config.get('scripts.python'))
22 701: ```
22 702: 
22 703: 
22 704: 
23 1: # Hover-exec readme
23 2: 
23 3: ![Hover-exec in action](https://raw.githubusercontent.com/rmzetti/hover-exec/main/media/hover-exec.gif)
23 4: 
23 5: This is the *readme* for the VSCode extension *hover-exec*.
23 6: Once the extension is installed, the readme, the readmore and the test files are best viewed in the editor.
23 7: This is because *hover-exec* is all about facilitating the execution of markdown codeblocks in the editor.
23 8: These files have many example codeblocks that can be executed to try it out..
23 9: - The above *gif* was produced from the codeblocks in this *readme*
23 10: 
23 11: > To open this file in the editor, use *ctrl+shift+P* followed by *open the hover-exec readme*.
23 12: > Or use the shortcut *ctrl+alt+/*  or *ctrl+opt+/*.
23 13: 
23 14: From inside the editor the following 'one-liners' are available - hover over the command, then click the file name to open the file in the editor.
23 15: 
23 16: `edit %h/README` //opens the readme in the vscode editor \
23 17: `edit %h/test/readmore` //the readme but with more detail \
23 18: `edit %h/test/misc_tests` //benchmark and plotting comparative tests
23 19: 
23 20: Notes:
23 21: 1. If you're viewing in preview, the one-liner commands above are surrounded by a single backtick.
23 22: 2. In the above, %h is a hover-exec command line variable giving the extension path, see `edit %h/test/readmore#what settings`.
23 23: 3. Using *hover-exec* in the vscode editor on these files allows live testing, and comparison with the 'test outputs' provided.
23 24: 4. Any changes made to these files will be reverted if *hover-exec* is updated, so save the file locally if you want to keep changes.
23 25: 
23 26: ## Contents
23 27: - [Hover-exec readme](#hover-exec-readme)
23 28:   - [Contents](#contents)
23 29:   - [Features](#features)
23 30:   - [Basic hover-exec](#basic-hover-exec)
23 31:     - [Hover](#hover)
23 32:     - [Exec](#exec)
23 33:     - [Output](#output)
23 34:     - [Code block labels and commands](#code-block-labels-and-commands)
23 35:   - [Javascript scripts](#javascript-scripts)
23 36:     - [Examples using vm and eval](#examples-using-vm-and-eval)
23 37:     - [Using nodejs](#using-nodejs)
23 38:     - [Html and javascript](#html-and-javascript)
23 39:   - [Other scripts](#other-scripts)
23 40:     - [Scripts with command execution strings included](#scripts-with-command-execution-strings-included)
23 41:     - [Python](#python)
23 42:     - [Julia](#julia)
23 43:     - [Octave](#octave)
23 44:     - [Scilab](#scilab)
23 45:     - [Lua](#lua)
23 46:     - [Gnuplot](#gnuplot)
23 47:     - [Bash & zsh](#bash--zsh)
23 48:     - [Powershell](#powershell)
23 49:     - [Cmd](#cmd)
23 50:   - [One-liners and quickmath](#one-liners-and-quickmath)
23 51:     - [Default shell simple command execution:](#default-shell-simple-command-execution)
23 52:     - [exec notepad with file in hover-exec extension folder:](#exec-notepad-with-file-in-hover-exec-extension-folder)
23 53:     - [exec notepad with temp file (%f):](#exec-notepad-with-temp-file-f)
23 54:     - [open another instance of vscode:](#open-another-instance-of-vscode)
23 55:     - [explore files, view folders:](#explore-files-view-folders)
23 56:     - [other examples:](#other-examples)
23 57:   - [Quickmath examples](#quickmath-examples)
23 58:   - [Configuration settings](#configuration-settings)
23 59:   - [Release Notes and Known Issues](#release-notes-and-known-issues)
23 60: 
23 61: ---
23 62: ## Features
23 63: 
23 64: *Hover-exec*
23 65: - facilitates execution from within the editor of fenced markdown code blocks in a variety of script languages that are installed on your system
23 66: - enables the inclusion of other script languages with or without configuration - see [`edit %h/test/readmore#add new`](test/readmore.md#add-new-script-language)
23 67: - offers the opportunity, when working with markdown docs, to include 'live' calculations, results, code samples, demos, comparisons and useful links, using a range of possible scripts.
23 68: - can execute a range of 'one-liners' and provides a quick calculation facility - see [One-liners and quickmath](#one-liners-and-quickmath).
23 69: 
23 70: The *hover-exec* extension is activated when a markdown file is opened in the editor.
23 71: 
23 72: ---
23 73: ## Basic hover-exec 
23 74: 
23 75: Hovering over a labelled fenced code block start or end line which starts with a triple backtick, or a line which starts with a single backtick and includes an end backtick, will trigger a hover message with an  *exec* command in the bottom line. Clicking the command link on the bottom line of the hover message will execute the code in the code block, and produce output.
23 76: 
23 77: ### Hover
23 78: Opening a markdown file (eg. this one) in the vscode editor will activate the *hover-exec* extension.
23 79: After opening in the editor, hover over the start line ```js ...`, or over the end line, of this (empty) code block:
23 80: 
23 81: ```js //this is a code block with id 'js'
23 82: // '''js   //this is an empty code block with id 'js'
23 83: ```
23 84: 
23 85: The following hover message will appear:
23 86: >      hover-exec: //this is a code block with id 'js'
23 87: >      [config] [command line vars %f etc] [delete block]
23 88: >      [clear output] [open last script] [open last result]
23 89: >      exec: js =>>
23 90: 
23 91: The message shows 'hover-exec:' followed by any comments that were in the command line.
23 92: The bottom line shows the command that will be executed.
23 93: Code blocks which are indented (ie. unfenced), fenced with '~', or not labelled, will not result in a hover message and are ignored by *hover-exec*.
23 94: For other information that con be obtained from the hover `edit %h/test/readmore#other info`
23 95: 
23 96: ### Exec
23 97: Putting some javascript code into the code block, and clicking the *exec* (bottom line of the hover) gives the output below:
23 98: 
23 99: ```js //this is a code block with id 'js'
23 100: // '''js   //this is a code block with id 'js'
23 101: //        when executed the output will be visible in a new code block titled 'output'.
23 102: let world=3;
23 103: console.log('hello world '+world);
23 104: alert('goodbye world');
23 105: ```
23 106: 
23 107: If the cursor is inside a fenced code block, the code can be quickly executed using the shortcut `Alt+/` or `Opt+/`.
23 108: 
23 109: ### Output
23 110: Hovering  over the first or last line of the *output* block will show three options:
23 111: 
23 112: >      `output block to text`
23 113: >      `all output to text`
23 114: >      `delete output block`.
23 115: 
23 116: The first option of the output hover simply removes the code block triple backtick lines, leaving the contents as markdown text.
23 117: The second provides the output from the temporary output file generated, including any in-line results. Note that this should be done before another *exec*, otherwise the newer output will be obtained (which may be from a completely different block).
23 118: The bottom line option deletes the output block.
23 119: 
23 120: If the cursor is inside an output block, the usual shortcut `Alt+/` or `Opt+/`, will execute the last option and delete the output block.
23 121: 
23 122: The examples below also use in-line output, `edit %h/test/readmore#in-line` for more information.
23 123: 
23 124: ### Code block labels and commands
23 125: There are three elements to a code block label that *hover-exec* utilises:
23 126: - *id* to indicate the script language being employed, used for syntax highlighting by *vscode*
23 127: - *cmdid* to indicate the command to use to execute the script (omitted if the same as *id*)
23 128: - *repl* or *restart* to indicate a REPL is to be used or restarted (see the readmore)
23 129: 
23 130: Example code block labels - these are 'fake' (use quotes instead of backticks) to allow visibility in previews:
23 131: 
23 132: Example code block labels - these use quotes instead of backticks to allow visibility in previews:
23 133: 
23 134:     '''id : cmdid : repl  -- the general format - spaces can be omitted around the :
23 135:     '''python    --a python code block, here id & cmdid are both python
23 136:     '''js : eval   --a javascript code block which uses eval for execution
23 137:     '''octave     --uses octave as both id & cmdid
23 138:     '''python:octave  --python is id for syntax highlight, octave is cmdid for execution
23 139:     '''output     --output blocks are produced by executing scripts
23 140: 
23 141: There is a comment in the readmore about the code block label when also using *markdown preview enhanced*.
23 142: 
23 143: ---
23 144: ## Javascript scripts
23 145: 
23 146: Javascript code blocks can be executed using the `vm` module, also by using *vscode*'s built in `eval` - and also through [nodejs](#nodejs) or a *browser*.
23 147: 
23 148: ### Examples using vm and eval
23 149: 
23 150: The code block label `js`  by itself defaults to executing javascript via the built-in `vm` module. Using `js : eval` will instead execute the code block using *vscode*'s built in *eval*.
23 151: 
23 152: ```js     //click the *exec:* line at the bottom of the *hover* to execute the block
23 153: //'''js  //this comment is to show the command line in markdown previews
23 154: //       //the default for the `js` command is to execute using the `vm` module
23 155: console.log("Note the in-line random number result")
23 156: 'test: '+Math.random()  =>> 
23 157: ```
23 158: >      Test output:
23 159: >      Note the in-line random number result
23 160: 
23 161: Intermediate results can be viewed in line, as above, by appending `=>>` instead of using `console.log()` . When this is done the line effectively becomes the argument of a console.log (or the equivalent in other scripts), and should not be terminated with ;
23 162: 
23 163: Other results are produced in an `output` block. Hovering over the `output` id of an output code block provides options *output block to text* or *delete output block*. If the block has recently been executed, a third option *all output to text* will provide the full output as in the *temp...* output file generated.  Using the shortcut `Alt+/` or `Opt+/` with the cursor in the `output` block deletes the block.
23 164: 
23 165: ---
23 166: A couple more examples using `js`, showing use of *vscode* api functions and some extra functions published by *hover-exec* (eg. `alert`).
23 167: 
23 168: ```js  :eval
23 169: //'''js :eval  //appending :eval uses *vscode*'s eval instead of the vm
23 170: let abc="hello, world 3"
23 171: alert(abc) //alert produces vscode alerts - not available in nodejs scripts
23 172: let a='goodbye world'
23 173: vscode.window.showInformationMessage(a) //not available in node scripts
23 174: let b=3;
23 175: 2*b*Math.random() // =>> 
23 176: eval('let b=3; 2*b*Math.random()') // =>> 
23 177: console.log(a,Math.random())
23 178: 'hello '+(2-1+Math.random()) // =>> 
23 179: process.cwd() // =>> 
23 180: console.log(abc)
23 181: ```
23 182: >      Test output: see also alert box bottom right
23 183: >      goodbye world 0.46809536348325254
23 184: >      hello, world 3
23 185: 
23 186: 
23 187: ---
23 188: A regex tester using the *javascript* vm (try clicking *clear output* before *exec*):
23 189: 
23 190: ```js
23 191: //'''js  //javascript regex tester
23 192: 'abcdefg'.replace(/^.*(bc)/,'$1--') =>> 
23 193: ```
23 194: 
23 195: A regex tester using *vscode*'s eval:
23 196: 
23 197: ```js : eval
23 198: //'''js : eval // javascript regex tester using eval
23 199: 'abcdefg'.replace(/^.*(bcde)/,'$1--') =>> 
23 200: ```
23 201: 
23 202: ---
23 203: All the code blocks above can be executed using either `eval` or `vm`.
23 204: The difference is that `vm` scripts are executed within a more restricted *context* - `edit %h/test/readmore#using a custom vm context`
23 205: 
23 206: In the command line (eg. above), using `js` for the code block id produces javascript syntax highlighting (it's a quick and dirty approach to provide basic syntax highlighting for a range of scripts), then adding `:eval` sets the actual exec command to `eval`.
23 207: 
23 208: Note that `vm` and `eval` both allow the internal *vscode* API to be used. Installation of `nodejs` is not required for `vm` or `eval` scripts to execute.
23 209: 
23 210: See the readmore, `edit %h/test/readmore#regular` for more information and examples.
23 211: 
23 212: ---
23 213: ### Using nodejs
23 214: 
23 215: The `js:node` command executes a javascript code block in `nodejs` (assuming, of course, `nodejs` has been installed). 
23 216: 
23 217: ```js  {cmd=node} : node
23 218: //'''js {cmd=node} : node  // :node changes the js command to use nodejs
23 219: //      {cmd=node} is to allow execution in markdown preview enhanced (mpe)
23 220: //                        mpe requires {..} to be placed immediately after the js command
23 221: console.log('  using node:\n  '+Math.random())
23 222: console.log('  Note: hover-exec on the output line, or alt+/ (opt+/) with\n',
23 223:     ' the cursor in the output block will delete the output block')
23 224: ```
23 225: >      Test output:
23 226: >      using node:
23 227: >      0.43884249391182095
23 228: >      Note: hover-exec on the output line, or alt+/ (opt+/) with
23 229: >      the cursor in the output block will delete the output block
23 230: 
23 231: ---
23 232: 
23 233: ### Html and javascript
23 234: 
23 235: A simple html 'script' which will open in the default browser:
23 236: 
23 237: ```html
23 238: <!-- '''html  //Hello world -->
23 239: <h1 align='center'>Hello world</h1>
23 240: <p>Html will be displayed in the browser
23 241: <p id='test'>Text here</p>
23 242: <script>
23 243: document.getElementById("test").innerHTML="<em>Text via javascript</em>"
23 244: </script>
23 245: ```
23 246: 
23 247: A more complex html script, including a more substantial javascript component:
23 248: 
23 249: ```html
23 250: <!-- '''html // tunnel *what am I going to do now* -->
23 251: <head>modified slightly from [tunnel](https://js1k.com/2010-first/demo/763)</head>
23 252: <body style="margin:0;width:100%;background:#000815;overflow:hidden"> 
23 253: <canvas id="c"></canvas> 
23 254: <script> 
23 255: lt='lineTo',b=Math,i=b.sin,j=b.cos,k=document,bs=k.body.style,n=k.getElementById('c');
23 256: o=n.getContext('2d');p=n.width=innerWidth*1.2,q=n.height=innerHeight*1.2;
23 257: r=-p/2,s=-q/2;o.translate(-r,-s);u=q/4;len=92;
23 258: v
23 259: w=-20,x=2*b.PI/30,y=.1875;
23 260: function C(b,a,c){return'rgb('+~~b+','+~~a+','+~~c+')'}
23 261: setInterval('o.fillStyle=0;o.fillRect(r,s,p,q);g=+new Date;y-=.0625;if(y<0){y+=.1875;w++}for(d=0,h=31;h--;){l=h*.1875+y,z=200-200/(3+y)*l,m=z/2;o.strokeStyle=C(m,m,m);for(A=i(l+g/1700)*70,B=j(l+g/1100)*70,c=[],a=0;a<120;a+=4){t=a/4,f=t*x+b.PI+i(g/3700),e=u/l;c[a]=A+j(f)*e;c[a+1]=B+i(f)*e;c[a+2]=A+j(f+x)*e;c[a+3]=B+i(f+x)*e;f=(w+h)%len;e=z/4;o.fillStyle=C(+(v[f]?v[f][t-3]:0)?b.max(150+~~(105*i(g/100)),e):m/4,t%16==0&&(h+w)%12?255:e,e);if(d){o.beginPath();o.moveTo(c[a],c[a+1]);o[lt] (c[a+2],c[a+3]);o[lt] (d[a+2],d[a+3]);o[lt] (d[a],d[a+1]);o.fill();o.stroke()}}d=c}',50);
23 262: </script></body>
23 263: ```
23 264: 
23 265: ---
23 266: ## Other scripts
23 267: 
23 268: ### Scripts with command execution strings included
23 269: 
23 270: Command lines to conveniently start a number of other scripts are included (go `edit %h/test/readmore#configuration settings` for the actual command lines used). Some examples:
23 271: 
23 272: - [python](#python)
23 273: - [julia](#julia)
23 274: - [octave](#octave)
23 275: - [scilab](#scilab)
23 276: - [lua](#lua)
23 277: - [gnuplot](#gnuplot)
23 278: - [powershell](#powershell)
23 279: - [bash & zsh](#bash-&-zsh)
23 280: - [cmd](#cmd)
23 281: 
23 282: Notes:
23 283: - The script language you wish to use (eg `julia`, `nodejs` ..) needs to have been installed in your system
23 284: - Some of the commands to run the scripts ***may need customising*** to suit your particular installation - go `edit %h/test/readmore#config`.
23 285: - Other script languages may be added. In basic usage the script command can be entered via '[config]' in the hover. To achieve in-line capability, use the *hover-exec* extension settings, or as an alternative, this can also done with `eval` - `edit %h/test/readmore#config` for examples.
23 286: - For more script language examples, `edit %h/test/readmore#other scripts`
23 287: 
23 288: ---
23 289: ### Python
23 290: 
23 291: Depending on your system setup you may need to use the *python3* command. But in either case, the command block id should be *python* to ensure vscode provides syntax highlighting.
23 292: 
23 293: ```python
23 294: # '''python :python3 #<- append this to use 'python3' as start command
23 295: from random import random
23 296: 45-2+random()       #  =>> 
23 297: 'hello, world 3!'       #  =>> 
23 298: print('python ok')
23 299: ```
23 300: >      Test output (also see inline output):
23 301: >      python ok
23 302: 
23 303: Note that the inline indicator `=>>` has been prefixed by a python comment character `#` (only spaces allowed after) so that, for example, *markdown preview enhanced* will execute the code. *hover-exec* will still update the in-line output, but *mpe*, of course, will not. If *mpe* is installed, try it by including '{cmd}' after the *'''python* command id, separated using spaces.
23 304: 
23 305: ---
23 306: ### Julia
23 307: 
23 308: If the *julia* extension is included, *vscode* will provide syntax highlighting. Note that when doing this test, you will need to ensure *julia* has the appropriate packages available (see the *using* line in the example script below). The following one-liner could be used to do this for the script below (if you're reading this in the preview, the one-liner is surrounded with single backticks and starts in col 1):
23 309: 
23 310: `julia using Pkg;Pkg.add("LinearAlgebra");`
23 311: 
23 312: **Note:** these may often take some time, sometimes about 5 minutes for me... there will be an *executing julia* message in the *vscode* status bar, and there will be *output* when they are complete.
23 313: 
23 314: ```julia
23 315: # '''julia
23 316: using LinearAlgebra # this package is not needed if dot(a',a) is commented out
23 317: a=rand(Float64,3);
23 318: a   # =>> 
23 319: a'*a # =>> 
23 320: dot(a',a) # =>> 
23 321: b=a;b[2]=42;  # demonstrates that arrays are shallow copied here
23 322: println(string("a=",a,"\n","b=",b))  # double quotes only for julia strings
23 323: ```
23 324: >      Test output (also see inline output):
23 325: >      a=[0.8999280817338797, 42.0, 0.8299019559590521]
23 326: >      b=[0.8999280817338797, 42.0, 0.8299019559590521]
23 327: 
23 328: Julia can also be executed in *mpe* by appending '{cmd}' after the command id (separated with a space).
23 329: 
23 330: ---
23 331: 
23 332: ### Octave
23 333: 
23 334: Use `octave` or `python : octave` to run octave. Using 'python' as the command id provides syntax highlighting, adding :octave uses *octave* for execution.
23 335: 
23 336: ```python :octave
23 337:  # '''python:octave {cmd=octave} -- {cmd..} is for mpe
23 338:  # using '''python:octave instead of just '''octave gives syntax highlighter
23 339:  # nb. need mat2str or num2str for numeric output
23 340: num2str(7.1+rand(1))  =>> 
23 341: 'hello world in-line'  =>> 
23 342: pwd()  =>> 
23 343: disp('hello world in output section!')
23 344: disp(rand(1))
23 345: ```
23 346: >      Test output (also see inline output):
23 347: >      hello world in output section!
23 348: >      0.1295
23 349: 
23 350: ---
23 351: ### Scilab
23 352: 
23 353: Scilab generally won't have syntax highlighting - identifying the code block as *js* will provide some quick and dirty highlighting (not infallible, but generally helpful..)
23 354: 
23 355: ```js :scilab 
23 356: //'''js :scilab //using js :scilab provides quick & dirty (js) syntax highlight
23 357:   //nb. scilab needs to use 'string()' for inline numeric output (uses mprintf)
23 358: rand("seed",getdate('s')); //set new random sequence
23 359: mprintf('%s\n','test '+string(rand())+' '+pwd());
23 360: string(rand())+' '+pwd() =>> 
23 361: string(rand()) =>> 
23 362: //disp('disp puts quotes around strings',rand())
23 363: ```
23 364: >      Test output (also see inline output):
23 365: >      test 0.3161717 c:\Users\rmzetti\GitHub\hover-exec
23 366: 
23 367: ---
23 368: ### Lua
23 369: 
23 370: Lua has a syntax highlighter available for *vscode*. Many installations however require running, say, *lua51*, or *lua54*, rather than updating and setting *lua* as the run-time (unlike, say, *julia*). So use 'lua : lua54' as the command id, etc., or check/adjust the *hover-exec* script config.
23 371: 
23 372: ```lua  -- say hello & goodbye
23 373: --'''lua :lua54 -- 'lua' id specifies syntax highlight and default start command
23 374: --                  adding ':lua54' means use 'lua54' as start command
23 375: 'hello ' .. 44-2+math.random() -- =>> 
23 376: "& goodbye " .. math.pi+math.random() =>> 
23 377: print("lua ok") -- this outputs in the output code block below
23 378: ```
23 379: >      Test output (also see inline output):
23 380: >      lua ok
23 381: 
23 382: ---
23 383: ### Gnuplot
23 384: 
23 385: *Gnuplot* is a very useful stand-alone plotting facility. Assuming *gnuplot* has been installed,  it can be executed within *hover-exec*. In addition, other scripts can output *gnuplot* commands (along with data) in their output block and the data can be immediatedly plotted in a chained fashion (`edit %h/test/readmore#chaining` for examples).
23 386: 
23 387: ```gnuplot {cmd} # cmd is for markdown preview enhanced
23 388: # '''gnuplot //here gnuplot is being used stand-alone
23 389: #   tagging the data allows it to be used in another script (see next)
23 390: $charge << EOD
23 391: #tag1
23 392: "2-07-2021 22:32", 44,
23 393: "3-07-2021 13:34", 42,
23 394: "4-07-2021 14:22", 39,
23 395: "5-07-2021 15:10", 32,
23 396: "5-07-2021 23:57", 21,
23 397: "6-07-2021 18:10", 100,
23 398: "7-07-2021 17:02", 95,
23 399: "7-07-2021 22:46", 93,
23 400: "8-07-2021 16:38", 91,
23 401: "9-07-2021 16:08", 87,
23 402: "16-07-2021 23:30", 66,
23 403: #tag1
23 404: EOD
23 405: set datafile separator comma
23 406: timefmt = "%d-%m-%Y %H:%M"
23 407: set format x "%d-%m" time
23 408: set mouse mouseformat 3
23 409: plot $charge u (timecolumn(1,timefmt)):2 w lp pt 7 ps 2 ti "charge"
23 410: ```
23 411: ![[2021-08-31-20-28-22.png]] (this 'wiki' type link is enabled in the editor using *markdown memo*)
23 412: 
23 413: The above is a *png* file created (using the *paste image* extension) from a copy of the plot window.
23 414: 
23 415: If you don't have 'gnuplot' installed, here is the same plot in 'plotly', shown in the browser.
23 416: The data between the #tag1 lines in the above script is used by utilising 'include #tag1'
23 417: 
23 418: ```html //plotly
23 419: <!-- '''html //test using plotly -->
23 420:  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
23 421: <div id="plot" style="width:80%;height:500px"></div>
23 422: <script>
23 423: let lm='lines+markers'
23 424: let a=[`include  #tag1`] //hover here to see the data from the previous script
23 425: let x1=Array(a.length/2).fill(0).map((x,i) => a[i*2])
23 426: let y1=Array(a.length/2).fill(0).map((x,i) => a[i*2+1])
23 427: plot1 = document.getElementById('plot');
23 428: Plotly.plot( plot1, [{ x: x1, y: y1, mode: lm, name:'pascal'}]);
23 429: </script>
23 430: <a href="https://plotly.com/javascript/">plotly.js documentation</a>
23 431: ```
23 432: 
23 433: ---
23 434: ### Bash & zsh
23 435: 
23 436: *Bash* and *zsh* scripts can be run for appropriate systems:
23 437: 
23 438: ```zsh    # (macos) show current directory
23 439: # '''zsh # (macos) show current directory
23 440: pwd
23 441: ```  
23 442: >      Test output:
23 443: >      /home/rmzetti/hover-exec
23 444: 
23 445: 
23 446: ```bash # (macos, linux, wsl) show current directory
23 447: #'''bash # (macos, linux) show current directory
23 448: pwd
23 449: ```
23 450: >      Test output:
23 451: >      /home/rmzetti/hover-exec
23 452: 
23 453: ---
23 454: ### Powershell
23 455: 
23 456: Powershell scripts can be run, usually in *windows*
23 457: 
23 458: ```pwsh #  random number, show current directory
23 459: # '''pwsh # random number, show current directory
23 460: # $PSStyle.OutputRendering = 'PlainText'   # stops color codes appearing in output
23 461: Get-Random -Min 0.0 -Max 1.0 # =>> 
23 462: pwd
23 463: ```
23 464: >      Test output (also see inline output):
23 465: >      Path
23 466: >      ----
23 467: >      C:\Users\rmzetti\GitHub\hover-exec
23 468: 
23 469: ---
23 470: ### Cmd
23 471: 
23 472: Cmd executes cmd.exe in Windows and runs a batch file with contents from the code block.
23 473: 
23 474: ```cmd
23 475: @pwd
23 476: @echo "hello world 3"
23 477: ```
23 478: 
23 479: >      Test output:
23 480: >      c:\Users\..\GitHub\hover-exec
23 481: >      "hello world 3"
23 482: 
23 483: Because cmd.exe is the default windows child-process, if the default is being used, one-liners can directly exec cmd commands:
23 484: 
23 485: `pwd & @echo "done"` //direct execution of cmd commands in one-liners
23 486: >      Test output:
23 487: >      c:\Users\...\GitHub\hover-exec
23 488: >      "done"
23 489: 
23 490: ---
23 491: ## One-liners and quickmath
23 492: 
23 493:  *One-liners* starting with a single backtick *in column 1* and ending with a single backtick can also be executed with hover-click, or `alt-/` or `opt-/`.
23 494:  The following command variables can be used (the derived path will be seen in the hover):
23 495:  %c current workspace folder path, %d current file path, %e current file path+name,
23 496:  %f temp file path+name, %g temp file path, %n temp file name
23 497:  %h the *hover-exec* install directory.
23 498: 
23 499: Comments can be added after the closing quote.
23 500: `edit %h/test/readmore#what settings` for more about %c etc.
23 501: 
23 502: Another useful facility is *quickmath*. A math expression of the form `5-sqrt(2)=` (does not need to start in column 1) will be evaluated on hover (using *mathjs* `math.evaluate(..)`) and the result will be shown immediately  in the hover message. Clicking the hover result will copy it to the clipboard. Note that the expression is surrounded by single backticks, and there needs to be '=' before the last backtick (essentially to stop popups for other backtick quoted strings).
23 503: 
23 504: ### Default shell simple command execution:
23 505: (result depends on the default shell for vscode on your system)
23 506: 
23 507: `pwd`  zsh, bash, pwsh, cmd \
23 508: `ls`  zsh, bash, pwsh \
23 509: `dir` cmd
23 510: 
23 511: ### exec notepad with file in hover-exec extension folder:
23 512: 
23 513: `notepad "%h/test/readmore.md"`  --windows \
23 514: `open -a textedit "%h/README.md"`  --mac \
23 515: `gedit "%h/test/readmore.md"`  --linux/wsl \
23 516: `xedit "%h/README.md"`  --linux/wsl
23 517: 
23 518: ### exec notepad with temp file (%f):
23 519: 
23 520: `open -a textedit "%f.js"` --mac \
23 521: `notepad "%f.js"`  --windows \
23 522: `xedit "%f.js"`  --linux/wsl
23 523: 
23 524: ### open another instance of vscode:
23 525: 
23 526: `code -n %e`  -- %e is current file -- mac, windows, linux, wsl 
23 527: 
23 528: ### explore files, view folders:
23 529: 
23 530: `open -a finder ~`  mac 'home' \
23 531: `open -a finder "%c"`  mac to view current workspace folder \
23 532: `explorer ,`  windows view 'ThisPC' \
23 533: `explorer /select, "%E"` windows explorer - view current file's folder & select the file, needs %E not %e \
23 534: `nemo "%e"`  Linux mint view current folder & select file
23 535: 
23 536: ### other examples:
23 537: 
23 538: `devmgmt.msc` for windows show devices \
23 539: `system_profiler SPHardwareDataType` for mac show hardware info \
23 540: `html <script>location.href= 'https://whatamigoingtodonow.net/'</script>`  windows default browser with href \
23 541: `html <h1>Hello world!</h1>` windows default browser with some html \
23 542: `safari <script>location.href= 'https://whatamigoingtodonow.net/'</script>`  mac safari with href \
23 543: `safari <h1>Hello world!</h1>` mac safari with some html \
23 544: `firefox <script>location.href= 'https://whatamigoingtodonow.net/'</script>`  linux firefox with href \
23 545: `firefox <h1>Hello world!</h1>` linux firefox with some html \
23 546: `chrome <script>location.href= 'https://whatamigoingtodonow.net/'</script>`  wsl chrome with href 
23 547: 
23 548: There are many more one-liner examples in the readmore: `edit %h/test/readmore#one-liners`.
23 549: 
23 550: ## Quickmath examples
23 551: 
23 552: And finally, some *quickmath* expressions. As before these are surrounded with backticks. They do not have to start in col 1, but must have `=` just before the last backtick.
23 553: When viewing in preview, the backticks are not visible.
23 554: 
23 555: So `254cm in inches=` will show 100 inches in the hover message, using [*mathjs 'math.evaluate'*](https://mathjs.org/docs/reference/functions/evaluate.html).
23 556: More examples:  `[1,2,3,4]*5=`,  `cos(45deg)=`,  `sin(0.81)^2+cos(0.81)^2=`,  `cos(pi/2)=`,  `sin([10,45,90] deg)=`,  `range(0,4,0.5)=`,  `(2+2i)*(1+2i)=` , `3:6=`, `1:0.1:5=`, `7*7-7=` .
23 557: 
23 558: NB. You can copy the answer in the hover to the clipboard with a click.
23 559: 
23 560: ---
23 561: ## Configuration settings
23 562: 
23 563: For configuration settings, go `edit %h/test/readmore#config`.
23 564: 
23 565: ---
23 566: 
23 567: ## Release Notes and Known Issues
23 568: 
23 569: This is a beta version.
23 570: 
23 571: Note that in all the demos above, except *js:vm* and *js:eval* which allow definition of *global* variables and functions, the script starts from scratch when the code block is executed. In other words, assigned variables do not carry over into the next script execution. This kind of approach is best suited for small scripts to demonstrate or highlight language features, provide quick reference, or show comparisons between scripting languages.
23 572: 
23 573: Scripts can also be run using their REPL version, if this is available - eg. for node, lua, octave, scilab, r, julia - `edit %h/test/readmore#using scripts` for examples.
23 574: In REPLs, successive script execution will recognise previously defined variables and functions.
23 575: 
23 576: There is also an *include* capability, `edit %h/test/readmore#including` for details and examples.
23 577: 
23 578: ---
23 579: 
23 580: Initial beta release was 0.6.1
23 581: Published using: vsce package/publish
23 582: 
23 583: 
24 1: # Hover-exec readmore
24 2: 
24 3: ![*Hover-exec* in action](https://raw.githubusercontent.com/rmzetti/hover-exec/main/media/hover-exec.gif)
24 4: 
24 5: This is the readmore for VS Code extension *hover-exec*.
24 6: 
24 7: Once the extension is installed, the readme, the readmore and the test files are best viewed in the editor.
24 8: Hover to see the path, then exec by clicking the path to open the file as a new tab in the editor.
24 9: 
24 10: `edit %h/README` //opens the readme in the vscode editor \
24 11: `edit %h/test/readmore` //the readme but with more detail \
24 12: `edit %h/test/misc_tests` //benchmark and plotting comparative tests
24 13: 
24 14: Notes:
24 15: 1. If you're viewing in preview, the one-liner commands above are surrounded by a single backtick.
24 16: 2. In the above, %h is a hover-exec command line variable giving the extension path, see `edit %e#what settings`
24 17: 3. Using *hover-exec* in the vscode editor on these files allows live testing, and comparison with the 'test outputs' provided.
24 18: 4. Any changes made to these files will be reverted if *hover-exec* is updated, so save the file locally if you want to keep changes.
24 19: 
24 20: ## Contents
24 21: - [Hover-exec readmore](#hover-exec-readmore)
24 22:   - [Contents](#contents)
24 23:   - [Features](#features)
24 24:     - [Compatibility with Markdown Preview Enhanced (*mpe*)](#compatibility-with-markdown-preview-enhanced-mpe)
24 25:   - [Basic hover-exec](#basic-hover-exec)
24 26:     - [Hover](#hover)
24 27:       - [Other information from the hover](#other-information-from-the-hover)
24 28:     - [Exec](#exec)
24 29:     - [Output](#output)
24 30:     - [In-line output](#in-line-output)
24 31:     - [Code block labels and commands](#code-block-labels-and-commands)
24 32:   - [Javascript scripts](#javascript-scripts)
24 33:     - [Examples using vm and eval](#examples-using-vm-and-eval)
24 34:     - [Available functions in *vm* and *eval*](#available-functions-in-vm-and-eval)
24 35:     - [Using a custom vm context](#using-a-custom-vm-context)
24 36:     - [Quick specification of vm context](#quick-specification-of-vm-context)
24 37:     - [Using require & globals with vm and eval](#using-require--globals-with-vm-and-eval)
24 38:     - [Using nodejs](#using-nodejs)
24 39:     - [Html and javascript](#html-and-javascript)
24 40:     - [More javascript examples](#more-javascript-examples)
24 41:       - [Using vscode functions](#using-vscode-functions)
24 42:       - [Time and date](#time-and-date)
24 43:       - [Localhost server](#localhost-server)
24 44:       - [Random strings](#random-strings)
24 45:       - [Regular expression testing](#regular-expression-testing)
24 46:       - [Javascript input box (Vitamin b12, dosage vs uptake)](#javascript-input-box-vitamin-b12-dosage-vs-uptake)
24 47:   - [Other scripts](#other-scripts)
24 48:     - [Scripts with command execution strings included](#scripts-with-command-execution-strings-included)
24 49:     - [Python](#python)
24 50:     - [Julia](#julia)
24 51:     - [Octave](#octave)
24 52:     - [Scilab](#scilab)
24 53:     - [Lua](#lua)
24 54:     - [Matlab](#matlab)
24 55:     - [Go](#go)
24 56:     - [Gnuplot](#gnuplot)
24 57:     - [Bash & zsh](#bash--zsh)
24 58:     - [Powershell](#powershell)
24 59:     - [Cmd](#cmd)
24 60:   - [Chaining execution code blocks](#chaining-execution-code-blocks)
24 61:   - [Including tagged sections](#including-tagged-sections)
24 62:   - [Using scripts via REPLs](#using-scripts-via-repls)
24 63:     - [Python REPL](#python-repl)
24 64:     - [Julia REPL](#julia-repl)
24 65:     - [Lua REPL](#lua-repl)
24 66:     - [Node REPL](#node-repl)
24 67:     - [Scilab REPL](#scilab-repl)
24 68:     - [Octave REPL](#octave-repl)
24 69:     - [R (rterm) REPL](#r-rterm-repl)
24 70:     - [Check for active REPLs](#check-for-active-repls)
24 71:   - [One-liners and quickmath](#one-liners-and-quickmath)
24 72:     - [Default shell simple command execution:](#default-shell-simple-command-execution)
24 73:     - [exec notepad with file in current file's folder:](#exec-notepad-with-file-in-current-files-folder)
24 74:     - [exec notepad with temp file (%f):](#exec-notepad-with-temp-file-f)
24 75:     - [open another instance of vscode:](#open-another-instance-of-vscode)
24 76:     - [explore files, view folders:](#explore-files-view-folders)
24 77:     - [other examples:](#other-examples)
24 78:     - [bash html & javascript](#bash-html--javascript)
24 79:     - [audio one-liners](#audio-one-liners)
24 80:     - [Windows one-liners](#windows-one-liners)
24 81:     - [Quickmath examples](#quickmath-examples)
24 82:   - [Configuration settings](#configuration-settings)
24 83:     - [What settings are there?](#what-settings-are-there)
24 84:     - [Viewing script settings using scripts](#viewing-script-settings-using-scripts)
24 85:     - [Viewing a particular script setting](#viewing-a-particular-script-setting)
24 86:     - [Add new script language](#add-new-script-language)
24 87:     - ['Zero configuration' commands](#zero-configuration-commands)
24 88:     - [Other vscode config settings](#other-vscode-config-settings)
24 89:     - [In-line output using *swappers*](#in-line-output-using-swappers)
24 90:   - [Release Notes and Known Issues](#release-notes-and-known-issues)
24 91: 
24 92: ---
24 93: 
24 94: ## Features
24 95: 
24 96: *Hover-exec*
24 97: - facilitates execution from within the editor of fenced markdown code blocks in a variety of script languages that are installed on your system
24 98: - enables the inclusion of other script languages with or without configuration - see [`edit %h/test/readmore#add new`](#add-new-script-language)
24 99: - offers the opportunity, when working with markdown docs, to include 'live' calculations, results, code samples, demos, comparisons and useful links, using a range of possible scripts.
24 100: - can execute a range of 'one-liners' and provides a quick calculation facility - see [One-liners and quickmath](#one-liners-and-quickmath).
24 101: 
24 102: The *hover-exec* extension is activated when a markdown file is opened in the editor.
24 103: 
24 104: ### Compatibility with Markdown Preview Enhanced (*mpe*)
24 105: 
24 106: There is also an intention to maintain a certain compatability with the excellent *markdown preview enhanced* extension. The idea is to support the usual *mpe* {curly brackets} in the command line. There are a number of elements of *hover-exec* (eg. in-line results, built-in javascript execution rather than `node` only, and the different approach to temporary storage of generated script files) which make full compatability difficult at this stage, but many scripts can still be executed in both extensions.
24 107: 
24 108: ---
24 109: 
24 110: ## Basic hover-exec 
24 111: 
24 112: Hovering over a labelled fenced code block start or end line which starts with a triple backtick, or a line which starts with a single backtick and includes an end backtick, will trigger a hover message with an  *exec* command in the bottom line. Clicking the command link on the bottom line of the hover message will execute the code in the code block, and produce output.
24 113: 
24 114: ### Hover
24 115: Opening a markdown file (eg. this one) in the vscode editor will activate the *hover-exec* extension.
24 116: After opening in the editor, hover over the start line ```js ...`, or over the end line, of this (empty) code block:
24 117: 
24 118: ```js //this is a code block with id 'js'
24 119: // '''js   //this is an empty code block with id 'js'
24 120: ```
24 121: 
24 122: The following hover message will appear:
24 123: >      hover-exec: //this is a code block with id 'js'
24 124: >      [config] [command line vars %f etc] [delete block]
24 125: >      [clear output] [open last script] [open last result]
24 126: >      exec: js =>>
24 127: 
24 128: The message shows 'hover-exec:' followed by any comments that were in the command line.
24 129: The bottom line shows the command that will be executed.
24 130: Code blocks which are indented (ie. unfenced), fenced with '~', or not labelled, will not result in a hover message and are ignored by *hover-exec*.
24 131: 
24 132: #### Other information from the hover
24 133: 
24 134: Other 'clickable' areas in the main hover will provide information as follows:
24 135: 
24 136: *[ config ]*
24 137:     - will show the shell command that will be executed in an input box at the top of the editor
24 138:     - 'enter' on the input box will open settings.json to show start shell commands for all scripts
24 139:     - editing the command in the input box will change the script start command
24 140:     - escape will ignore any entries & close the input box
24 141: *[ command line vars %f etc ]*
24 142:     - gives a list of possible variables that can be used in command lines and script start shell commands
24 143:     - clicking an item on the list will copy the definition to the clipboard
24 144: *[ delete block ]*
24 145:     - deletes the current code block (if there is a following *output* block that is deleted first)
24 146:     - ctrl-z or cmd-z will undo the deletion
24 147: *[ clear output ]*
24 148:     - will clear all output, both in-line and in a following *output* block
24 149:     - the hover stays in place so you can immediately execute the command to see new output
24 150: *[ open last script ]*
24 151:     - hovering over this option will show the `path/name` of the code to be executed
24 152:     - Clicking will open the file in the editor
24 153:     - The contents of the block will be in the file if the script has been executed.
24 154: *[ open last result ]*
24 155:     - hovering over this option will show the `path/name` of the file with the text ouptut
24 156:     - clicking will open the file in the editor
24 157: 
24 158: ### Exec
24 159: Putting some javascript code into the code block, and clicking the *exec* (bottom line of the hover) gives the output below:
24 160: 
24 161: ```js //this is a code block with id 'js'
24 162: // '''js   //this is a code block with id 'js'
24 163: //        when executed the output will be visible in a new code block titled 'output'.
24 164: let world=3;
24 165: console.log('hello world '+world);
24 166: alert('goodbye world');
24 167: ```
24 168: 
24 169: If the cursor is inside a fenced code block, the code can be quickly executed using the shortcut `Alt+/` or `Opt+/`.
24 170: 
24 171: ### Output
24 172: Hovering  over the first or last line of the *output* block will show three options:
24 173: 
24 174: >      `output block to text`
24 175: >      `all output to text`
24 176: >      `delete output block`.
24 177: 
24 178: The first option of the output hover simply removes the code block triple backtick lines, leaving the contents as markdown text.
24 179: The second provides the output from the temporary output file generated, including any in-line results. Note that this should be done before another *exec*, otherwise the newer output will be obtained (which may be from a completely different block).
24 180: The bottom line option deletes the output block.
24 181: 
24 182: If the cursor is inside an output block, the usual shortcut `Alt+/` or `Opt+/`, will execute the last option and delete the output block.
24 183: 
24 184: ### In-line output
24 185: Output can be positioned in-line (within the code block) if this is appropriate:
24 186: 
24 187: ```js //show calculation results in-line
24 188: // '''js //show calculation results in-line
24 189: let a='the meaning of life';
24 190: console.log('Normally output is shown in an output block');
24 191: a+' is '+(7*7-7+Math.random()) =>> 
24 192: console.log('but results can be shown next to the calculation which produced them');
24 193: ```
24 194: >      Test output (also see in-line above):
24 195: >      Normally output is shown in an output block
24 196: >      but results can be shown next to the calculation which produced them
24 197: 
24 198: Inline results are produced by using `=>>` at the end of a script line (as above).
24 199: 
24 200: Notes
24 201: - in-line results do not need `console.log`, this is provided by the config section called `swappers`, which in effect 'swap' the output from the `output` block to the appropriate line in the original script
24 202: - in-line output should not be utilised inside loops or functions
24 203: - lines with `=>>` appended are not legal javascript, although the line is 'legalised' during processing
24 204: - to produce legal javascript precede `=>>` with a comment marker, ie for javascript use `// =>>` .. the in-line result will still be updated
24 205: - in-line output can be made available for all script engines using the `swappers` config.
24 206: 
24 207: ### Code block labels and commands
24 208: There are three elements to a code block label that *hover-exec* utilises:
24 209: - *id* to indicate the script language being employed, used for syntax highlighting by *vscode*
24 210: - *cmdid* to indicate the command to use to execute the script (omitted if the same as *id*)
24 211: - *repl* or *restart* to indicate a REPL is to be used or restarted (see the readmore)
24 212: 
24 213: Example code block labels - these use quotes instead of backticks to allow visibility in previews:
24 214: 
24 215:     '''id : cmdid : repl  -- the general format - spaces can be omitted around the :
24 216:     '''python    --a python code block, here id & cmdid are both python
24 217:     '''js : eval   --a javascript code block which uses eval for execution
24 218:     '''octave     --uses octave as both id & cmdid
24 219:     '''python:octave  --python is id for syntax highlight, octave is cmdid for execution
24 220:     '''output     --output blocks are produced by executing scripts
24 221: 
24 222: If *markdown preview enhanced* is used, it will require {cmd..} in the command block label. It also seems to require the {..} as the first item after the code block id. For compatibility *hover-exec* allows the following structure:
24 223: 
24 224:     '''js {cmd=node} : eval
24 225: 
24 226: This indicates a javascript code block, executed by *node* in *mpe* and *eval* in *hover-exec*.
24 227: 
24 228: ---
24 229: ## Javascript scripts
24 230: 
24 231: Javascript code blocks can be executed using the `vm` module, also by using  *vscode*'s built in `eval` - and also through [nodejs](#nodejs), or a browser. The default, for command blocks with id `js`, is to use the `vm` module. `hover-exec` provides, by default, a reasonably substantial `vm` context.
24 232: 
24 233: ### Examples using vm and eval
24 234: 
24 235: The code block label `js` by itself defaults to executing javascript via the built-in `vm` module. Appending `:eval` will instead execute the code block using  *eval*.
24 236: 
24 237: ```js {cmd=javascript}  //click the **exec:** line at the bottom of the *hover* to execute the block
24 238: //'''js {cmd=javascript}  //this comment is to show the command line in markdown previews
24 239: //                        //the default for the `js` command is to execute using the `vm` module
24 240: //   {cmd=..} is only for execution by markdown preview enhanced, it is not used in hover-exec
24 241: console.log("Note the in-line random number result ")
24 242: 'test: '+Math.random() =>> 
24 243: aa = function (fruit){alert('I like ' + fruit);} //no 'let' creates global
24 244: bb = function (animal){alert('he likes ' + animal);}
24 245: ```
24 246: >      Test output:
24 247: >      Note the in-line random number result
24 248: 
24 249: ```js
24 250: //'''js //execute the previous *vm* block first
24 251: //uses the globals defined in the previous code block
24 252: bb('dogs'); // alert messages appear bottom right
24 253: aa('pears');
24 254: ```
24 255: >      Test output is in a message box, bottom right of screen
24 256: 
24 257: Intermediate results can be viewed in line, as above, by appending `=>>` instead of using `console.log()` (see the `swapper` configurations). If it is wished to be strictly correct, and/or compatible with the *markdown preview enhanced* extension (*mpe*), put a comment marker before the `=>>`, eg. for javascript use `// =>>`, for python `# =>>`. Note, though, that *mpe* will not produce the results in-line.
24 258: 
24 259: Other results are produced in an `output` block. Hovering over the `output` id of an output code block provides options  *output block to text* or  *delete output block*. If the block has recently been executed, a third option  *all output to text* will provide the full output as in the  *temp...* output file generated. Using the shortcut `Alt+/` or `Opt+/` with the cursor in the `output` block deletes the block.
24 260: 
24 261: ---
24 262: A couple more examples using `js`, showing use of  *vscode* api functions and some extra functions published by *hover-exec* (eg. `alert`).
24 263: 
24 264: ```js
24 265: //'''js //using javascript vm, various examples
24 266: let abc="hello, world 3"
24 267: alert(abc) //not available in nodejs scripts
24 268: let a='goodbye world'
24 269: vscode.window.showInformationMessage(a) //not available in node scripts
24 270: let b=3;
24 271: 2*b*Math.random() =>> 
24 272: eval('let b=3; 2*b*Math.random()')=>> 
24 273: console.log(a,Math.random())
24 274: 'hello '+(2-1+Math.random())=>> 
24 275: process.cwd() =>> 
24 276: console.log(abc)
24 277: ```
24 278:  >     Test output (note inline results above, and alerts appear in a message box bottom right):
24 279:  >     goodbye world 0.7280946459838489
24 280:  >     hello, world 3
24 281: 
24 282: Note that  *[clear output]* in the main hover can be used to clear all the previous output before execution, including the in-line output. The hover will remain active so that exec is easy. There is also a *hover-exec* extension setting to make  *clear output* the default, at the expense of a little jerkiness.
24 283: 
24 284: ---
24 285: A useful example is a regex tester using the *javascript* vm (try clicking *clear output* before *exec*)::
24 286: 
24 287: ```js
24 288: //'''js  //javascript regex tester
24 289: 'abcdefg'.replace(/^.*(bc)/,'$1--') =>> 
24 290: ```
24 291: 
24 292: ---
24 293: All the code blocks above can be executed using `eval` instead of `vm`, eg.
24 294: 
24 295: ```js :eval
24 296: //'''js :eval // javascript regex tester using eval
24 297: 'abcdefg'.replace(/^.*(bcde)/,'$1--') =>>
24 298: ```
24 299: 
24 300: The difference is that `vm` scripts are executed within a more restricted  *context* (see next section).
24 301: 
24 302: In the command line (eg. above), using `js` for the code block id produces javascript syntax highlighting (it's a quick and dirty approach to provide basic syntax highlighting for a range of scripts), then adding ` :eval` sets the actual exec command to be *vscode*'s `eval`.
24 303: 
24 304: - Note that `vm` and `eval` both allow the internal  *vscode* API to be used. Installation of `nodejs` is not required for `vm` or `eval` scripts to execute.
24 305: 
24 306: ---
24 307: ### Available functions in *vm* and *eval*
24 308: 
24 309: The following functions are included in `vmContext` by default (and are also available to `eval`):
24 310: 
24 311: - abort(): abort current script
24 312: - alert(string): provide an alert box (bottom right)
24 313: - config: access to *hover-exec* configuration
24 314: - delay(usec): delay for specified number of usec
24 315: - execShell(string): exec shell command
24 316: - global: define and access global functions and variables (globals persist over separate script execs)
24 317: - globalThis: as for global
24 318: - input(string): provide an input box (top of screen)
24 319: - process: access to process module, eg. `process.cwd()`
24 320: - progress(string,usec): show a progress bar (bottom right) for specified usec
24 321: - readFile(path): read local file
24 322: - writeFile(path,string): write string to local file at full path
24 323: - require: for `xyx=require("package")`
24 324: - showKey: boolean, show keypressed
24 325: - showOk: boolean, show successful execution
24 326: - status(string): show `=>string` on status bar
24 327: - vscode: access to vscode objects
24 328: - write(string): `console.log` to output block
24 329: - math: access to `mathjs` objects (no need to `require('mathjs')`)
24 330: - moment: access to `moment` objects (no need to `require('moment')`)
24 331: - \_ : access to `lodash` objects (no need to `require('lodash')`)
24 332: 
24 333: ---
24 334: 
24 335: ### Using a custom vm context
24 336: The context for *vm* can be restricted, enlarged or set back to the default. The *vmContext* object can be directly specified by using *eval*. Examples:
24 337: 
24 338: ```js:eval
24 339: // '''js:eval
24 340: for (let x in vmContext){
24 341:   write(''+x);
24 342: }
24 343: ```
24 344: >      Test output:
24 345: >      global
24 346: >      globalThis
24 347: >      config
24 348: >      vscode
24 349: >      console
24 350: >      util
24 351: >      process
24 352: >      performance
24 353: >      abort
24 354: >      alert
24 355: >      delay
24 356: >      execShell
24 357: >      input
24 358: >      progress
24 359: >      status
24 360: >      readFile
24 361: >      writeFile
24 362: >      write
24 363: >      require
24 364: >      _
24 365: >      math
24 366: >      moment
24 367: >      __main
24 368: >      aa
24 369: >      bb
24 370: 
24 371: With this context, for example, the following works in `vm`:
24 372: 
24 373: ```js
24 374: //'''js //can use lodash
24 375: _.range(0,5)=>> 
24 376: ```
24 377: 
24 378: The following four examples show how to reduce the *vm* context, and re-enable the default context.
24 379: 
24 380: First reduce the context using `eval`:
24 381: 
24 382: ```js:eval
24 383: //'''js:eval
24 384: vmContext={write}
24 385: for (let x in vmContext){
24 386:   console.log('reduced context:')
24 387:   console.log('  {'+x+'}');
24 388: }
24 389: ```
24 390: >      Test output:
24 391: >      reduced context:
24 392: >       {write}
24 393: 
24 394: In this reduced context, lodash is not available to `vm` scripts:
24 395: 
24 396: ```js
24 397: //'''js //can't use lodash in reduced context
24 398: console.log(_.range(0, 5));
24 399: ```
24 400: >      Test output:
24 401: >      error ReferenceError: _ is not defined
24 402: 
24 403: To get the default back, set `vmContext` to `undefined`:
24 404: 
24 405: ```js:eval
24 406: //'''js:eval
24 407: vmContext=undefined
24 408: ```
24 409: 
24 410: Now `lodash`, part of the default `vmContext`, works again
24 411: 
24 412: ```js
24 413: //'''js //can now use lodash (etc) again in vm
24 414: _.range(0,5)=>>0,1,2,3,4
24 415: ```
24 416: 
24 417: In this way, the context used for vm_scripts can be customised to be restricted or permissive as necessary.
24 418: 
24 419: ### Quick specification of vm context
24 420: 
24 421: By default the `js` command utilises a default context which is progressively expanded by 'naked' function declarations and variable assignments (eg. `a=43;` rather than `let a=43;` or `var a=43;`). So successive code blocks can build on previously executed ones.
24 422: 
24 423: Any `js:vm` code block can utilise the following options:
24 424: 
24 425: Set the *vmContext* to the minimum
24 426: 
24 427: ```js:vmin
24 428: //'''js:vmin    //set 'vmContext' to minimum
24 429: //This will set the vmContext to a minimum (ie. just
24 430: //including 'write' which enables 'console.log' for output)
24 431: console.log('hello')
24 432: console.log(_.range(0, 5));
24 433: ```
24 434: >      Test output:
24 435: >      error ReferenceError: _ is not defined
24 436: 
24 437: Restore the *vmContext* to the default.
24 438: 
24 439: ```js:vmdf
24 440: //'''js:vmdf     //set 'vmContext' to default
24 441: //On execution, the vmContext returns to the default
24 442: console.log('hello')
24 443: console.log(_.range(0, 5));
24 444: ```
24 445: >      Test output:
24 446: >      hello
24 447: >      [ 0, 1, 2, 3, 4 ]
24 448: 
24 449: Apart from resetting `vmContext`, these are normal `js:vm` code blocks.
24 450: 
24 451: ---
24 452: 
24 453: ### Using require & globals with vm and eval
24 454: 
24 455: Moment, lodash (\_) and mathjs (math) are available by default in both `vm` and `eval`.
24 456: 
24 457: When using `vm`, function and variable definitions persist across `vm` scripts during the session. A function or variable can be also set as global (eg. `global.a=a;` see examples below) in either `vm` or `eval`, and is then available during the session in both. A global can be removed using, eg. `delete global.a;`
24 458: 
24 459: 'Naked' assignments (ie. no `let` or `var`) will be available to subsequently executed `js/vm` code blocks. Global assignments are available to subsequent `js/vm` code blocks, and also to subsequently executed `eval` code blocks.
24 460: 
24 461: ```js
24 462: //'''js //using lodash, mathjs and process in vm
24 463: function xrange(){
24 464:    let x1=_.range(0,6.1,6/10);
24 465:    let x=math.round(math.exp(math.multiply(x1,math.log(10))));
24 466:    return x
24 467: }
24 468: xrange()=>> 
24 469: let cd=process.cwd().replace(/\\/g,'/'); //current directory using '/'
24 470: cd =>> 
24 471: console.log(xrange())
24 472: ```
24 473: >      Test output (also inline):
24 474: >      [
24 475: >             1,       4,    16,
24 476: >            63,     251,  1000,
24 477: >          3981,   15849, 63096,
24 478: >        251189, 1000000
24 479: >      ]
24 480: 
24 481: 
24 482: ```js
24 483: //'''js //declare a global function (not needed if just using vm scripts)
24 484: f=global.f=function(m){return 'the meaning of life is '+m;};
24 485: f(44-2)=>>the meaning of life is 42
24 486: ```
24 487: >      Test output inline.
24 488: 
24 489: 
24 490: ```js:eval
24 491: //'''js:eval //use the global function (can be used in both *eval* & *vm*)
24 492: f(42)=>> the meaning of life is 42
24 493: ```
24 494: >      Test output inline.
24 495: 
24 496: ```js
24 497: //'''js //naked function definition (no 'let')
24 498: test = function () {
24 499:   console.log('test works');
24 500: };
24 501: ```
24 502: >      Test output - none.
24 503: 
24 504: There is no output, but the function `test` is now available to vm:
24 505: 
24 506: ```js
24 507: //'''js //function available to subsequent code blocks
24 508: test();
24 509: ```
24 510: >      Test output:
24 511: >      test works
24 512: 
24 513: For `eval`, neither 'naked' nor 'var' function defs are available to subsequent `eval` code blocks. 
24 514: Instead, the 'global' prefix needs to be used in the function def, as was done above.
24 515: 
24 516: ```js:eval
24 517: //'''js //naked function definition (no 'let')
24 518: global.test = function () {
24 519:   console.log('test works');
24 520: };
24 521: ```
24 522: >      Test output - none.
24 523: 
24 524: There is no output, but the function `test` is now available to vm:
24 525: 
24 526: ```js:eval
24 527: //'''js //function available to subsequent code blocks
24 528: test();
24 529: ```
24 530: >      Test output:
24 531: >      test works
24 532: 
24 533: ---
24 534: ### Using nodejs
24 535: 
24 536: The `js:node` command executes a javascript code block in `nodejs` (assuming, of course, `nodejs` has been installed).
24 537: 
24 538: ```js : node
24 539: //'''js:node //blanks allowed around the : in the command line
24 540: console.log('  test using node:\n  ' + Math.random());
24 541: console.log(
24 542:   '  Note: hover-exec on the output line, or alt+/ (opt+/) with\n',
24 543:   ' the cursor in the output block will delete the output block'
24 544: );
24 545: ```
24 546: >      Test output:
24 547: >        test using node:
24 548: >        0.11440220953136393
24 549: >        Note: hover-exec on the output line, or alt+/ (opt+/) with
24 550: >        the cursor in the output block will delete the output block
24 551: 
24 552: 
24 553: Note:
24 554: - to allow execution also in *markdown preview enhanced*, include `{cmd=node}` in the command line
24 555:   -- eg. `js {command=node} : node`
24 556: - *mpe* requires the { .. } to be placed immediately after the id, separated by space(s)
24 557: - in-line output is not available in *mpe*.
24 558: 
24 559: ```js {cmd=node} :node
24 560: //'''js {cmd=node} :node
24 561: console.log(process.cwd());
24 562: console.log('test using node: ' + Math.random());
24 563: let a = 5;
24 564: console.log(a + Math.random());
24 565: ```
24 566: >      Test output:
24 567: >      c:\Users\rmzetti\GitHub\hover-exec
24 568: >      test using node: 0.6890891280183384
24 569: >      5.083428662334198
24 570: 
24 571: ```js :node
24 572: //'''js :node
24 573: process.cwd()  =>>c:\Users\...\GitHub\hover-exec
24 574: 'test: '+Math.random() =>>test: 0.5575077736488605
24 575: let a=5;
24 576: a+Math.random() =>>5.639220383136484
24 577: ```
24 578: >      Test output inline.
24 579: 
24 580: ---
24 581: 
24 582: ### Html and javascript
24 583: 
24 584: Html and In-browser javascript can be used..
24 585: 
24 586: The following three examples are from the [js1k demos](https://js1k.com/). This will also work in *mpe*...
24 587: 
24 588: ```html  // hello world 
24 589: <!--'''html // Hello world -->
24 590: <h1 align="center">Hello world</h1>
24 591: <p>Html will be displayed in the browser</p>
24 592: <p id="test">Text here</p>
24 593: <script>
24 594:   document.getElementById('test').innerHTML = '<em>Text via javascript</em>';
24 595: </script>
24 596: ```
24 597: 
24 598: ```html  // what am I going to do now
24 599: <!-- '''html // tunnel *what am I going to do now*  -->
24 600: <head>modified slightly from [tunnel](https://js1k.com/2010-first/demo/763)</head>
24 601: <body style="margin:0;width:100%;background:#000815;overflow:hidden"> 
24 602: <canvas id="c"></canvas> 
24 603: <script> 
24 604: lt='lineTo',b=Math,i=b.sin,j=b.cos,k=document,bs=k.body.style,n=k.getElementById('c');
24 605: o=n.getContext('2d');p=n.width=innerWidth*1.2,q=n.height=innerHeight*1.2;
24 606: r=-p/2,s=-q/2;o.translate(-r,-s);u=q/4;len=92;
24 607: v
24 608: w=-20,x=2*b.PI/30,y=.1875;
24 609: function C(b,a,c){return'rgb('+~~b+','+~~a+','+~~c+')'}
24 610: setInterval('o.fillStyle=0;o.fillRect(r,s,p,q);g=+new Date;y-=.0625;if(y<0){y+=.1875;w++}for(d=0,h=31;h--;){l=h*.1875+y,z=200-200/(3+y)*l,m=z/2;o.strokeStyle=C(m,m,m);for(A=i(l+g/1700)*70,B=j(l+g/1100)*70,c=[],a=0;a<120;a+=4){t=a/4,f=t*x+b.PI+i(g/3700),e=u/l;c[a]=A+j(f)*e;c[a+1]=B+i(f)*e;c[a+2]=A+j(f+x)*e;c[a+3]=B+i(f+x)*e;f=(w+h)%len;e=z/4;o.fillStyle=C(+(v[f]?v[f][t-3]:0)?b.max(150+~~(105*i(g/100)),e):m/4,t%16==0&&(h+w)%12?255:e,e);if(d){o.beginPath();o.moveTo(c[a],c[a+1]);o[lt] (c[a+2],c[a+3]);o[lt] (d[a+2],d[a+3]);o[lt] (d[a],d[a+1]);o.fill();o.stroke()}}d=c}',50);
24 611: </script></body>
24 612: ```
24 613: 
24 614: ```html  // psychedelic
24 615: <!-- '''html  // psychedelic -->
24 616: <html>
24 617:   <head> </head>
24 618:   <body>
24 619:     <canvas id="canv" display="block"></canvas>
24 620:     <script>
24 621:       var c = document.getElementById('canv'),
24 622:         fst,
24 623:         $ = c.getContext('2d');
24 624:       c.width = window.innerWidth;
24 625:       c.height = window.innerHeight;
24 626:       window.addEventListener(
24 627:         'resize',
24 628:         function () {
24 629:           c.width = window.innerWidth;
24 630:           c.height = window.innerHeight;
24 631:         },
24 632:         false
24 633:       );
24 634:       function mob(a, b, c) {
24 635:         var pa = a[0] * a[0] + a[1] * a[1],
24 636:           pb = b[0] * b[0] + b[1] * b[1],
24 637:           pc = c[0] * c[0] + c[1] * c[1];
24 638:         var y =
24 639:             ((a[0] - b[0]) * (pb - pc) - (b[0] - c[0]) * (pa - pb)) /
24 640:             (2 * (b[1] - a[1]) * (b[0] - c[0]) -
24 641:               2 * (a[0] - b[0]) * (c[1] - b[1])),
24 642:           x = (pa - pb + 2 * (b[1] - a[1]) * y) / (2 * (a[0] - b[0])),
24 643:           r = Math.sqrt((x - a[0]) * (x - a[0]) + (y - a[1]) * (y - a[1]));
24 644:         return [x, y, r];
24 645:       }
24 646:       function arcs(x, y, r) {
24 647:         var c = mob_arc(x, y, r);
24 648:         if (c[2] > 10) return;
24 649:         $.beginPath();
24 650:         $.arc(c[0], c[1], c[2] / 1.65, 0, Math.PI * 2, false);
24 651:         $.fill();
24 652:         $.closePath();
24 653:       }
24 654:       function mob_pt(x, y) {
24 655:         var denom = (x + 1) * (x + 1) + y * y;
24 656:         return [(x * x - 1 + y * y) / denom, (2 * y) / denom];
24 657:       }
24 658:       function mob_arc(x, y, r) {
24 659:         var a = mob_pt(x - r, y),
24 660:           b = mob_pt(x + r, y),
24 661:           c = mob_pt(x, y + r);
24 662:         return mob(a, b, c);
24 663:       }
24 664:       function cmul(w, z) {
24 665:         return [w[0] * z[0] - w[1] * z[1], w[0] * z[1] + w[1] * z[0]];
24 666:       }
24 667:       function rotate(z, theta) {
24 668:         return cmul(z, [Math.cos(theta), Math.sin(theta)]);
24 669:       }
24 670:       function modulus(p) {
24 671:         return Math.sqrt(p[0] * p[0] + p[1] * p[1]);
24 672:       }
24 673:       function crecip(z) {
24 674:         var d = z[0] * z[0] + z[1] * z[1];
24 675:         return [z[0] / d, -z[1] / d];
24 676:       }
24 677:       function spiral(r, st, delta, opts) {
24 678:         var rd = crecip(delta),
24 679:           md = modulus(delta),
24 680:           mrd = 1 / md,
24 681:           colidx = opts.i,
24 682:           cols = opts.fill,
24 683:           min_d = opts.min_d,
24 684:           max_d = opts.max_d;
24 685:         for (
24 686:           var q = st, mod_q = modulus(q);
24 687:           mod_q < max_d;
24 688:           q = cmul(q, delta), mod_q *= md
24 689:         ) {
24 690:           $.fillStyle = cols[colidx];
24 691:           arcs(q[0], q[1], mod_q * r);
24 692:           colidx = (colidx + 1) % cols.length;
24 693:         }
24 694:         colidx = ((opts ? opts.i : 0) + cols.length - 1) % cols.length;
24 695:         for (
24 696:           var q = cmul(st, rd), mod_q = modulus(q);
24 697:           mod_q > min_d;
24 698:           q = cmul(q, rd), mod_q *= mrd
24 699:         ) {
24 700:           $.fillStyle = cols[colidx];
24 701:           arcs(q[0], q[1], mod_q * r);
24 702:           colidx = (colidx + cols.length - 1) % cols.length;
24 703:         }
24 704:       }
24 705:       var p = 9,
24 706:         q = 36;
24 707:       root = {
24 708:         a: [1.203073257697729, 0.06467009356882296],
24 709:         b: [1.0292303580593238, 0.19576340274878198],
24 710:         r: 0.09666227205856094,
24 711:       };
24 712:       var rep = 20000;
24 713:       function anim(t) {
24 714:         $.setTransform(1, 0, 0, 1, 0, 0);
24 715:         $.clearRect(0, 0, c.width, c.height);
24 716:         $.translate(Math.round(c.width / 2), Math.round(c.height / 2));
24 717:         $.scale(250, 250);
24 718:         var beg = rotate(root.a, Math.PI * 2 * t);
24 719:         for (var i = 0; i < q; i++) {
24 720:           spiral(root.r, beg, root.a, {
24 721:             fill: ['#EB1E23', '#D9DFD1', '#008F86'],
24 722:             i: i % 3.5,
24 723:             min_d: 1e-3,
24 724:             max_d: 1e3,
24 725:           });
24 726:           beg = cmul(beg, root.b);
24 727:         }
24 728:       }
24 729:       function run(ts) {
24 730:         if (!fst) fst = ts;
24 731:         anim(((ts - fst) % rep) / rep);
24 732:         window.requestAnimationFrame(run);
24 733:       }
24 734:       run();
24 735:     </script>
24 736:   </body>
24 737: </html>
24 738: ```
24 739: 
24 740: ```html  // breathing galaxies
24 741: <!-- '''html  // breathing galaxies -->
24 742: <html>
24 743:   <head>
24 744:     <title>JS1k: Breathing Galaxies (1020 bytes)</title>
24 745:     <script type="text/javascript">
24 746:       window.onload = function () {
24 747:         C = Math.cos; // cache Math objects
24 748:         S = Math.sin;
24 749:         PP = Math.PI;
24 750:         SW = screen.availWidth * 1.1;
24 751:         SH = screen.availHeight;
24 752:         U = 0;
24 753:         w = window;
24 754:         j = document;
24 755:         d = j.getElementById('c');
24 756:         c = d.getContext('2d');
24 757:         W = d.width = SW;
24 758:         H = d.height = SH;
24 759:         c.fillRect(0, 0, W, H); // resize <canvas> and draw black rect (default)
24 760:         c.globalCompositeOperation = 'lighter'; // switch to additive color application
24 761:         c.lineWidth = 0.2;
24 762:         c.lineCap = 'round';
24 763:         var bool = 0,
24 764:           t = 0; // theta
24 765:         d.onmousemove = function (e) {
24 766:           if (window.T) {
24 767:             if (D == 9) {
24 768:               D = Math.random() * 15;
24 769:               f(1);
24 770:             }
24 771:             clearTimeout(T);
24 772:           }
24 773:           X = e.pageX; // grab mouse pixel coords
24 774:           Y = e.pageY;
24 775:           a = 0; // previous coord.x
24 776:           b = 0; // previous coord.y
24 777:           (A = X), // original coord.x
24 778:             (B = Y); // original coord.y
24 779:           R = (((e.pageX / W) * 999) >> 0) / 999;
24 780:           r = (((e.pageY / H) * 999) >> 0) / 999;
24 781:           U = ((e.pageX / H) * 360) >> 0;
24 782:           D = 9;
24 783:           g = (360 * PP) / 180;
24 784:           T = setInterval(
24 785:             (f = function (e) {
24 786:               // start looping spectrum
24 787:               c.save();
24 788:               c.globalCompositeOperation = 'source-over'; // switch to additive color application
24 789:               if (e != 1) {
24 790:                 c.fillStyle = 'rgba(0,0,0,0.02)';
24 791:                 c.fillRect(0, 0, W, H); // resize <canvas> and draw black rect (default)
24 792:               }
24 793:               c.restore();
24 794:               i = 255;
24 795:               while (i--) {
24 796:                 //25
24 797:                 c.beginPath();
24 798:                 if (D > 450 || bool) {
24 799:                   // decrease diameter
24 800:                   if (!bool) {
24 801:                     // has hit maximum
24 802:                     bool = 1;
24 803:                   }
24 804:                   if (D < 0.1) {
24 805:                     // has hit minimum
24 806:                     bool = 0;
24 807:                   }
24 808:                   t -= g; // decrease theta
24 809:                   D -= 0.1; // decrease size
24 810:                 }
24 811:                 if (!bool) {
24 812:                   t += g; // increase theta
24 813:                   D += 0.1; // increase size
24 814:                 }
24 815:                 q = (R / r - 1) * t;
24 816:                 // create hypotrochoid from current mouse position, and setup variables (see: http://en.wikipedia.org/wiki/Hypotrochoid)
24 817:                 x =
24 818:                   (R - r) * C(t) +
24 819:                   D * C(q) +
24 820:                   (A + (X - A) * (i / 25)) +
24 821:                   (r - R); // center on xy coords
24 822:                 y = (R - r) * S(t) - D * S(q) + (B + (Y - B) * (i / 25));
24 823:                 if (a) {
24 824:                   // draw once two points are set
24 825:                   c.moveTo(a, b);
24 826:                   c.lineTo(x, y);
24 827:                 }
24 828:                 c.strokeStyle = 'hsla(' + (U % 360) + ',100%,50%,0.75)'; // draw rainbow hypotrochoid
24 829:                 c.stroke();
24 830:                 a = x; // set previous coord.x
24 831:                 b = y; // set previous coord.y
24 832:               }
24 833:               U -= 0.5; // increment hue
24 834:               A = X; // set original coord.x
24 835:               B = Y; // set original coord.y
24 836:             }),
24 837:             16
24 838:           );
24 839:         };
24 840:         j.onkeydown = function (e) {
24 841:           a = b = 0;
24 842:           R += 0.05;
24 843:         };
24 844:         //d.onmousemove({pageX:300, pageY:290})
24 845:         setInterval(
24 846:           'd.onmousemove({pageX:Math.random()*SW, pageY:Math.random()*SH})',
24 847:           Math.random() * 1000
24 848:         );
24 849:       };
24 850:     </script>
24 851:     <style>
24 852:       body {
24 853:         margin: 0;
24 854:         overflow: hidden;
24 855:       }
24 856:     </style>
24 857:   </head>
24 858:   <body>
24 859:     <canvas id="c"></canvas>
24 860:   </body>
24 861: </html>
24 862: ```
24 863: 
24 864: ---
24 865: ### More javascript examples
24 866: 
24 867: #### Using vscode functions
24 868: 
24 869: The *vm* and *eval* commands use vscode's built in capabilities. *vm* and *eval* are not available in *mpe*.
24 870: 
24 871: ```js
24 872: //'''js :vm   // or just 'js'
24 873: let abc="abcde"
24 874: let a='hello variable world';
24 875: alert(a) //nb. alert is not available in node
24 876: a='goodbye'
24 877: vscode.window.showInformationMessage(a) //not available in node
24 878: eval('let a=3;2*a*Math.random()')=>>2.0640811299649973
24 879: console.log(a,Math.random())
24 880: 'hello '+(2-1+Math.random())=>>hello 1.1809207030007176
24 881: process.cwd() =>>c:\Users\,,\GitHub\hover-exec
24 882: console.log(abc)
24 883: ```
24 884: >      Test output (also inline, and in message boxes bottom right of window):
24 885: >      goodbye 0.5267435608368682
24 886: >      abcde
24 887: 
24 888: 
24 889: ---
24 890: #### Time and date
24 891: 
24 892: Various time and date functions using `vm`
24 893: 
24 894: ```js
24 895: //'''js      //time & date using internal javascript via vm - not in *mpe*
24 896: (44-Math.random())=>> 
24 897: //show information message via vscode api
24 898: progress('Hello whole World',4000)
24 899: new Date().toISOString().slice(0,10)=>> 
24 900: new Date().toLocaleDateString()=>> 
24 901: new Date().toString()=>> 
24 902: new Date().toLocaleString()=>> 
24 903: new Date().getTime()=>> 
24 904: ```
24 905: >      Test output: all inline (and a progress message bottom right)
24 906: 
24 907: ---
24 908: Time and date using node
24 909: 
24 910: ```js {cmd=node} :node
24 911: //'''js {cmd=node} :node  //through nodejs in both mpe and hover-exec
24 912: a=44
24 913: // in-line results are calculated but not output in mpe
24 914: 'answer='+(a-Math.random()) =>> 
24 915: new Date().getTime()=>> 
24 916: console.log(new Date().toISOString().slice(0, 10))
24 917: console.log(new Date().toLocaleDateString())
24 918: ```
24 919: >      Test output:
24 920: >      2022-04-18
24 921: >      18/04/2022
24 922: 
24 923: ---
24 924: #### Localhost server
24 925: 
24 926: Run a server on localhost ([click here after running it](http://127.0.0.1:1337))
24 927: Also works in *markdown preview enhanced*, (ie. *mpe*)
24 928: 
24 929: ```js {cmd=node}
24 930: //'''js {cmd=node} -- works in mpe using node
24 931: var http = require('http');
24 932: http
24 933:   .createServer(function (req, res) {
24 934:     res.writeHead(200, { 'Content-Type': 'text/plain' });
24 935:     res.end('Hello World at last!\n');
24 936:   })
24 937:   .listen(1337, '127.0.0.1');
24 938: ```
24 939: 
24 940: Note. If there is an EACCESS error in windows, use 'net stop winnat' and then 'net start winnat' in an admin terminal.
24 941: 
24 942: To kill the server, for windows use `pwsh` (see the comments below), also in *mpe*, for macos use zsh below
24 943: 
24 944:   ```pwsh
24 945:   # '''pwsh {cmd} --works in mpe
24 946:   # to kill server, exec once & look for pid to kill (line TCP 127.0.0.1:1337, pid on rhs)
24 947:   # then enter pid in kill statement below and exec again
24 948:   kill 1400
24 949:   netstat -ano | findstr :13
24 950:   ```
24 951: 
24 952: ```zsh
24 953:  # '''zsh - server usually killed on 'cancel'
24 954:  # to check, exec once & look for pid to kill (line TCP 127.0.0.1:1337)
24 955:  # then replace pid in kill statement below with the one found and exec again
24 956: kill 49845
24 957: netstat -vanp tcp | grep -e 1337 -e pid
24 958: ```
24 959: 
24 960: ---
24 961: #### Random strings
24 962: 
24 963: ```js
24 964: //'''js {cmd=node} :node //alternative using node, also works in mpe
24 965: //random string generation see https://gist.github.com/6174/6062387
24 966: a=Math.random().toString(36).substring(2, 15)
24 967: a =>>rbd7mswsp5k
24 968: a=[...Array(60)].map(_=>(Math.random()*36|0).toString(36)).join``
24 969: a =>>nclnhj9nilkyqdsqzyutueamthwutbcoj17iazc33j785hjuosec4063775l
24 970: a=[...Array(30)].map(_=>((Math.random()*26+10)|0).toString(36)).join``
24 971: a =>>hxnxshjsjblbtyqlovrbrrvnjmffrr
24 972: console.log(a)
24 973: Math.random(36).toString(36).substring(2,3) =>>9
24 974: ```
24 975: >      Test output:
24 976: >      hxnxshjsjblbtyqlovrbrrvnjmffrr
24 977: 
24 978: ---
24 979: ```js {cmd=node} :node //string jumbler, works in mpe
24 980: //'''js {cmd=node} :node //string jumbler, works in mpe
24 981: function swapStr(str, n) {
24 982:   var arr = [...str];
24 983:   for (let k = 0; k < n; k++) {
24 984:     i = (Math.random() * str.length) | 0;
24 985:     j = (Math.random() * str.length) | 0;
24 986:     [arr[i], arr[j]] = [arr[j], arr[i]];
24 987:   }
24 988:   return arr.join('');
24 989: }
24 990: console.log(swapStr('portsmouth', 100));
24 991: ```
24 992: >      Test output:
24 993: >      mhtoprsout
24 994: 
24 995: ---
24 996: ```js {cmd=node} :node //generate random string
24 997: //'''js {cmd=node} :node //generate random string
24 998: function randch(n){
24 999:   return ''+Math.random().toString(36).substring(2,2+n)
24 1000: }
24 1001: randch(36) // =>>alxgrlb8lu8
24 1002: console.log(randch(36))
24 1003: ```
24 1004: >      Test output:
24 1005: >      wozwmx10b3
24 1006: 
24 1007: ---
24 1008: 
24 1009: #### Regular expression testing
24 1010: 
24 1011: Here are several other examples of regex testing - the output is in-line.
24 1012: To see that the output is being regenerated click *[clear output]* in the hover before executing
24 1013: 
24 1014: ```js {cmd=node}
24 1015: //'''js {cmd} //javascript regex tester (use node for mpe)
24 1016: // if not using md preview enhanced, use = >> instead of // = (less faint)
24 1017: let s="xys {cmd='js'} th".replace(/.*cmd=(.*?)[\s\,\}].*/,'$1').replace(/["']/g,'');
24 1018: s+' this output not from mpe.' // =>> 
24 1019: console.log(s); //this needed for mpe
24 1020: ```
24 1021: >      Test output:
24 1022: >      js
24 1023: 
24 1024: ---
24 1025: ```js {cmd=node} :eval // for mpe the {..} needs to be before the : 
24 1026: //'''js {cmd=node} :eval //javascript regex tester
24 1027: 'abcdefg'.replace(/^.*(bc)/,'$1Baa')  // =>> 
24 1028: console.log('abcdefg'.replace(/^.*(bc)/,'$1Baa'))  //this for *mpe*
24 1029: ```
24 1030: >      Test output:
24 1031: >      bcBaadefg
24 1032: 
24 1033: 
24 1034: ---
24 1035: another regex example
24 1036: 
24 1037: ```js {cmd=node} : node // for mpe the {..} needs to be before the : 
24 1038: //'''js :node // if the space is not included before the : the code block disappears in mpe
24 1039: var myRe = new RegExp('d(b+)d', 'g');
24 1040: var myArray = myRe.exec('xxdbbbdwerwr');
24 1041: myArray =>> 
24 1042: if(myArray!==null){
24 1043:   myArray.index =>> 
24 1044:   myArray.input =>> 
24 1045:   myArray.input[myRe.lastIndex] =>> 
24 1046: }
24 1047: myRe.source =>> 
24 1048: myRe.lastIndex =>> 
24 1049: console.log('myRe is '+myRe)
24 1050: ```
24 1051: >      Test output:
24 1052: >      myRe is /d(b+)d/g
24 1053: 
24 1054: 
24 1055: ---
24 1056: #### Javascript input box (Vitamin b12, dosage vs uptake)
24 1057: 
24 1058: This uses `await input('text')` to get input for a js script. It works in *js* (*vm*), or *eval*, not *nodejs
24 1059: 
24 1060: ```js
24 1061: //'''js   //getting input for js:vm or js:eval
24 1062: let d=await input('dosage ug?')/1 // /1 converts to number, also note 'await'
24 1063: let u=1.5*d/(d+1.5)+(1-1.5/(d+1.5))*0.009*d
24 1064: ' uptake='+u  =>> 
24 1065: console.log('for',d,'ug uptake is',u,'ug')
24 1066: ```
24 1067: >      Test output:
24 1068: >      for 1000 ug uptake is 10.484273589615576 ug
24 1069: 
24 1070: ---
24 1071: ## Other scripts
24 1072: 
24 1073: ### Scripts with command execution strings included
24 1074: 
24 1075: Command lines to conveniently start a number of scripts are included (see [Configuration settings](#configuration-settings) for the actual command lines used):
24 1076: 
24 1077: - [javascript via vm and eval](#Examples-using-vm-and-eval)
24 1078: - [javascript using nodejs](#Using-nodejs)
24 1079: - [html via the default browser](#Html-and-javascript)
24 1080: - [python](#python)
24 1081: - [julia](#julia)
24 1082: - [octave](#octave)
24 1083: - [scilab](#scilab)
24 1084: - [lua](#lua)
24 1085: - [matlab](#matlab)
24 1086: - [go](#go)
24 1087: - [pascal](#pascal)
24 1088: - [gnuplot](#gnuplot)
24 1089: - [powershell](#powershell)
24 1090: - [bash & zsh](#bash-&-zsh)
24 1091: 
24 1092: Notes:
24 1093: 
24 1094: - The script language you wish to use (eg `julia`, `nodejs` ..) needs to have been installed
24 1095: - Some of the commands to run the scripts ***may need customising*** to suit your particular installation - see [Configuration settings](#configuration-settings).
24 1096: - Other script languages may be added. In basic usage the script command can be entered via '[config]' in the hover. To achieve in-line capability, use the *hover-exec* extension settings, or as an alternative, this can also done with `eval` - see the [Add new script language](#add-new-script-language) section for examples.
24 1097: 
24 1098: ---
24 1099: ### Python
24 1100: 
24 1101: Use `python` to run python. `python3` can be used if that is the python start command
24 1102: 
24 1103: ```python {cmd}
24 1104: # '''python :python3 # use this instead to use 'python3' as start command
24 1105: from random import random
24 1106: 45-2+random()       #  =>> 
24 1107: 'hello, world 3!'       #  =>> 
24 1108: print('python ok')
24 1109: ```
24 1110: >      Test output (plus inline output):
24 1111: >      python ok
24 1112: 
24 1113: 
24 1114: Note that the inline indicator `=>>` has been prefixed by a python comment character `#` (only spaces allowed between) so that *markdown preview enhanced* can execute the code. *hover-exec* will still update the in-line output, but *mpe*, of course, will not.
24 1115: 
24 1116: ---
24 1117: This one-liner can be used to install python packages via pip (change cmdId to `pwsh`,`bash`,`zsh` as appropriate):
24 1118: 
24 1119: `pwsh python -m pip install --upgrade pip` // this example will upgrade pip
24 1120: `pwsh python -m pip install numpy`            // this example will install numpy 
24 1121: `pwsh python -m pip install pyformulas`     // this example will install pyformulas 
24 1122: 
24 1123: ---
24 1124: In the following example, `{cmd matplotlib=true}` will allow execution in *markdown preview enhanced* & plot graphs inline. In *hover-exec* they are plotted in a separate window (and can be 'pasted' in using the `paste image` vscode extension). If you also use  *markdown memo* the image link can be changed to the wiki form `[[...]]` and viewed on hover.
24 1125: 
24 1126: ```python {cmd matplotlib=true}
24 1127: # '''python {cmd matplotlib=true}
24 1128: import numpy as np
24 1129: import matplotlib.pyplot as plt
24 1130: randnums= np.random.randint(1,101,500)
24 1131: plt.plot(randnums)
24 1132: plt.show()
24 1133: ```
24 1134: >      Test output is the plot.
24 1135: 
24 1136: Image from running the above code block & pasting via  *Markdown kit* or  *Markdown memo*:
24 1137: 
24 1138: ![[matplotlib_example.png]]
24 1139: 
24 1140: ---
24 1141: 
24 1142: ```python  //show live plot (for about 4 sec)
24 1143: # '''python :python3 # use this instead to use 'python3' as start command
24 1144: # '''python {cmd}    # include {cmd} for mpe
24 1145: import pyformulas as pf
24 1146: import matplotlib.pyplot as plt
24 1147: import numpy as np
24 1148: import time
24 1149: fig = plt.figure()
24 1150: fig.suptitle('To close, click cancel in hover, then close plot if necessary', fontsize=14)
24 1151: canvas = np.zeros((480,640))
24 1152: screen = pf.screen(canvas, 'Sinusoid')
24 1153: start = time.time()
24 1154: now = time.time() - start
24 1155: while now<4:
24 1156:     x = np.linspace(now-2, now, 100)
24 1157:     y = np.sin(2*np.pi*x) + np.sin(3*np.pi*x)
24 1158:     plt.xlim(now-2,now+1)
24 1159:     plt.ylim(-3,3)
24 1160:     plt.plot(x, y, c='black')
24 1161:     # If we haven't already shown or saved the plot, then we need to draw the figure first...
24 1162:     fig.canvas.draw()
24 1163:     image = np.frombuffer(fig.canvas.tostring_rgb(), dtype=np.uint8)
24 1164:     image = image.reshape(fig.canvas.get_width_height()[::-1] + (3,))
24 1165:     screen.update(image)
24 1166:     now = time.time() - start
24 1167: ```
24 1168: >      Test output is the plot.
24 1169: 
24 1170: ---
24 1171: ### Julia
24 1172: 
24 1173: If the *julia* extension is included, *vscode* will provide syntax highlighting. Note that when doing this test, you will need to ensure *julia* has the appropriate packages available (see the *using* line in the example script below). The following one-liners could be used to do this for the script below (if you're reading this in the preview, the one-liners are surrounded with single backticks and start in col 1):
24 1174: 
24 1175: `julia using Pkg;Pkg.add("LinearAlgebra");`
24 1176: 
24 1177: **Note:** these may often take some time, sometimes about 5 minutes for me... there will be an *executing julia* message in the *vscode* status bar, and there will be *output* when they are complete.
24 1178: 
24 1179: ```julia
24 1180: # '''julia  // use '''julia {cmd} to execute in *mpe* 
24 1181: using LinearAlgebra # this package is not needed if dot(a',a) is commented out
24 1182: a=rand(Float64,3);
24 1183: a   # =>> 
24 1184: a'*a # =>> 
24 1185: dot(a',a) # =>> 
24 1186: b=a;b[2]=42;  # demonstrates that arrays are shallow copied here
24 1187: println(string("a=",a,"\n","b=",b))  # double quotes only for julia strings
24 1188: ```
24 1189: >      Test output (also see inline output):
24 1190: >      a=[0.8999280817338797, 42.0, 0.8299019559590521]
24 1191: >      b=[0.8999280817338797, 42.0, 0.8299019559590521]
24 1192: 
24 1193: Julia can also be executed in *mpe* by appending '{cmd}' after the command id (separated with a space).
24 1194: 
24 1195: 
24 1196: ---
24 1197: ### Octave
24 1198: 
24 1199: Use `octave` or `python : octave` to run octave. Using 'python' as the command id provides syntax highlighting, adding :octave uses octave. The {...} is for *markdown preview enhanced*
24 1200: 
24 1201: ```python :octave
24 1202:  # '''python : octave {cmd=octave} -- {cmd..} is for mpe
24 1203:  #   python gives a syntax highlighter, :octave executes in octave
24 1204:  #   nb. in octave, need mat2str or num2str for numeric output
24 1205: num2str(7.1+rand(1))  =>> 
24 1206: 'hello world in-line'  =>> 
24 1207: pwd()  =>> 
24 1208: disp('hello world in output section!')
24 1209: disp(rand(1))
24 1210: ```
24 1211: >      Test output (also see in-line):
24 1212: >      hello world in output section!
24 1213: >      0.9263
24 1214: 
24 1215: ---
24 1216: ### Scilab
24 1217: 
24 1218: Use `scilab` to run scilab, or `js :scilab` for some quick and dirty syntax highlighting
24 1219: 
24 1220: ```js :scilab
24 1221: // '''js :scilab //using js :scilab provides quick & dirty (js) syntax highlight
24 1222: //  nb. scilab needs to use 'string()' for inline numeric output (uses mprintf)
24 1223: rand("seed",getdate('s')); //set new random sequence
24 1224: mprintf('%s\n','test '+string(rand())+' '+pwd());
24 1225: string(rand())+' '+pwd() =>> 
24 1226: string(rand()) =>> 
24 1227: disp('disp puts quotes around strings',rand())
24 1228: ```
24 1229: >      Test output (also see in-line):
24 1230: >      test 0.3995462 c:\Users\rmzetti\GitHub\hover-exec
24 1231: >        "disp puts quotes around strings"
24 1232: >         0.4512196
24 1233: 
24 1234: ---
24 1235: ### Lua
24 1236: 
24 1237: Lua has a syntax highlighter available for *vscode*.
24 1238: 
24 1239: Many installations require running, say, *lua51*, or *lua54*, rather than setting *lua* as the run-time (unlike, say, *julia*).
24 1240: If this is the case use 'lua : lua54' as the command id, etc. ... or check/adjust using [config] in the hover (top left).
24 1241: 
24 1242: ```lua -- say hello & goodbye
24 1243: -- '''lua  -- 'lua' id specifies syntax highlight and default start command
24 1244: --   add :lua54 to use 'lua54' as theactual command
24 1245: 'hello ' .. 44-2+math.random() =>> 
24 1246: "& goodbye " .. math.pi+math.random() =>> 
24 1247: print("lua ok") -- this outputs in the output code block below
24 1248: ```
24 1249: >      Test output (also see in-line):
24 1250: >      lua ok
24 1251: 
24 1252: ---
24 1253: ### Matlab
24 1254: 
24 1255: And `matlab` can be used to run  *matlab*, although it's a slow starter...
24 1256: 
24 1257: ```matlab
24 1258: % '''matlab  --matlab is slow to start (takes about 5s on Asus with Ryzen 7 4700U)
24 1259: x = 1:0.1:10;
24 1260: y = x.^2;
24 1261: plot(x,y)
24 1262: uiwait(helpdlg('Ok!')); % this line needed otherwise the plot disappears
24 1263: % more waiting after plot dismissed before the following answer appears
24 1264: 7*7-7 =>> 
24 1265: disp("matlab ok!")
24 1266: ```
24 1267: >      Test output (need to close the plot to see this, after a delay.. ):
24 1268: >      matlab ok!
24 1269: 
24 1270: ---
24 1271: ### Go
24 1272: 
24 1273: Using go as a 'scripting language'.
24 1274: Note that the go.mod and go.sum files provided in the 'test' directory need to be in the following folder: \
24 1275: `echo %g` //hover here (in the editor) to view the actual path for your system
24 1276: 
24 1277: ```go
24 1278: // '''go
24 1279: package main
24 1280: import "fmt"
24 1281: func main() {
24 1282:     var a[5] int
24 1283:     fmt.Println("emp:", a)
24 1284:     a[4] = 42
24 1285:     fmt.Println("set:", a)
24 1286:     fmt.Println("get:", a[4])
24 1287:     fmt.Println("len:", len(a))
24 1288:     b := [5] int {1,2,3,4,5}
24 1289:     fmt.Println("dcl:", b)
24 1290:     var twoD [2] [3] int
24 1291:     for i := 0; i < 2; i++ {
24 1292:         for j := 0; j < 3; j++ {
24 1293:             twoD[i][j] = i + j
24 1294:         }
24 1295:     }
24 1296:     fmt.Println("2d: ", twoD)
24 1297: }
24 1298: ```
24 1299: 
24 1300: >      Test output:
24 1301: >      emp: [0 0 0 0 0]
24 1302: >      set: [0 0 0 0 42]
24 1303: >      get: 42
24 1304: >      len: 5
24 1305: >      dcl: [1 2 3 4 5]
24 1306: >      2d:  [[0 1 2] [1 2 3]]
24 1307: 
24 1308: ---
24 1309: ### Gnuplot
24 1310: 
24 1311:  *Gnuplot* is a very useful stand-alone plotting facility. Assuming  *gnuplot* has been installed, it can be executed within *hover-exec*. In addition, other scripts can output  *gnuplot* commands (along with data) in their output block and the data can be immediatedly plotted in a chained fashion (see the next section).
24 1312: 
24 1313: ```gnuplot {cmd} # cmd is for markdown preview enhanced
24 1314: # '''gnuplot //here gnuplot is being used stand-alone
24 1315: #   tagging the data allows it to be used in another script (see next)
24 1316: $charge << EOD
24 1317: #tag1
24 1318: "2-07-2021 22:32", 44,
24 1319: "3-07-2021 13:34", 42,
24 1320: "4-07-2021 14:22", 39,
24 1321: "5-07-2021 15:10", 32,
24 1322: "5-07-2021 23:57", 21,
24 1323: "6-07-2021 18:10", 100,
24 1324: "7-07-2021 17:02", 95,
24 1325: "7-07-2021 22:46", 93,
24 1326: "8-07-2021 16:38", 91,
24 1327: "9-07-2021 16:08", 87,
24 1328: "16-07-2021 23:30", 66,
24 1329: #tag1
24 1330: EOD
24 1331: set datafile separator comma
24 1332: timefmt = "%d-%m-%Y %H:%M"
24 1333: set format x "%d-%m" time
24 1334: set mouse mouseformat 3
24 1335: plot $charge u (timecolumn(1,timefmt)):2 w lp pt 7 ps 2 ti "charge"
24 1336: ```
24 1337: ![[2021-08-31-20-28-22.png]] (this 'wiki' type link is enabled in the editor using *markdown memo*)
24 1338: 
24 1339: The above is a *png* file created (using the *paste image* extension) from a copy of the plot window.
24 1340: 
24 1341: If you don't have 'gnuplot' installed, here is the same plot in 'plotly', shown in the browser.
24 1342: The data in the above script is used by utilising the tag '#tag1'
24 1343: 
24 1344: ```html //plotly
24 1345: <!-- '''html //test using plotly -->
24 1346:  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
24 1347: <div id="plot" style="width:80%;height:500px"></div>
24 1348: <script>
24 1349: let lm='lines+markers'
24 1350: let a=[`include  #tag1`] //hover here to see the data from the previous script
24 1351: let x1=Array(a.length/2).fill(0).map((x,i) => a[i*2])
24 1352: let y1=Array(a.length/2).fill(0).map((x,i) => a[i*2+1])
24 1353: plot1 = document.getElementById('plot');
24 1354: Plotly.plot( plot1, [{ x: x1, y: y1, mode: lm, name:'pascal'}]);
24 1355: </script>
24 1356: <a href="https://plotly.com/javascript/">plotly.js documentation</a>
24 1357: ```
24 1358: 
24 1359: ---
24 1360: ### Bash & zsh
24 1361: 
24 1362: Use `zsh` to run zsh, or `zsh {cmd}` to also run in *mpe*
24 1363: 
24 1364: ```zsh # (macos) show current directory
24 1365: # '''zsh # (macos) show current directory
24 1366: pwd
24 1367: ```
24 1368: >      Test output:
24 1369: >      /Users/rmzetti/Github/hover-exec
24 1370: 
24 1371: Use `bash` to run bash, or `bash {cmd}` to also run in *mpe*
24 1372: 
24 1373: ```bash # (macos, linux, wsl) show current directory
24 1374: # '''bash # (macos, linux) show current directory
24 1375: pwd
24 1376: ls -l
24 1377: ```
24 1378: >      Test output:
24 1379: >      /Users/rmzetti/Github/hover-exec
24 1380: >      total 22
24 1381: >      drwxr-xr-x ... etc.
24 1382: 
24 1383: Can also use bash commands direct, since for macos/linux/wsl bash is the default shell for child-process
24 1384: `ls -al "%g"` //list temp directory files (in the hover message, %e, %f etc are expanded)
24 1385: 
24 1386: Hover-exec can also use `zsh` as the default by setting `scripts.os="mac (zsh)"` rather than the child-process default `bash` which is used if `scripts.os="mac (auto)"` (if changed, *vscode* may need a restart)
24 1387: 
24 1388: ---
24 1389: ### Powershell
24 1390: 
24 1391: Use `pwsh` to run powershell, or `pwsh {cmd}` to also run in *mpe*
24 1392: 
24 1393: ```pwsh # (windows) random number, show current directory
24 1394: pwd
24 1395: ```
24 1396: >      Test output:
24 1397: >      Path
24 1398: >      ----
24 1399: >      C:\Users\rmzetti\GitHub\hover-exec
24 1400: 
24 1401: Can also get in-line results:
24 1402: 
24 1403: ```pwsh
24 1404: # '''pwsh {cmd}
24 1405: Get-Random -Min 0.0 -Max 1.0  =>> 
24 1406: "current dir: "+(pwd)  =>> 
24 1407: ```
24 1408: >      Test output is in-line.
24 1409: 
24 1410: Note that pwsh can be set as the default windows shell by setting `scripts.os="win (pwsh)"` in settings.json. Then powershell commands can be issued direct, eg.
24 1411: `[System.Environment]::OSVersion.Version` //only works if `scripts.os="win (pwsh)"`
24 1412: 
24 1413: Instead if the shell is the default (cmd), ie. `scripts.os="win (auto)"`, use
24 1414: `pwsh [System.Environment]::OSVersion.Version`
24 1415: `ver` //better for the default shell (cmd)
24 1416: >      Test output: both previous commands indicate (different format)
24 1417: >      Microsoft Windows [Version 10.0.22581.100]
24 1418: which would be great, except that I'm actually running Windows 11.. c'est la Microsoft.
24 1419: 
24 1420: ---
24 1421: ### Cmd
24 1422: 
24 1423: Cmd executes cmd.exe in Windows and runs a batch file with contents from the code block.
24 1424: 
24 1425: ```cmd
24 1426: @pwd
24 1427: @echo "hello world 3"
24 1428: ```
24 1429: >      Test output:
24 1430: >      c:\Users\..\GitHub\hover-exec
24 1431: >      "hello world 3"
24 1432: 
24 1433: Because cmd.exe is the default windows child-process, if the default is being used, one-liners can directly exec cmd commands:
24 1434: 
24 1435: `pwd & @echo "done"` //direct execution of cmd commands in one-liners
24 1436: >      Test output:
24 1437: >      c:\Users\...\GitHub\hover-exec
24 1438: >      "done"
24 1439: 
24 1440: ---
24 1441: ## Chaining execution code blocks
24 1442: 
24 1443: Here a javascript code block produces output in the form of an `output:gnuplot` labelled code block. This block has *id* `output` and so will be replaced if the javascript is executed again. Because it also has *cmdid* `gnuplot` it can be directly executed in the usual ways to produce the plot.
24 1444: 
24 1445: ```js  //takes from 1-10 sec to run - the output is a gnuplot code block
24 1446: // '''js //example to show chaining output to gnuplot
24 1447: function xrange() {
24 1448:   let x1 = _.range(0, 6.1, 6 / 19);
24 1449:   let x = math.round(math.exp(math.multiply(x1, math.log(10))));
24 1450:   return x;
24 1451: }
24 1452: let x = xrange();
24 1453: let j = 0,
24 1454:   n = 0,
24 1455:   ii = 0;
24 1456: let tim = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
24 1457: for (ii = 0; ii < x.length; ii++) {
24 1458:   await status('loop ' + ii); //status bar rhs
24 1459:   n = x[ii];
24 1460:   let rr = _.range(0, n),
24 1461:     m = 1,
24 1462:     i = 0,
24 1463:     t1 = 0;
24 1464:   for (i = 0; i < rr.length; i++) {
24 1465:     rr[i] = math.random();
24 1466:   }
24 1467:   let rr1 = rr,
24 1468:     rr2 = rr;
24 1469:   if (n < 100) {
24 1470:     m = 10000;
24 1471:   } else if (n < 5000) {
24 1472:     m = 1000;
24 1473:   } else if (n < 20000) {
24 1474:     m = 500;
24 1475:   } else {
24 1476:     m = 100;
24 1477:   }
24 1478:   m =m/5; //adjust m to adjust time taken
24 1479:   t1 = moment.now();
24 1480:   for (i = 0; i < m; i++) {
24 1481:     rr = math.add(math.dotMultiply(rr1, rr2), rr1);
24 1482:   }
24 1483:   t1 = (moment.now() - t1) / n / m / 1000; //msec->sec
24 1484:   tim[j++] = 2 / t1 / 1e6;
24 1485: }
24 1486: status('');
24 1487: console.log('output :gnuplot'); //the backticks are not required, they will be inserted
24 1488: console.log('#tag_speed'); //inserting an id tag allows other scripts to use the data
24 1489: console.log('$speed << EOD');
24 1490: for (ii = 0; ii < x.length; ii++) {
24 1491:   console.log(x[ii], tim[ii]);
24 1492: }
24 1493: console.log('EOD');
24 1494: console.log('#tag_speed'); //same id tag at end of data
24 1495: console.log('set logscale x');
24 1496: console.log('plot "$speed" w lp title "speed"');
24 1497: ```
24 1498: ```output :gnuplot
24 1499: #tag_speed
24 1500: $speed << EOD
24 1501: 1 0.17391304347826086
24 1502: 2 0.5714285714285715
24 1503: 4 1.2307692307692308
24 1504: 9 2.3999999999999995
24 1505: 18 4.799999999999999
24 1506: 38 8.941176470588236
24 1507: 78 13.565217391304348
24 1508: 162 21.6
24 1509: 336 19.2
24 1510: 695 21.384615384615387
24 1511: 1438 23.008
24 1512: 2976 23.808
24 1513: 6158 25.658333333333335
24 1514: 12743 24.98627450980392
24 1515: 26367 15.066857142857144
24 1516: 54556 18.493559322033896
24 1517: 112884 19.462758620689655
24 1518: 233572 18.21224171539961
24 1519: 483293 18.254693106704437
24 1520: 1000000 17.722640673460347
24 1521: EOD
24 1522: #tag_speed
24 1523: set logscale x
24 1524: plot "$speed" w lp title "speed"
24 1525: ```
24 1526: >      Test output is the plot.
24 1527: 
24 1528: ---
24 1529: ## Including tagged sections
24 1530: 
24 1531: The following line in a code block
24 1532: 
24 1533:   `include #tag_speed` // hover to view the data (which is in the above code block)
24 1534: 
24 1535: will include a group of lines elsewhere in the file surrounded with the '#tag_speed' tag (lines need not be in a code block).
24 1536: 
24 1537: To see what will be included, hover over the tag reference in the `include` line. Note that:
24 1538: 
24 1539: 1. The actual tags must either stand alone in a line, or end the line (eg. tags can have comment markers in front of them)
24 1540: 2. To include lines from another file use the format
24 1541: >      `include file_path/name #tag`
24 1542: >      nb. file_path can include command variables %c, %d, %g (workspace, current or temp folder)
24 1543: >      If the tag is empty (ie. just #) the whole file is used - recursive is not supported
24 1544: 
24 1545: Here is an example:
24 1546: 
24 1547: ```gnuplot
24 1548: # '''gnuplot
24 1549: $speed <<EOD
24 1550:   `include %d/misc_tests.md #p1`     // hover to view the data in misc_test.md
24 1551: EOD
24 1552: set logscale x
24 1553: plot "$speed" w lp title "speed"
24 1554: ```
24 1555: >      Test output is the plot.
24 1556: 
24 1557: Or use 'plotly' for the same example data:
24 1558: 
24 1559: ```html //plotly
24 1560: <!-- '''html //test using plotly -->
24 1561:  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
24 1562: <div id="plot" style="width:70%;height:400px"></div>
24 1563: <script>
24 1564: let lm='lines+markers'
24 1565: let a=[ `include  %d/misc_tests.md#p1` ]   //note *include* is inside the array designator square brackets
24 1566: let x=Array(a.length/2).fill(0).map((x,i) => Math.log10(a[i*2]))
24 1567: let y1=Array(a.length/2).fill(0).map((x,i) => a[i*2+1])
24 1568: plot1 = document.getElementById('plot');
24 1569: Plotly.plot( plot1, [{ x: x, y: y1, mode: lm, name:'pascal' },]);
24 1570: </script>
24 1571: <a href="https://plotly.com/javascript/">plotly.js documentation</a>
24 1572: ```
24 1573: >      Test output is the plot.
24 1574: 
24 1575: When using javascript (vm, eval, node or html) it is important to note that `console.log` requires the use of backticks around multiline strings.
24 1576: So when using include, the following is required:
24 1577: 
24 1578: ```js
24 1579: console.log(` `include #tag_speed` `)
24 1580: ```
24 1581: > Test output: 
24 1582: >       $speed << EOD
24 1583: >      1 0.21052631578947367
24 1584: >      ...
24 1585: >      EOD
24 1586: 
24 1587: The internal backticks are disposed of in hover-exec's pre-processing of the `include` so javascript will not see them.
24 1588: The spaces outside the `include..` above are for clarity only - they aren't required.
24 1589: 
24 1590: ---
24 1591: ## Using scripts via REPLs
24 1592: 
24 1593: Scripts can also be run using their REPL version, if this is available - eg. for node, lua, octave, scilab, r, julia. For REPLs, successive script execution will recognise previously defined variables and functions.
24 1594: 
24 1595: To indicate the REPL is to be used, two colons must follow the code block id, which then has the form:
24 1596: 
24 1597:       '''id1 :id2 :restart //comments
24 1598: 
24 1599: where 'id1' defines the syntax highlighting to be used, 'id2' if present defines the script to be used, the second colon indicates the REPL is to be used, and 'restart' if present indicates the REPL is to be restarted (all previously declared script variables and functions deleted).
24 1600: 
24 1601: The currently 'active' REPL can be directly killed with the one-liner:
24 1602: 
24 1603: `js:eval repl.kill()` //kills active REPL (but normally use :restart)
24 1604: 
24 1605: Each of the script REPL examples below shows a 'restart' script followed by a REPL continuation script which shows that the script variables defined in the 'restart' script are still available.
24 1606: 
24 1607: ---
24 1608: ### Python REPL
24 1609: 
24 1610: The first script uses 'restart' to ensure previous script variables are removed. 
24 1611: 
24 1612: ```python ::restart
24 1613: # '''python ::restart  # the two colons indicate the REPL is to be used, 'restart' resets the REPL
24 1614: # '''python : python3: restart # alternative to use 'python3' as start command
24 1615: from time import time
24 1616: t=time()
24 1617: b=0
24 1618: for c in range(600):
24 1619:   for a in range(10000):
24 1620:     b+=1
24 1621:   b+=1
24 1622: time()-t
24 1623: print("b="+str(b))   # using print avoids quote marks
24 1624: ```
24 1625: >      Test output:
24 1626: >      0.3948814868927002
24 1627: >      b= 6000600
24 1628: 
24 1629: The second script can use script variables defined in the first script (and any other python REPL scripts). Multiple executions (use the keyboard shortcut Alt+/ or Opt+/ with the cursor inside the script to make it easy) will update the variables.
24 1630: 
24 1631: ```python::
24 1632: # python::repl   # the two colons indicate the REPL is to be used, 'repl' can be omitted.
24 1633: # python :python3:  # use this instead to use 'python3' as start command
24 1634: from time import time
24 1635: b=>> 
24 1636: b=b+1 # b is successively updated with each run
24 1637: time()-t
24 1638: "b",b          # note 'print' not necessary when using repl
24 1639: print("b="+str(b)) # but using print gives better control
24 1640: ```
24 1641: >      Test output - after a few runs
24 1642: >      17.39616107940674
24 1643: >      ('b', 6000605)
24 1644: >      b=6000605
24 1645: 
24 1646: ---
24 1647: ### Julia REPL
24 1648: 
24 1649: The first script uses 'restart' to ensure previous script variables are removed. 
24 1650: 
24 1651: ```julia ::restart
24 1652: # '''julia ::restart
24 1653: using LinearAlgebra; _
24 1654: x=rand(Float64); _   # _ suppresses output in the Julia REPL
24 1655: a=rand(Float64,3); _
24 1656: # string("a=",a,"\nx=",x)  # using 'print' instead avoids quotes in the output
24 1657: print(string("a'*a=",dot(a,a),"\nx=",x))
24 1658: ```
24 1659: >      Test output:
24 1660: >      a'*a=1.6390404679429986
24 1661: >      x=0.364102954954058
24 1662: 
24 1663: The second script can use script variables defined in the first script (and any other julia REPL scripts). There is no need to repeat 'using LinearAlgebra' if previously used (as in the restart script above)
24 1664: 
24 1665: ```julia ::
24 1666: # '''julia ::  # the two colons indicate the REPL is to be used
24 1667: a=a.+1;_           # _ suppresses output in the Julia REPL
24 1668: x=x+1;_
24 1669: print(dot(a,a),'\n',x) # NB no need to repeat 'using LinearAlgebra' to use 'dot()` because REPL
24 1670: ```
24 1671: >      Test output - after a few runs
24 1672: >      136.07768737792787
24 1673: >      6.364102954954058
24 1674: 
24 1675: ---
24 1676: ### Lua REPL
24 1677: 
24 1678: The first script uses 'restart' to ensure previous lua script variables are removed.
24 1679: 
24 1680: ```lua::restart
24 1681: -- '''lua::restart       -- two colons indicate REPL is to be used
24 1682: --    or for example,  '''lua:lua54:restart to use lua54
24 1683: m=1e7; n=0.01; tt = os.clock()
24 1684: -- lua REPL does not give output for assignment statements
24 1685: tt=>>0.977
24 1686: for ii=1,m do
24 1687:   n=n*ii; n=n+1; n=n/ii
24 1688: end
24 1689: tt1=os.clock()-tt
24 1690: tt1=>>0.414
24 1691: tt1
24 1692: ```
24 1693: >      Test output (also in-line):
24 1694: >      0.414
24 1695: 
24 1696: The second script can use script variables defined in the first script (and any other lua REPL scripts run since a 'restart').
24 1697: 
24 1698: ```lua::
24 1699: -- '''lua::  -- two colons indicate REPL is to be used
24 1700: --    or for example '''lua:lua54:  to use lua54
24 1701: tt1=tt1+1
24 1702: tt1 =>>1.414
24 1703: os.clock()-tt =>>7.577
24 1704: ```
24 1705: >      Test output after a couple of runs is in-line
24 1706: 
24 1707: ---
24 1708: ### Node REPL
24 1709: 
24 1710: The first script uses 'restart' to ensure previous node script variables are removed. 
24 1711: 
24 1712: ```js:node:restart
24 1713: // '''js:node:restart    //two colons for REPL, the id 'js' is just for syntax highlight
24 1714: let a=0,b=0,c=0       //define and initialise a,b,c
24 1715: [a,b,c] =>>0,0,0
24 1716: 'hello: '+[a,b,c]
24 1717: ```
24 1718: >      Test output:
24 1719: >      'hello: 0,0,0'
24 1720: 
24 1721: The second script can use node script variables defined in the first script (and any other node REPL scripts run since a 'restart').
24 1722: 
24 1723: ```js:node:
24 1724: // '''js:node:restart  //two colons for REPL, js just for syntax highlight
24 1725:                     //repl vars updated if this block is repeated
24 1726: a+=1;b+=10;c+=100;_      // _ suppresses output
24 1727: [a,b,c] =>>4,40,400
24 1728: 'goodbye: '+[a,b,c]
24 1729: ```
24 1730: >      Test output - after a few runs
24 1731: >      'goodbye: 4,40,400'
24 1732: 
24 1733: ---
24 1734: ### Scilab REPL
24 1735: 
24 1736: The first script uses 'restart' to ensure previous scilab variables are removed. 
24 1737: 
24 1738: ```js:scilab:restart
24 1739: // '''js:scilab:restart    //two colons for REPL, js just for syntax highlight
24 1740: tic();a=1.1;m=1000000; //1e6
24 1741: for x=1:1:m
24 1742:   a=a*x;a=a+1.1;a=a/x;
24 1743: end
24 1744: t=toc(); //scilab REPL produces no output if statement ends with ;
24 1745: mprintf('Time: %.2f sec',t)
24 1746: ```
24 1747: >      Test output:
24 1748: >      Time: 1.26 sec
24 1749: 
24 1750: The second script can use scilab variables defined in the first script (and any other scilab REPL scripts run since a 'restart').
24 1751: 
24 1752: ```js:scilab:
24 1753: // '''js:scilab:    //two colons for REPL, js just for syntax highlight
24 1754: mprintf('a equals %.f',a)
24 1755: mprintf('t equals %.2f',t)
24 1756: a=a+1; // the ; suppresses output in the scilab REPL
24 1757: ```
24 1758: >      Test output - after a few runs
24 1759: >      a equals 22
24 1760: >      t equals 1.26
24 1761: 
24 1762: ---
24 1763: ### Octave REPL
24 1764: 
24 1765: The first script uses 'restart' to ensure previous octave variables are removed. 
24 1766: 
24 1767: ```python:octave:restart
24 1768: # '''python:octave:restart    # two colons for REPL, python just for syntax highlight
24 1769: a=1.0; t=time; nrpt=0;
24 1770: m=1000000; #1e6
24 1771: for i=1:m
24 1772:   a=a*i; a=a+1.1; a=a/i;
24 1773: endfor
24 1774: t=time-t; # the ; suppresses output in the octave REPL
24 1775: disp(strcat('time= ',num2str(t),' sec'))
24 1776: disp(strcat('speed= ',num2str(m/t/1e6),' million iterations per sec'))
24 1777: ```
24 1778: >      Test output:
24 1779: >      time=1.6665 sec
24 1780: >      speed=0.60006 million iterations per sec
24 1781: 
24 1782: ```python:octave:
24 1783: # '''python:octave:    # two colons for REPL, python just for syntax highlight
24 1784: nrpt+=1
24 1785: disp(strcat('time= ',num2str(t),' sec'))
24 1786: disp(strcat('speed= ',num2str(m/t/1e6),' million iterations per sec'))
24 1787: ```
24 1788: >      Test output - after a few runs
24 1789: >      nrpt = 3
24 1790: >      time=1.6665 sec
24 1791: >      speed=0.60006 million iterations per sec
24 1792: 
24 1793: ---
24 1794: ### R (rterm) REPL
24 1795: 
24 1796: The first script uses 'restart' to ensure previous rterm variables are removed. 
24 1797: 
24 1798: ```python:rterm:restart
24 1799: # '''python :rterm :restart    # two colons for REPL, python just for syntax highlight
24 1800: a <- 7*7-7
24 1801: a=>> 42 
24 1802: print(noquote(paste('the meaning of life is',a)))
24 1803: ```
24 1804: >      Test output:
24 1805: >      the meaning of life is 42
24 1806: 
24 1807: The second script can use rterm variables defined in any other rterm REPL scripts run since a 'restart'.
24 1808: 
24 1809: ```python:rterm:
24 1810: print(noquote(paste('the meaning of life is',a)))
24 1811: ```
24 1812: >      Test output:
24 1813: >      the meaning of life is 42
24 1814: 
24 1815: 
24 1816: Here is a slightly more complex rterm REPL script
24 1817: 
24 1818: ```rterm::restart
24 1819: # '''rterm::restart    # two colons for REPL, no syntax highlight
24 1820: require(tcltk)
24 1821: x <- 1:10              # data for plots
24 1822: y1 <- x*x
24 1823: y2  <- 2*y1
24 1824: ```
24 1825: >      No output, check plots by executing the next code block
24 1826: 
24 1827: Plot the data set up above (this is a windows example)
24 1828: 
24 1829: ```python:rterm: #plotting the above data
24 1830: # '''python:rterm:    //two colons for REPL, python just for syntax highlight
24 1831: windows()
24 1832: # Stair steps plot
24 1833: plot(x, y1, type = "S")
24 1834: # Lines & points plot
24 1835: windows()
24 1836: plot(x,y1,type="b",pch=19,col="red",xlab= "x",ylab="y")
24 1837: lines(x, y2,pch=18,col="blue",type="b",lty=2)
24 1838: msgBox<-tkmessageBox(title="R plots",message="Close plots FIRST, then this message box!")
24 1839: ```
24 1840: >      No output, just the plots..
24 1841: 
24 1842: NB. Use this if the plots remain:
24 1843: `js:eval repl.kill()` //kills active repl and all associated script variables
24 1844: 
24 1845: ---
24 1846: ### Check for active REPLs
24 1847: 
24 1848: The following *eval* script can be used to check for active REPLs
24 1849: 
24 1850: ```js:eval
24 1851: // '''js:eval
24 1852: //chRepl is a *hover-exec* internal variable containing the active REPLs
24 1853: chRepl.length=>> 1
24 1854: let i=chRepl.findIndex((el)=>el[1]===repl)
24 1855: i=>> 0
24 1856: chRepl[i][0]=>> rterm
24 1857: ```
24 1858: >      Test output - see in-line output
24 1859: 
24 1860: ---
24 1861: ## One-liners and quickmath
24 1862: 
24 1863:  *One-liners* starting with a single backtick *in column 1* and ending with a single backtick can also be executed with hover-click, or `alt-/` or `opt-/`.
24 1864:  The following command variables can be used (the derived path will be seen in the hover):
24 1865:  %c current workspace folder path, %d current file path, %e current file path+name,
24 1866:  %f temp file path+name, %g temp file path, %n temp file name
24 1867:  %h the *hover-exec* install directory.
24 1868: 
24 1869: Comments can be added after the closing quote.
24 1870: See [Configuration settings](#configuration-settings) for more about %c etc.
24 1871: 
24 1872: Another useful facility is  *quickmath*. A math expression of the form `5-sqrt(2)=` (does not need to start in column 1) will be evaluated on hover (using  *mathjs* `math.evaluate(..)`) and the result will be shown immediately in the hover message. Clicking the hover result will copy it to the clipboard. Note that the expression is surrounded by single backticks, and there needs to be '=' before the last backtick (essentially to stop popups for other backtick quoted strings).
24 1873: 
24 1874: ### Default shell simple command execution:
24 1875: (result depends on the default shell for vscode on your system)
24 1876: 
24 1877: `pwd` zsh, bash, pwsh, cmd \
24 1878: `ls` zsh,bash, pwsh \
24 1879: `dir` cmd
24 1880: `pwsh $psversiontable` check powershell version
24 1881: 
24 1882: ### exec notepad with file in current file's folder:
24 1883: 
24 1884: `notepad "%d/misc_tests.md"` --windows \
24 1885: `open -a textedit "%d/misc_tests.md"` --mac \
24 1886: `gedit "%d/misc_tests.md"` --linux, wsl \
24 1887: `xedit "%d/misc_tests.md"` --linux, wsl
24 1888: 
24 1889: ### exec notepad with temp file (%f):
24 1890: 
24 1891: `open -a textedit "%f"` --mac \
24 1892: `notepad "%f"` --windows \
24 1893: `xedit "%f"` --linux, wsl
24 1894: 
24 1895: ### open another instance of vscode:
24 1896: 
24 1897: `code -n %c`
24 1898: `code -n %f` --windows, linux, wsl \
24 1899: `open -na "visual studio code"` --mac
24 1900: 
24 1901: ### explore files, view folders:
24 1902: 
24 1903: `open -a finder ~` mac 'home' \
24 1904: `open -a finder "%c"` mac to view current workspace folder in finder \
24 1905: `explorer ,` windows view 'ThisPC' \
24 1906: `explorer /select, "%E"` windows explorer - view current file's folder & select the file, needs %E not %e \
24 1907: `nemo "%d/README.md"` Linux mint view current file's folder & select file
24 1908: 
24 1909: ### other examples:
24 1910: 
24 1911: `devmgmt.msc` for windows show devices \
24 1912: `system_profiler SPHardwareDataType` for mac show hardware info \
24 1913: `html <script>location.href= 'https://whatamigoingtodonow.net/'</script>` windows default browser with href \
24 1914: `html <h1>Hello world!</h1>` windows default browser with some html \
24 1915: `safari <script>location.href= 'https://whatamigoingtodonow.net/'</script>` mac safari with href \
24 1916: `safari <h1>Hello world!</h1>` mac safari with some html \
24 1917: `firefox <script>location.href= 'https://whatamigoingtodonow.net/'</script>` linux firefox with href \
24 1918: `firefox <h1>Hello world!</h1>` linux firefox with some html \
24 1919: `chrome <script>location.href= 'https://whatamigoingtodonow.net/'</script>` wsl chrome with href
24 1920: 
24 1921: ### bash html & javascript
24 1922: 
24 1923: `"C:\Program Files\Google\Chrome\Application\chrome.exe" "%h/media/matplotlib_example.png"` //chrome with media or html file - can use %c etc in one-liners \
24 1924: `html <script>location.href='https://whatamigoingtodonow.net/'</script>` //browser with url \
24 1925: `html <h1 align='center' >workspace: %c</h1><br><h3 align='center' >this folder: /%d</h3>` \
24 1926: `js console.log(7*7-7)` \
24 1927: `js progress(''+(7*7-7),4000)` //quick calculator output via 4sec message
24 1928: 
24 1929: ---
24 1930: ### audio one-liners
24 1931: 
24 1932: Audio of Moruroa nuclear test 1996.
24 1933: Recorded by hydrophone 4600km away in New Zealand.
24 1934: Played much faster than real time (at least 8x).
24 1935: 
24 1936: `html <h2>French nuclear test Moruroa 1996</h2><audio id="a2" controls autoplay src="%h/media/fnt2b.mp3"/>` \
24 1937: `"c:\Program Files\Windows Media Player\wmplayer.exe" "%h/media/fnt2b.mp3"` \
24 1938: `pwsh start wmplayer "%h/media/fnt2b.mp3"`
24 1939: `pwsh start mpg123 -win min  "C:\Users\ralph\OneDrive\Documents\Notes\media\SH_realisation_installation_a.mp3"`
24 1940: 
24 1941: ---
24 1942: ### Windows one-liners
24 1943: 
24 1944: `start ms-settings:` \
24 1945: `start ms-settings:windowsupdate` \
24 1946: `start ms-settings:network` \
24 1947: `start ms-settings:personalization-start` \
24 1948: `start ms-settings:yourinfo` \
24 1949: `start ms-settings:powersleep` \
24 1950: `start ms-settings:privacy-activityhistory`
24 1951: 
24 1952: `control /name Microsoft.DevicesAndPrinters` \
24 1953: `control mouse` \
24 1954: `control /name Microsoft.ProgramsAndFeatures`
24 1955: 
24 1956: `pwsh explorer --% shell:::{ED7BA470-8E54-465E-825C-99712043E01C}` //godmode \
24 1957: `pwsh iex "& { $(irm https://aka.ms/install-powershell.ps1) } -UseMSI"` //update powershell \
24 1958: `pwsh (get-host).version` //show powershell version \
24 1959: >      Test output:
24 1960: >      Major  Minor  Build  Revision
24 1961: >      -----  -----  -----  --------
24 1962: >      7      2      3      -1
24 1963: 
24 1964: `devmgmt.msc` //devices \
24 1965: `mmc diskmgmt.msc` //disk management \
24 1966: `mmc azman.msc` Manage Authorization Stores \
24 1967: `mmc certlm.msc` Loads the list of certificates of the local computer. \
24 1968: `mmc certmgr.msc` Loads the list of certificates of the user \
24 1969: `mmc comexp.msc` Component Services, Event Viewer, and Services. \
24 1970: `mmc compmgmt.msc` Computer Management Includes Various System Tools \
24 1971: `mmc devmgmt.msc` Opens Device Manager to manage hardware and devices. \
24 1972: `mmc diskmgmt.msc` Disk Management \
24 1973: `mmc eventvwr.msc` Opens the Event Viewer \
24 1974: `mmc fsmgmt.msc` Loads the list of shared folders, sessions, and open files \
24 1975: `mmc gpedit.msc` Loads the Group Policy Editor to manage system policies \
24 1976: `mmc lusrmgr.msc` Manage local users and user groups. \
24 1977: `mmc perfmon.msc` Loads the Windows Performance Monitor \
24 1978: `mmc printmanagement.msc` Manage printers. \
24 1979: `mmc rsop.msc` List policies, full results only available through command line tool gpresult \
24 1980: `gpresult` The command line tool referred to above - this just loads help info \
24 1981: `mmc secpol.msc` Local Security Policies \
24 1982: `mmc services.msc` Loads the services manager \
24 1983: `mmc taskschd.msc` Task Scheduler \
24 1984: `mmc tpm.msc` Trusted Platform Module Management \
24 1985: `mmc wf.msc` Starts Windows Firewall with Advanced Security \
24 1986: `mmc wmimgmt.msc` Configure and Control the Windows Management Instrumentation Service.
24 1987: 
24 1988: ---
24 1989: ### Quickmath examples
24 1990: And finally, some *quickmath* expressions. As before these are surrounded with backticks. They do not have to start in col 1, but must have `=` just before the last backtick.
24 1991: When viewing in preview, the backticks are not visible. You will, of course , need to be in the  editor for quickmath to work. 
24 1992: 
24 1993: So `254cm in inches=` will show 100 inches in the hover message, using [*mathjs 'math.evaluate'*](https://mathjs.org/docs/reference/functions/evaluate.html).
24 1994: More examples:  `[1,2,3,4]*5=`,  `cos(45deg)=`,  `sin(0.81)^2+cos(0.81)^2=`,  `cos(pi/2)=`,  `sin([10,45,90] deg)=`,  `range(0,4,0.5)=`,  `(2+2i)*(1+2i)=` , `3:6=`, `1:0.1:5=`, `7*7-7=` .
24 1995: 
24 1996: NB. You can copy the answer in the hover to the clipboard with a click.
24 1997: 
24 1998: ---
24 1999: ## Configuration settings
24 2000: 
24 2001: ### What settings are there?
24 2002: 
24 2003: There are three main categories of configuration settings, *scripts*, *swappers* and *repls*.
24 2004: 
24 2005: - *scripts* provide the start-up commands for the *vscode* default shell to run script files in each of the script languages.
24 2006: - *swappers* enable in-line results byproviding a script command to output a result, labelled '$1', in the form '=>> $1'
24 2007: - *repls* enable a script language REPL to be utilised by *hover-exec* - there is an array of strings for each script language.
24 2008: 
24 2009: All configuration settings can be viewed in *vscode*'s configurations view for *hover-exec.
24 2010: 
24 2011: Several *hover-exec* command line variables are used. These can be viewed via the hover for an code block: clicking *[command variables]* will produce a list:
24 2012: 
24 2013: On windows the list looks like this
24 2014: - %c       workspace folder 'path': c:/Users/ ... 
24 2015: - %d       current file 'path': c:/Users/...
24 2016: - %e       current file 'path/name': c:/Users/.../readmore.md
24 2017: - %f.ext  temp file 'path/name.ext': c:/Users/.../AppData/Roaming/Code/User/globalStorage/rmzetti.hover-exec/temp.ext
24 2018: - %g       temp folder 'path': c:/Users/.../AppData/Roaming/Code/User/globalStorage/rmzetti.hover-exec
24 2019: - %h       hover-exec extension folder 'path': c:/Users/.../.vscode/extensions/rmzetti.hover-exec-0.7.1
24 2020: - %n.ext temp file 'name.ext': temp.js.ext, where ext is an extension (default is .txt)
24 2021: 
24 2022: So
24 2023: - `%f` provides the temporary file path & name
24 2024: - in addition, the 'ext switching' notation `%f.py`, switches the default `.md` to `.py` .
24 2025: 
24 2026: These may be used in 'href' and 'src' strings, but not with 'ext switching'.
24 2027: They can also be used in scripts, but they must be surrounded by backticks, ie. `%c` etc., and 'ext switching' is not available.
24 2028: You can hover over `%c` etc to see the actual paths used.
24 2029: 
24 2030: ### Viewing script settings using scripts
24 2031: 
24 2032: The following one-liner will provide an unsorted config list for 'scripts','repls' or 'swappers' depending on the parameter.
24 2033: `js console.log(config.get('scripts'))` //use 'scripts','repls','swappers' as the parameter
24 2034: >      Test output:
24 2035: >      {
24 2036: >        os: 'win (auto)',
24 2037: >        octave: 'octave "%f.m"',
24 2038: >        matlab: 'matlab -nodesktop -sd "%g.m/" -batch temp',
24 2039: >        rterm: 'rterm -q --no-echo -f "%f.r" ',
24 2040: >        r: 'r "%f.r" ',
24 2041: >        scilab: 'scilex -quit -nb -f "%f.sci" ',
24 2042: >        scilab_win: 'scilex -quit -nb -f "%f.sci" ',
24 2043: >        scilab_mac: 'scilab-cli -quit -nb -f "%f.sci" ',
24 2044: >      etc ...
24 2045: 
24 2046: Note that the settings assume the apps are on the PATH.
24 2047: The default *vscode/hover-exec* shell exec launcher is *cmd* for windows, and *bash* for mac/linux/wsl.
24 2048: Hence, for example, on MacOS:
24 2049:   1. the PATH should be updated in '~/.bashrc'
24 2050:   2. if the shell is changed to 'zsh' in the config 'os', ie "os":"mac (zsh)", then the PATH is set in '~/.zshrc'
24 2051:   3. nb. don't use ~ in 'zshrc' paths 
24 2052: 
24 2053: The following js script will produce a sorted list of included script startup commands:
24 2054: 
24 2055: ```js //show scripts config settings, sorted
24 2056: // '''js //show scripts config settings, sorted
24 2057: sort = (o) =>
24 2058:   Object.keys(o)
24 2059:     .sort()
24 2060:     .reduce((r, k) => ((r[k] = o[k]), r), {});
24 2061: console.log(sort(config.get('scripts')));
24 2062: ```
24 2063: >      Test output:
24 2064: >      {
24 2065: >      bash: 'bash "%f.sh"',
24 2066: >      buddvs: 'buddvs "%f.txt" ',
24 2067: >      chrome: 'google-chrome-stable "%f.html"',
24 2068: >      eval: 'eval',
24 2069: >      firefox: 'firefox "%f.html"',
24 2070: >      gnuplot: 'gnuplot -p -c "%f.gp"',
24 2071: >      go: 'go run "%f.go"',
24 2072: >      html: '"%f.html"',
24 2073: >      html_lnx: 'firefox "%f.html"',
24 2074: >      html_mac: 'open "%f.html"',
24 2075: >      html_win: '"%f.html"',
24 2076: >      html_wsl: 'firefox "%f.html"',
24 2077: >      javascript: 'node "%f.js"',
24 2078: >      js: 'vm',
24 2079: >      julia: 'julia "%f.jl"',
24 2080: >      julia_mac: 'julia "%f.jl"',
24 2081: >      lua: 'lua "%f.lua"',
24 2082: >      lua54: 'lua54 "%f.lua"',
24 2083: >      matlab: 'matlab -nodesktop -sd "%g.m/" -batch temp',
24 2084: >      node: 'node "%f.js"',
24 2085: >      octave: 'octave "%f.m"',
24 2086: >      os: 'win (auto)'
24 2087: >      pascal: 'fpc "%f.pas" -v0 && "gtemp" ',
24 2088: >      pwsh: 'set "NO_COLOR=1" & pwsh -f "%f.ps1" ',
24 2089: >      python: 'python "%f.py"',
24 2090: >      python3: 'python3 "%f.py"',
24 2091: >      r: 'r "%f.r" ',
24 2092: >      rterm: 'rterm -q --no-echo -f "%f.r" ',
24 2093: >      safari: 'open -a safari "%f.html"',
24 2094: >      scilab: 'scilex -quit -nb -f "%f.sci" ',
24 2095: >      scilab_lnx: 'scilab-cli -quit -nb -f "%f.sci" ',
24 2096: >      scilab_mac: 'scilab-cli -quit -nb -f "%f.sci" ',
24 2097: >      streamlit: 'streamlit run "%f.py" ',
24 2098: >      test: 'test -c "%f.tst"',
24 2099: >      ts: 'ts-node "%f.ts"',
24 2100: >      typescript: 'ts-node "%f.ts"',
24 2101: >      vm: 'vm',
24 2102: >      zsh: 'zsh -f "%f.sh"'
24 2103: >      }
24 2104: 
24 2105: Any of these configuration settingscan be changed to suit the system or setup in use by using *vscode* settings under the *hover-exec* extension
24 2106: 
24 2107: 
24 2108: ### Viewing a particular script setting
24 2109: 
24 2110: For any code block, the hover message includes *[config]*. Clicking this will produce an input box at the top of the editor where the config setting can be viewed and changed to suit your system. Changes made are saved in the normal configuration *settings.json* file. Here is an example code block:
24 2111: 
24 2112: ```python
24 2113: # '''python
24 2114: # this is python 'code' example for config check
24 2115: ```
24 2116: 
24 2117: To view the *script* setting, click *[config]* in the hover (top left):
24 2118: 
24 2119: >      Test output (appears in an input box at the top of the editor):
24 2120: >      python "%f.py"
24 2121: 
24 2122: If necessary this can be changed using the input box, eg. to *python3 "%f.py"*
24 2123: After the change, hover-clicking a python script will utilise the python3 command instead.
24 2124: 
24 2125: You can also use a script to change, add or undefine a config setting:
24 2126: 
24 2127: ### Add new script language
24 2128: 
24 2129: If there is a need to add a new scripting language, say `newlang`, this can be done using the settings configuration for *hover-exec*, and following the obvious patterns.
24 2130: 
24 2131: It can also be done using `vm` or `eval` since the  *vscode* configuration settings can be accessed with the scripts. First write a fenced code block labelled newlang.
24 2132: 
24 2133: ```newlang
24 2134: -- '''newlang
24 2135: -- a newlang comment line
24 2136: print(3-2)
24 2137: ```
24 2138: 
24 2139: Then hover over `newlang` and click *[config]*, In the input box at the top of the editor, enter the desired script startup command, using "%f.ext", with quotes and the correct .ext, as the script file to execute.
24 2140: 
24 2141: If the startup command is correct (eg. would work in a terminal window with an actual command file) the code block will execute as a new script.
24 2142: 
24 2143: The following one-liner can also be used to check the config for a script (try, for example, substituting 'python' for 'newlang')
24 2144: 
24 2145: `js console.log('config:',config.get('scripts.newlang'))`
24 2146: >      Test output:
24 2147: >      config: undefined
24 2148: 
24 2149: ---
24 2150: 
24 2151: ###  'Zero configuration' commands
24 2152: 
24 2153: There is, in fact, no actual requirement to include a script startup command in the configuration file for the script to be used - they just make the code block command simpler. Essentially, if the command works in the terminal, and returns output to the terminal, then it will work as a *hover-exec* command.
24 2154: 
24 2155: For example, on windows, *hover-exec* will run the following script as a `cmd.exe` `.bat` file, because `.bat` files autostart `cmd.exe` :
24 2156: 
24 2157: ```%f.bat   //demo cmd execution (windows) without script setup
24 2158: :: %f.bat   //demo cmd execution (windows) without script setup
24 2159: :: two colons is a non-printing cmd.exe comment
24 2160: @echo off
24 2161: cd
24 2162: echo Congratulations! Your batch file was executed successfully.
24 2163: ```
24 2164: >      Test output:
24 2165: >      c:\Users\rmzetti\GitHub\hover-exec
24 2166: >      Congratulations! Your batch file was executed successfully.
24 2167: 
24 2168: On macos
24 2169: 
24 2170: ```open -a textedit "%f.txt"
24 2171: '''open -a textedit "%f.txt"
24 2172: This text can be viewed in the text editor
24 2173: and saved as required -
24 2174: Note: changes will not be reflected back into this code block.
24 2175: ```
24 2176: 
24 2177: On linux/wsl
24 2178: 
24 2179: ```xedit %f.txt
24 2180: '''xedit %f.txt
24 2181: This text can be viewed in the text editor
24 2182: and saved as required -
24 2183: Note: changes will not be reflected back into this code block.
24 2184: ```
24 2185: 
24 2186: ---
24 2187: 
24 2188: ### Other vscode config settings
24 2189: 
24 2190: Other  *vscode* configuration settings can also be accessed, eg through the following one-liner:
24 2191: 
24 2192: `js console.log('editor font size=',vscode.workspace.getConfiguration('').get('editor.fontSize'))`
24 2193: >      Test output:
24 2194: >      editor font size= 13
24 2195: 
24 2196: ```js
24 2197: // '''js //full code block implementation
24 2198: let c = vscode.workspace.getConfiguration('');
24 2199: console.log('editor font size= ' + c.get('editor.fontSize'));
24 2200: //c.update("editor.fontSize",12,1)  //uncomment this to change the editor font size
24 2201: ```
24 2202: >      Test output:
24 2203: >      editor font size= 13
24 2204: 
24 2205: ---
24 2206: 
24 2207: ### In-line output using *swappers*
24 2208: 
24 2209: The strings in the *hover-exec* config called `swappers` enable *hover-exec* to move the output of a line so that it appears  *in-line *, within the code block itself.
24 2210: 
24 2211: As an example, the  *swapper* for javascript (`vm`, `eval` & `node`) is `console.log('=>>'+($1))` which takes `$1` (produced via a regex) and prints it starting with the string `=>>`.
24 2212: 
24 2213: The  *swapper* for  *julia* is `println(string(\"=>>\",$1))`, where the double quotes required by  *julia* have to be escaped `\"` because they will be part of a  *json* string in the settings.json file.
24 2214: 
24 2215: Try `edit %h/test/misc_tests#view.*swappers` for more info and examples.
24 2216: 
24 2217: ## Release Notes and Known Issues
24 2218: 
24 2219: This is a beta version.
24 2220: 
24 2221: Note that in all the demos above, except  *js:vm* and  *js:eval* which allow definition of  *global* variables and functions, the script starts from scratch when the code block is executed. In other words, assigned variables do not carry over into the next script execution. This kind of approach is best suited for small scripts to demonstrate or highlight language features, provide quick reference, or show comparisons between scripting languages.
24 2222: 
24 2223: Scripts can also be run using their REPL version, if this is available - eg. for node, lua, octave, scilab, r, julia - see above [using scripts via REPL](#using-scripts-via-repl), or `edit %e#using.*repls`. For REPLs, successive script execution will recognise previously defined variables and functions.
24 2224: 
24 2225: There is also an  *include* capability, known as *include* (to distinguish from  *includes* in scripts) - see [Including tagged sections using include](#including-tagged-sections-using-include) for details and examples.
24 2226: 
24 2227: Matlab takes a substantial amount of time to run from code block exec (eg. the startup time for matlab to run a 'batch file' is about 5s on a recent Ryzen laptop). Although this is a Matlab startup issue, it undermines the use of `matlab` within *hover-exec*. Also I haven't been able to get a Matlab based REPL working (unlike, for example, Octave, which is fairly straightforward.) 
24 2228: 
24 2229: The startup times for other included scripts are generally fairly minimal (see the demo gif above).
24 2230: 
24 2231: ---
24 2232: 
24 2233: Initial beta release was 0.6.1
24 2234: Published using: vsce package/publish
24 2235: 
24 2236: 
24 2237: 
25 1: a
25 2: able
25 3: about
25 4: above
25 5: across
25 6: after
25 7: again
25 8: against
25 9: all
25 10: almost
25 11: also
25 12: am
25 13: among
25 14: an
25 15: and
25 16: any
25 17: are
25 18: aren't
25 19: as
25 20: at
25 21: be
25 22: because
25 23: been
25 24: before
25 25: being
25 26: below
25 27: between
25 28: both
25 29: but
25 30: by
25 31: can
25 32: can't
25 33: cannot
25 34: could
25 35: couldn't
25 36: dear
25 37: did
25 38: didn't
25 39: do
25 40: does
25 41: doesn't
25 42: doing
25 43: don't
25 44: down
25 45: during
25 46: each
25 47: either
25 48: else
25 49: ever
25 50: every
25 51: few
25 52: for
25 53: from
25 54: further
25 55: get
25 56: got
25 57: had
25 58: hadn't
25 59: has
25 60: hasn't
25 61: have
25 62: haven't
25 63: having
25 64: he
25 65: he'd
25 66: he'll
25 67: he's
25 68: her
25 69: here
25 70: here's
25 71: hers
25 72: herself
25 73: him
25 74: himself
25 75: his
25 76: how
25 77: how's
25 78: however
25 79: i
25 80: i'd
25 81: i'll
25 82: i'm
25 83: i've
25 84: if
25 85: in
25 86: into
25 87: is
25 88: isn't
25 89: it
25 90: it's
25 91: its
25 92: itself
25 93: just
25 94: least
25 95: let
25 96: let's
25 97: like
25 98: likely
25 99: me
25 100: might
25 101: more
25 102: most
25 103: must
25 104: mustn't
25 105: my
25 106: myself
25 107: neither
25 108: no
25 109: nor
25 110: not
25 111: of
25 112: off
25 113: often
25 114: on
25 115: once
25 116: only
25 117: or
25 118: other
25 119: ought
25 120: our
25 121: ours
25 122: ourselves
25 123: out
25 124: over
25 125: own
25 126: rather
25 127: said
25 128: say
25 129: says
25 130: same
25 131: shan't
25 132: she
25 133: she'd
25 134: she'll
25 135: she's
25 136: should
25 137: shouldn't
25 138: since
25 139: so
25 140: some
25 141: such
25 142: than
25 143: that
25 144: that's
25 145: the
25 146: their
25 147: theirs
25 148: them
25 149: themselves
25 150: then
25 151: there
25 152: there's
25 153: these
25 154: they
25 155: they'd
25 156: they'll
25 157: they're
25 158: they've
25 159: this
25 160: those
25 161: through
25 162: tis
25 163: to
25 164: too
25 165: twas
25 166: under
25 167: until
25 168: up
25 169: us
25 170: very
25 171: wants
25 172: was
25 173: wasn't
25 174: we
25 175: we'd
25 176: we'll
25 177: we're
25 178: we've
25 179: were
25 180: weren't
25 181: what
25 182: what's
25 183: when
25 184: when's
25 185: where
25 186: where's
25 187: which
25 188: while
25 189: who
25 190: who's
25 191: whom
25 192: why
25 193: why's
25 194: will
25 195: with
25 196: won't
25 197: would
25 198: wouldn't
25 199: yes
25 200: yet
25 201: you
25 202: you'd
25 203: you'll
25 204: you're
25 205: you've
25 206: your
25 207: yours
25 208: yourself
25 209: yourselves
25 210: 
26 1: a
26 2: about
26 3: above
26 4: across
26 5: after
26 6: again
26 7: against
26 8: all
26 9: almost
26 10: alone
26 11: along
26 12: already
26 13: also
26 14: although
26 15: always
26 16: among
26 17: an
26 18: and
26 19: another
26 20: any
26 21: anybody
26 22: anyone
26 23: anything
26 24: anywhere
26 25: are
26 26: area
26 27: areas
26 28: around
26 29: as
26 30: ask
26 31: asked
26 32: asking
26 33: asks
26 34: at
26 35: away
26 36: b
26 37: back
26 38: backed
26 39: backing
26 40: backs
26 41: be
26 42: became
26 43: because
26 44: become
26 45: becomes
26 46: been
26 47: before
26 48: began
26 49: behind
26 50: being
26 51: beings
26 52: best
26 53: better
26 54: between
26 55: big
26 56: both
26 57: but
26 58: by
26 59: c
26 60: came
26 61: can
26 62: cannot
26 63: case
26 64: cases
26 65: certain
26 66: certainly
26 67: clear
26 68: clearly
26 69: come
26 70: could
26 71: d
26 72: did
26 73: differ
26 74: different
26 75: differently
26 76: do
26 77: does
26 78: done
26 79: down
26 80: downed
26 81: downing
26 82: downs
26 83: during
26 84: e
26 85: each
26 86: early
26 87: either
26 88: end
26 89: ended
26 90: ending
26 91: ends
26 92: enough
26 93: even
26 94: evenly
26 95: ever
26 96: every
26 97: everybody
26 98: everyone
26 99: everything
26 100: everywhere
26 101: f
26 102: face
26 103: faces
26 104: fact
26 105: facts
26 106: far
26 107: felt
26 108: few
26 109: find
26 110: finds
26 111: first
26 112: for
26 113: four
26 114: from
26 115: full
26 116: fully
26 117: further
26 118: furthered
26 119: furthering
26 120: furthers
26 121: g
26 122: gave
26 123: general
26 124: generally
26 125: get
26 126: gets
26 127: give
26 128: given
26 129: gives
26 130: go
26 131: going
26 132: good
26 133: goods
26 134: got
26 135: great
26 136: greater
26 137: greatest
26 138: group
26 139: grouped
26 140: grouping
26 141: groups
26 142: h
26 143: had
26 144: has
26 145: have
26 146: having
26 147: he
26 148: her
26 149: here
26 150: herself
26 151: high
26 152: higher
26 153: highest
26 154: him
26 155: himself
26 156: his
26 157: how
26 158: however
26 159: i
26 160: if
26 161: iiimade
26 162: important
26 163: in
26 164: interest
26 165: interested
26 166: interesting
26 167: interests
26 168: into
26 169: is
26 170: ishould
26 171: it
26 172: its
26 173: itself
26 174: j
26 175: just
26 176: k
26 177: keep
26 178: keeps
26 179: kind
26 180: knew
26 181: know
26 182: known
26 183: knows
26 184: large
26 185: largely
26 186: last
26 187: later
26 188: latest
26 189: least
26 190: less
26 191: let
26 192: lets
26 193: like
26 194: likely
26 195: long
26 196: longer
26 197: longest
26 198: m
26 199: make
26 200: making
26 201: man
26 202: many
26 203: may
26 204: me
26 205: member
26 206: members
26 207: men
26 208: might
26 209: more
26 210: most
26 211: mostly
26 212: mr
26 213: mrs
26 214: much
26 215: must
26 216: my
26 217: myself
26 218: n
26 219: necessary
26 220: need
26 221: needed
26 222: needing
26 223: needs
26 224: never
26 225: new
26 226: newer
26 227: newest
26 228: next
26 229: no
26 230: nobody
26 231: non
26 232: noone
26 233: not
26 234: nothing
26 235: now
26 236: nowhere
26 237: number
26 238: numbers
26 239: o
26 240: of
26 241: off
26 242: often
26 243: old
26 244: older
26 245: oldest
26 246: on
26 247: once
26 248: one
26 249: only
26 250: open
26 251: opened
26 252: opening
26 253: opens
26 254: or
26 255: order
26 256: ordered
26 257: ordering
26 258: orders
26 259: other
26 260: others
26 261: our
26 262: out
26 263: over
26 264: p
26 265: part
26 266: parted
26 267: parting
26 268: parts
26 269: per
26 270: perhaps
26 271: place
26 272: places
26 273: point
26 274: pointed
26 275: pointing
26 276: points
26 277: possible
26 278: present
26 279: presented
26 280: presenting
26 281: presents
26 282: problem
26 283: problems
26 284: put
26 285: puts
26 286: q
26 287: quite
26 288: r
26 289: rather
26 290: really
26 291: right
26 292: room
26 293: rooms
26 294: s
26 295: said
26 296: same
26 297: saw
26 298: say
26 299: says
26 300: second
26 301: seconds
26 302: see
26 303: seem
26 304: seemed
26 305: seeming
26 306: seems
26 307: sees
26 308: several
26 309: shall
26 310: she
26 311: show
26 312: showed
26 313: showing
26 314: shows
26 315: side
26 316: sides
26 317: since
26 318: small
26 319: smaller
26 320: smallest
26 321: so
26 322: some
26 323: somebody
26 324: someone
26 325: something
26 326: somewhere
26 327: state
26 328: states
26 329: still
26 330: such
26 331: sure
26 332: t
26 333: take
26 334: taken
26 335: than
26 336: that
26 337: the
26 338: their
26 339: them
26 340: then
26 341: there
26 342: therefore
26 343: these
26 344: they
26 345: thing
26 346: things
26 347: think
26 348: thinks
26 349: this
26 350: those
26 351: though
26 352: thought
26 353: thoughts
26 354: three
26 355: through
26 356: thus
26 357: to
26 358: today
26 359: together
26 360: too
26 361: took
26 362: toward
26 363: turn
26 364: turned
26 365: turning
26 366: turns
26 367: two
26 368: u
26 369: under
26 370: until
26 371: up
26 372: upon
26 373: us
26 374: use
26 375: used
26 376: uses
26 377: v
26 378: very
26 379: w
26 380: want
26 381: wanted
26 382: wanting
26 383: wants
26 384: was
26 385: way
26 386: ways
26 387: we
26 388: well
26 389: wells
26 390: went
26 391: were
26 392: what
26 393: when
26 394: where
26 395: whether
26 396: which
26 397: while
26 398: who
26 399: whole
26 400: whose
26 401: why
26 402: will
26 403: with
26 404: within
26 405: without
26 406: work
26 407: worked
26 408: working
26 409: works
26 410: would
26 411: y
26 412: year
26 413: years
26 414: yet
26 415: you
26 416: young
26 417: younger
26 418: youngest
26 419: your
26 420: yours
27 1: business
27 2: day
27 3: door
27 4: eyes
27 5: family
27 6: god
27 7: hand
27 8: head
27 9: help
27 10: home
27 11: house
27 12: life
27 13: light
27 14: mind
27 15: national
27 16: night
27 17: own
27 18: people
27 19: power
27 20: program
27 21: public
27 22: school
27 23: sense
27 24: set
27 25: social
27 26: system
27 27: time
27 28: united
27 29: war
27 30: water
27 31: white
27 32: world
27 33: 
28 1: ## Basics
28 2: Lee asked me this morning whether I would be interested in helping Wilder play the piano.
28 3: 
28 4: I was thinking as I was driving to Shelley's, what would a simple but comprehensive introduction to music need to cover for learning to play the piano.
28 5: 
28 6: ### The main elements of 'music'
28 7: What makes a song?
28 8: - Melody. The tune, illustrated by notes in a sequence.
28 9: - Rhythm. The timing used to play the notes.
28 10: - Tempo. The speed at which the notes are played.
28 11: - Harmony. The relationship between the notes, and between notes that are played together.
28 12: - Key.  Where in the musical scale the tune is played.
28 13: - Feeling. The emotion generated by all the above brought together.
28 14: - Lyrics. Sung with the music, the feeling in the music expressed in words.
28 15: 
28 16: ### Hallelujah
28 17: Thinking of a song that would be good to start with, which can illustrate all the above and yet be reasonably simple and of interest to someone like Wilder. Len Cohen's Hallelujah, which appears in Trek, seemed a good candidate.
28 18: In Lily's music there is Für Elise, which is in C, with a lot of interpretations on SoundCloud.
28 19: 
28 20: ### Music
28 21: Centred around middle C
28 22: 
28 23: ![[music/intro1.png width=500]]
28 24: 
28 25: 
32 1: ## A life of one's own - Marion Milner
32 2: 
32 3: 
32 4: ## Contents
32 5: 
32 6: 
32 7: ### Prefatory Note
32 8: 
32 9: 
32 10: ### Preface 13
32 11: 
32 12: 
32 13: ### I. First Questions 21
32 14: 
32 15: Discovering that I have nothing to live by I decide to study the facts of my life.
32 16: By this I hope to find out what is true for me
32 17: 
32 18: ### II. Keeping a Diary 36
32 19: 
32 20: I try to observe my own experience
32 21: And discover that the more I look the more I see
32 22: But I do not know how to learn from what I see
32 23: 
32 24: ### III. Exploring the Hinterland 55
32 25: 
32 26: Letting one's mind speak for itself
32 27: It shows that one can have unguessed-at thoughts
32 28: I find it has its own views about God and the world dare not ignore these
32 29: 
32 30: ### IV. The Coming and Going of Delight 68
32 31: 
32 32: I suspect that moods can be controlled by an internal gesture For I discover the power to stop the mind from meddling.
32 33: I discover also the invisible feelers of mind.
32 34: Perhaps delight comes only when one stops trying
32 35: But panic comes as well, with the act of surrender
32 36: 
32 37: ### V. Searching for a Purpose 81
32 38: 
32 39: I try to have a purpose in life I find a purpose but do not understand it
32 40: Wanting quality, not quantity, in living
32 41: Concentration begins to come alive
32 42: 
32 43: ### VI. Searching for a Rule 96
32 44: 
32 45: I look for a rule to control moods
32 46: But I see the need to understand rather than to command
32 47: For I find that trying does not master moods
32 48: And 'to will' seems a matter of waiting, not pushing
32 49: 
32 50: ### VII. Two Ways of Looking 103
32 51: 
32 52: I find that attention can be either wide or narrow
32 53: And wide attention sees a different world
32 54: But I cannot attend widely whenever I choose
32 55: 
32 56: ### VIII. Discovering that Thought can be Blind 111
32 57: 
32 58: Observations of how children think provide me with a clue
32 59: I learn how to set snares for wandering thoughts
32 60: But am astonished at their childishness
32 61: And observe how blind they are to their own nature
32 62: 
32 63: ### IX. Watching the Antics of Blind Thinking 122
32 64: 
32 65: I find also that blind thinking has no respect for facts
32 66: It thinks in terms of extremes
32 67: And it is at the mercy of the past, the personal, and of the accidental
32 68: It threatens the whole success of my enterprise
32 69: 
32 70: ### X. The Escape from Blind Thinking 132
32 71: 
32 72: I find that emotion and fatigue increase the blindness
32 73: But when expressed, thought can see itself
32 74: So talking teaches you how to think
32 75: And often you must talk to yourself
32 76: 
32 77: ### XI. Fear of a Dragon 142
32 78: 
32 79: What happens when the gesture of wide attention fails?
32 80: What happens to ideas outside the narrow beam of attention?
32 81: Example of a fear that became monstrous when not recognized
32 82: What does fear of death mean?
32 83: 
32 84: ### XII. More Outcasts of Thought 151
32 85: 
32 86: I misinterpret a picture in terms of its opposite
32 87: And discover "opposites' in dreams and waking thoughts find how to provide clothing for outcast thoughts
32 88: And discover that dreams can provide clues
32 89: 
32 90: ### XIII. Relaxing 168
32 91: 
32 92: I try to learn control of my mind by relaxing my body
32 93: But it seems that in order to relax physically one must be active mentally
32 94: So I discover the sagacity of the body
32 95: And I begin to learn how to perceive, not through my head only, but with the whole of my body, the whole of my past
32 96: 
32 97: ### XIV. Cart-Horse or Pegasus? 179
32 98: 
32 99: Finding a natural rhythm of awareness
32 100: In the seeing phase I must stop and look back at the blindnphase
32 101: But it was not always safe to stop and look
32 102: When watched, the blind phase becomes wise
32 103: 
32 104: ### XV. Discovery of the “Other” 190
32 105: 
32 106: In spite of many discoveries I am still afraid of losing myself
32 107: Then comes a moment of accepted annihilation
32 108: And after this I discover new aspects of communication
32 109: 
32 110: ### XVI. Retrospect 198
32 111: 
32 112: I had discovered something about happiness
32 113: And found that science could help me, but was not the end of my journey
32 114: I thought I had discovered the critical point of willing
32 115: And when I did what I could, then I became aware of an unconscious wisdom that was wiser than I
32 116: 
32 117: ### Epilogue 209
32 118: 
33 1: ## Bicycle helmets the Dutch way
33 2: 
33 3: I am a New Zealander, and I have been living in the Netherlands, in Amersfoort, on and off, for about three years now. I have a bike here, of course, and I have no car. So all my transport options at least begin with my bike, even if, in the end, I catch a train, hire a car, catch a plane, or whatever. For me here, as with most everyone else in this beautiful country, life outside begins and ends on a bike. And life is good.
33 4: 
33 5: And then, recently, my daughter rings me from Auckland, at one of those times we are both awake, to tell me, with some excitement (shared, of course, by me!), that she and her beautiful family are coming for a visit. The occasion is the BMX world championships in Brussels, in which their eldest son, twelve years old, is competing. Omg! I can’t wait.
33 6: 
33 7: So I start thinking about the various transport options for their short visit to Amersfoort. I know they will love to experience the place the way everyone does, on a bike. Among many things I would love them to see: the bike-friendly infrastructure, the respect shown to riders by car drivers, and the lovely forest that begins, for me, at Nimmerdor, outside my front door, and extends NW to SE for some 30km.
33 8: 
33 9: Of course, since their kids are in the bike racing game, they are all diligent when it comes to wearing bike helmets. It is, in fact, the law in New Zealand, as in a number of countries now, that when you ride a bike you must wear a helmet. And the question has come up a number of times, and sometimes the conversation can get quite heated…
33 10: 
33 11: 1.       Why don’t the Dutch wear bike helmets? *And*..
33 12: 
33 13: 2.       Why don’t the Dutch, *of all people*, wear bike helmets? !!
33 14: 
33 15: And the last thing I want, when they are here, is heated conversation! Because, like all my neighbours and friends here, I don’t wear a helmet. I don’t even own a helmet! And I am clearly going to be a ‘bad example’ for their kids. I get that. But I am one of thousands. And I am here, in the Netherlands, as a guest. So I feel, at least, I should honour and understand the culture I am living in.
33 16: 
33 17: Of course, a lot of bike riders here do, indeed, wear helmets. Basically, if you own a fast bike and are reasonably serious, riding it at some speed, perhaps for exercise, or for the challenge of experiencing different ways, different tracks, or simply for the sheer joy of experiencing your beautiful machine as an almost seamless extension of your body, you are aware that there is an associated danger. All may not go perfectly. And so you wear a helmet.
33 18: 
33 19: But what about the rest of us? Are we ignoring the obvious? What about the ‘huge reduction (eg. 52%[[1]](#_ftn1)) in brain injuries’ that occurs when helmets are worn? Why do we, why do the Dutch, ignore these things and continue to go about our business as if the reduction in brain injuries is not a big deal - after all we are going to be riding bikes for our whole lives…
33 20: 
33 21: Well, just maybe, the Dutch intuitively understand something that the rest of the world appears to be missing…
33 22: 
33 23: It turns out that, assuming everything else stays the same, the reduction, for example, in the likelihood of traumatic brain injury expected if a helmet is worn _over a whole lifetime of riding a bike_ is.. ‘**rather less than 2 percentage points**.’ And this is ‘assuming everything else stays the same’－in particular that wearing a helmet does not make an accident more likely, for example by impairing riders’ hearing, or limiting their awareness of their surroundings, or by adversely affecting the behaviour of bike riders or the surrounding traffic, even by what might seem to be a fairly small amount.
33 24: 
33 25: To understand the numbers, check out a recent paper available on the internet[[2]](#_ftn2). We get the following:
33 26: 
33 27: 1.       Total _cycle related_ traumatic brain injuries (TBIs) in 1 year (2012),  t = 6611
33 28: 2.       Total population,  T = 16.7 million
33 29: 3.       Likelihood of a TBI in 1 year,  p = t / T = 0.0396%
33 30: 4.       So the likelihood of a TBI over a lifetime (ages 5-85),  P = 1 - (1-p)<sup>80</sup> = 3.1%
33 31: 
33 32: Therefore the ‘52 percent lower risk of severe TBI’ due to helmet use will reduce the likelihood of getting a cycle related TBI in our lifetime by just 1.6% (that is, 52% of 3.1%), to 1.5%.
33 33: 
33 34: So which is correct? Does wearing a helmet reduce our chances of a brain injury by 52%? Or does it reduce our chances by just 1.5%? It’s really all in the terminology, and the difference is probably easier to see and interpret if we draw a couple of graphs:
33 35: 
33 36: ![[what/Graphs.png width=60%]]
33 37: 
33 38: The red line is the _same graph_ in each plot, produced by computer (despite the ‘hand-drawn’ look!). Both graphs are truthfully labelled. The first plot, with vertical scale from 1 to 4%, shows what most people think when they read that there will be a 52% reduction in traumatic brain injury. The second plot, however, with scale 0 to 50%, also implicitly includes the information that traumatic brain injury is not very common in the first place.
33 39: 
33 40: So, to return to the Dutch. Unlike most of the rest of the world, essentially all Dutch people ride bikes, and of course all their friends and relations do too. So they actually understand the ‘big picture’ of bicycle riding in the Netherlands. The picture on the right more closely represents what they know and understand than the picture on the left.
33 41: 
33 42: And more than that, they do understand when wearing helmets really is worthwhile and not counter-productive, and then they wear them! So I think, for the Dutch, the current law is completely appropriate.
33 43: 
33 44: And I do hope my daughter’s family will understand and appreciate their collective wisdom!
33 45: 
33 46:   
33 47: 
33 48: ---
33 49: 
33 50: [[1]](#_ftnref1) [Helmets prevent severe head injuries in bike accidents, Linda Thrasybule, Health News, 19 Aug 2016](https://www.reuters.com/article/us-health-bicycles-helmets/helmets-prevent-severe-head-injuries-in-bike-accidents-idUSKCN10U1LY)
33 51: 
33 52: [[2]](#_ftnref2) [Traumatic Brain Injury in the Netherlands: Incidence, Costs and Disability-Adjusted Life Years](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4208832/)
34 1: #   
34 2: Come of Age
34 3: 
34 4:  [Edit_"Come of Age"_](https://whatamigoingtodonow.net/what/wp-admin/post.php?post=92&action=edit)
34 5: 
34 6: ## Stephen Jenkinson, _Come of Age_
34 7: 
34 8: 5nov It isn’t any longer a matter of inviting elders, those of them left, back into the fold. They aren’t out there, waiting on our invitation. _They aren’t out there._
34 9: 
34 10: 29oct There is nothing inevitable about the strange days we find ourselves in. There is nothing inevitable about the withering of old people and the atrophy of elderhood in our time. The inevitability comes in what you say about it. In speech we share something of the repertoire of the Gods. We are spoken by the Gods. In that sense we are the wyrd of the Gods. We are murmured over and dreamt by our ancestors, and we are their latest hope for this world they left to us. What we do with what is granted us, and how we rise on behalf of the troubled time we’ve been born to, that is the wyrd that we conjure. That is the means by which we might become the ancestors for others that we’d want for ourselves.
34 11: 
34 12: 26oct Quoting Rainer Maria Rilke:
34 13: 
34 14: I live my life in growing orbits  
34 15: which move out over the things of the world.  
34 16: Perhaps I can never achieve the last,  
34 17: but that will be my attempt.  
34 18: I am circling around God, around the ancient tower,  
34 19: and I have been circling for a thousand years,  
34 20: and I still don’t know if I am a falcon, or a storm,  
34 21: or a great song.
34 22: 
34 23: (Translated by Robert Bly)
34 24: 
34 25: The more original and spiritual a thing is, the more being it has and the higher is its dignity. The highest possesses the ‘beautiful’ in itself, the ‘true’ in itself, the ‘good’ in itself … God is the highest being. Constant and consonant, this ‘being’ was the functioning deity of Christendom, and still is.
34 26: 
34 27: —Thorlieff Bowman, Hebrew Thought Compared with Greek
35 1: ----------------
35 2: title   : Keep notes - rmzetti
35 3: ----------------
35 4: # Keep notes
35 5: 
35 6: ## Nov 2019
35 7: 
35 8: 15nov added via personal login on site
35 9: 
35 10: 6nov Stormzy on Grenfell: “Bare \[so many\] of you politicians are evil and wicked and this is why we hate you..”
35 11: 
35 12: 5nov ib. It isn’t any longer a matter of inviting elders, those of them left, back into the fold. They aren’t out there, waiting on our invitation. _They aren’t out there_.
35 13: 
35 14: ## Oct 2019
35 15: 
35 16: ### Stephen Jenkinson - Come of Age
35 17: 29oct Stephen Jenkinson:
35 18: > There is nothing inevitable about the strange days we find ourselves in. There is nothing inevitable about the withering of old people and the atrophy of elderhood in our time. The inevitability comes in what you say about it. In speech we share something of the repertoire of the Gods. We are spoken by the Gods. In that sense we are the _wyrd_ of the Gods. We are murmured over and dreamt by our ancestors, and we are their latest hope for this world they left to us. What we do with what is granted us, and how we rise on behalf of the troubled time we’ve been born to, that is the wyrd that we conjure. That is the means by which we might become the ancestors for others that we’d want for ourselves.
35 19: 
35 20: 26oct 
35 21: ### Rainer Maria Rilke - orbits
35 22: > I live my life in growing orbits
35 23: > which move out over the things of the world.
35 24: > Perhaps I can never achieve the last,
35 25: > but that will be my attempt.
35 26: > I am circling around God, around the ancient tower,
35 27: > and I have been circling for a thousand years,
35 28: > and I still don’t know if I am a falcon, or a storm,
35 29: > or a great song.
35 30: > — *Rainer Maria Rilke, translated by Robert Bly*
35 31: ---
35 32: 
35 33: *The more original and spiritual a thing is, the more being it has and the higher is its dignity. The highest possesses the ‘beautiful’ in itself, the ‘true’ in itself, the ‘good’ in itself … God is the highest being. Constant and consonant, this ‘being’ was the functioning deity of Christendom, and still is.*
35 34: 
35 35:  — Thorlieff Bowman, Hebrew Thought Compared with Greek
35 36: ---
35 37: 
35 38: 14oct Trialing Joomla.
35 39: 
35 40: Bevan dropped by to ask about taking a plant…
35 41: 
35 42: 12oct **from NZ Listener 3-9 2009, Hamish Keith:** *And continuing in that same shock horror vein, it is time to eat humble pie. Et al’s **that’s obvious, that’s right, that’s true** at Christchurch Art Gallery is a chillingly moving work. It marvellously answers the question about what is or is not a work of art. An encounter with that sweeps (Dane) Mitchell’s pile of trash right out of mind.*
35 43: 
35 44: The darkest hour movie
35 45: 
35 46: 2oct backed up phone to add using settings backup and restore
35 47: 
35 48: ## Sep 2019
35 49: 
35 50: 30sep Shilpa Shetty Hummus Boil and soak moong dal/chickpea and then grind it to a fine paste along with garlic and sesame seeds. Once a fine paste is made you can add olive oil, salt, chilli powder and lemon juice to it.
35 51: 
35 52: Guacamole with tahini and cumin
35 53: 
35 54: 23sep the cursed
35 55: 
35 56: 20sep  j10n@ttcp
35 57: 
35 58: 17sep [Retirement score](https://www.retireyourrisk.org/rise-score/)
35 59: 
35 60: 15sep confluence, slack $20 per user per month
35 61: 
35 62: 11hr charge for shaver
35 63: 
35 64: 8sep Stephen King’s own choice: Lisey’s Story, The Stand and Misery.. Fuel injector cleaner..
35 65: 
35 66: 1sep Culleys, Tapatio, hot sauce
35 67: 
35 68: ---
35 69: 
35 70: ### from Pauline:
35 71: 
35 72: > Me from Myself — to banish —
35 73: > Had I Art —
35 74: > Impregnable my Fortress
35 75: > Unto All Heart —
35 76: > But since Myself — assault Me —
35 77: > How have I peace
35 78: > Except by subjugating
35 79: > Consciousness?
35 80: > And since We’re mutual Monarch
35 81: > How this be
35 82: > Except by Abdication —
35 83: > Me — of Me?
35 84: > — *Emily Dickinson*
35 85: 
35 86: ## Aug 2019
35 87: 
35 88: 23aug overflow 33.75, met Len..
35 89: 
35 90: 20aug 33.5
35 91: 
35 92: 17aug Oscar Wao
35 93: 
35 94: 15aug waited too long (entering a link), specifically:
35 95: 
35 96: [Julia Ecklar.. the eternal flame](https://www.youtube.com/watch?v=5-OjTPj7K54) Lisp
35 97: 
35 98: Walk today 33.1 (I think)
35 99: 
35 100: Into the valley of death..
35 101: 
35 102: 12aug speaking to yourself in the third person may help
35 103: 
35 104: ## July 2019
35 105: 
35 106: 31jul “Theirs not to reason why, theirs not to make reply, theirs but to do and die. Into the valley of death rode the six hundred”
35 107: 
35 108: Barthes boldly states that a photograph, with the aid of the punctum, can capture a grand illusive truth, amounting to something like “the impossible science of the unique being.”
35 109: 
35 110: 19jul Sharon Hewitt Rawlette Ph.D. Mysteries of Consciousness What If Consciousness Comes First?
35 111: 
35 112: The key to resolving the hard problem of consciousness lies in the following observation. While physical properties cannot explain consciousness, consciousness is needed to explain physical properties.
35 113: 
35 114: ---
35 115: 
35 116: ### Go Back
35 117: 
35 118: “Where I came from” is ionized hydrogen and interstellar dust  
35 119: The sloughed-off remains of a giant star  
35 120: Radioactive sparks in sunbeam suspension  
35 121: “Where I came from” is a long-lost generation of suns  
35 122: Those that lived and died and scattered their own remains  
35 123: Nuclear detonations of compact matter, the death spiral plunges of neutron stars  
35 124: “Where I came from” is the empty depths, the far-flung glints on the cosmic ocean  
35 125: “Where I came from” is an eddy in an infrared-hot protoplanetary disk   
35 126: “Where I came from” is a collision of worlds so violent it tore magma from the Earth to coalesce into the Moon  
35 127: “Where I came from” is the sky, the ground, the sea, the very air we breathe  
35 128: “Where I came from” is the infinite  
35 129: “Where I came from” is the Universe  
35 130: And one day, when I am good and ready, I will go back
35 131: 
35 132: 16jul [https://towardsdatascience.com/supercharging-jupyter-notebooks-e22f5ad7ca18](https://towardsdatascience.com/supercharging-jupyter-notebooks-e22f5ad7ca18)
35 133: 
35 134: 15jul Hats off to botanist Ann McMahon, who’s done an inspiring job over 18 years restoring native wildflowers to roadsides in her neighbourhood in Ireland. Have you let your lawn go back to nature or urged your local government to swap mowers for meadows?.. from Nature newsletter.
35 135: 
35 136: Question re recycling, see hacker news saved articles
35 137: 
35 138: 10jul Paris.. Quizas, Quizas, quizas
35 139: 
35 140: ## June 2019
35 141: 
35 142: 30jun If you wear a cycle helmet all your life in the Netherlands, you will reduce your lifetime risk of getting a traumatic brain injury by 1.5 pp, assuming wearing a helmet does not change behaviour, and does not change your chances of actually having an accident (eg by reduced vision or hearing). Up to 65 that reduces to less than 1%
35 143: 
35 144: Car hire options
35 145: 
35 146: Van from Stern €329  
35 147: Basis 7 pass €247  
35 148: Europcar 7 pass €235  
35 149: Europcar 5 pass €111
35 150: 
35 151: 27jun if you avoid doing anything that you might regret later, you will disengage from relationships, opportunities and eventually life itself – and the irony is, there is no more powerful source of regret than that….
35 152: 
35 153: Xps13 $2200 Inc GST i5-8265u 8/256 1920×1080=1.8 non touch  
35 154: Huawei matebook m5-6y54 8/256  2160×1440=1.5 278x192mm
35 155: 
35 156: ### AI comments 2019
35 157: 
35 158: 25jun “Deep Learning projects are typically written in Python. AI projects are typically PowerPoints.”
35 159: 
35 160: Sure, “AI” as it is used today implies “software that codifies decision-making using data”. No, it’s not the T3000. But as the author acknowledges:
35 161: 
35 162: \> Dynamic Yield can pay for itself many times over by helping McDonald’s better understand its customers
35 163: 
35 164: Ok, so it’s not hype – it is delivering real value. “AI” is just a marketing term to help C-suite suits and Silicon Valley sales reps get on the same page about what’s being sold with as few words as possible. What’s being sold is software that helps make optimal decision using data.
35 165: 
35 166: AI isn’t a rigorously defined academic term, so people will use it how they want. It’s only hype when real value isn’t delivered.
35 167: 
35 168: 20jun josephine zwaan at the Mauritshuis. Clara Peeters.
35 169: 
35 170: 22jun [https://huispedia.nl/amersfoort/3817jv/keesomstraat/11-b](https://huispedia.nl/amersfoort/3817jv/keesomstraat/11-b)  €[188000](tel:188000)+
35 171: 
35 172: 18jun Caroline Myss TEDx Findhorn [Youtube](https://youtu.be/-KysuBl2m_w).
35 173: 
35 174: Neutrinos [educational site](https://nature.us17.list-manage.com/track/click?u=2c6057c528fdc6f73fa196d9d&id=8c465704a3&e=491cc6bf49)
35 175: 
35 176: Michael Kors Although now Kors wears his uniform of jeans, black T-shirt, black jacket, and aviator sunglasses … when he was 18 his style was totally out there.
35 177: 
35 178: Gap here due to ‘Waited too long’ error.. a month of notes…!
35 179: 
35 180: 17may ANU climate change article, see pocket/science
35 181: 
35 182: 16may Inserted EE sim just before midnight NZ time. For EE balance: txt ‘balance’ to 150; +44 74 3267 1864
35 183: 
35 184: 15may  
35 185: 
35 186: The wind has died, no motion now  
35 187: In the summer’s sleepy breath.  
35 188: Silver the sea-grass, the shells and the driftwood, fixed  
35 189: In the moon’s vast crystal.  
35 190: Think:  
35 191: Long after, when the walls of the small house  
35 192: have collapsed upon us, each alone,  
35 193: Far gone the earth’s invasion,  
35 194: The slow earth bedding and filling the bone,  
35 195: this water will still be crawling up the estuary,  
35 196: fingering its way among the channels, licking the stones;  
35 197: and the floating shells, minute argosies  
35 198: under the giant moon, still shoreward glide  
35 199: among the mangroves and the creeping tide.  
35 200: The noise of gulls comes through the shining darkness  
35 201: over the dunes and the sea  
35 202: Now the clouded moon is warm in her nest of light,  
35 203: The world’s a shell  
35 204: where distant waves are murmuring  
35 205: of a time beyond this time.  
35 206: Give me the ghost of your hand  
35 207: unreal, unreal the dunes,  
35 208: the sea, the mangroves, and the moon’s white light  
35 209: unreal, beneath our naked feet, the sand.  
35 210: 
35 211: 14may  
35 212:   
35 213: mate10 150x78x8.2mm 186g 2560×1440=1.8,5.9″  
35 214:   
35 215: P30        149x71x7.6mm 165g 2340×1080=2.2,6.1″  
35 216:   
35 217: P30pro  158x73x8.4 mm 192g 2340×1070,6.5″
35 218: 
35 219: 13may Maru the cat. Fly to UK, stay in Gosport
35 220: 
35 221: Probability  
35 222: Some symptoms, such as partial paralysis, are uncommon; others, such as shortness of breath, are probable. Which is more likely: that the victim of an embolism will experience only partial paralysis or that the victim will experience both partial paralysis and shortness of breath? Kahneman and Tversky found that 91 percent of the doctors believed a clot was less likely to cause just a rare symptom than it was to cause a combination of the rare symptom and a common one.
35 223: 
35 224: 10may [runrepeat.com](http://runrepeat.com/) shoes  
35 225: 9may Longwood gardens
35 226: 
35 227: 5may Washington DC, Holiday Inn Ballston IHG 0950  
35 228: CVS scissors, melatonin  
35 229: Ikigai book
35 230: 
35 231: On Mar. 6, 1990, one Blackbird famously set a series of world speed records on its ‘retirement flight.’ The SR-71 with tail number 64-17972 was flown from California to the Smithsonian National Air & Space Museum (NASM) Udvar-Hazy Center at Dulles Airport, where it would eventually go on display. In the process, it set the official National Aeronautic Association coast-to-coast speed record of 2,086 miles in one hour and seven minutes, averaging 2,124.5 mph.
35 232: 
35 233: 3may ONR pass#0727, umap, youmap, python
35 234: 
35 235: 30apr 5RD national security forecasting network
35 236: 
35 237: Movie operation red sea. Taxonomy for AI available on the span website
35 238: 
35 239: 28apr holiday inn DC
35 240: 27apr 23.4 IHG pin 0950
35 241: 
35 242: Love is a collaborative work of art.. therefore love is an aesthetic experience, it is unpredictable, it is creative, it requires communication and discipline, it’s frustrating and emotionally demanding, it involves both joy and pain, and each experience of love is different.
35 243: 
35 244: 23apr simplicity investment  
35 245: 22apr vitC  
35 246: 21 EMC131 24  
35 247: 20apr 24, most beautiful smile ever Nihotupu  
35 248: 18apr 24.1  
35 249: Athul Gawandi.. the checklist manifesto.. New Yorker
35 250: 
35 251: ---
35 252: 
35 253: 15apr 24.38  
35 254: 13apr joy of compassion Thubten Zopa Rinpoche  
35 255: 12apr HPD 24.5.. significant sporadic rain  
35 256: 10apr JJT (friend’s dog bit me!).., UY, HMG w, 24.6  
35 257: 3apr BAN114, 25.1  
35 258: 2apr LST, 25.2, Kmart: stretch jeans, slim, 32, $22
35 259: 
35 260: ---
35 261: 
35 262: 31mar 25.23  
35 263: 30mar Daniel & Doris Noe’s parents, Anais’ partner is Jessie  
35 264: 29mar 25.4 rain!  
35 265: 28mar 25.5 SU om+1  
35 266: 27mar 25.5 JJT, UY, EQN 2m,KSH 3of ?, HHQ?  
35 267: HNL togs  
35 268: 26mar DZS747 f+pa1, HRR arrived as I was leaving  
35 269: 25mar 25.7 26mar 25.6  
35 270: 24mar ins f+1  
35 271: 23mar FDC,KBL,HWF,HYM,FLJ,JGF  
35 272: Montelukast asthma  
35 273: 21mar 26.0
35 274: 
35 275: A 100g serving of unsweetened **coconut** **yogurt** contains 44kcal and 3.5g of fat, of which about 3g are saturated. Much of the saturated fat in coconut yogurt is in the form of medium-chain triglycerides, which can help control weight, reduce the risk of atherosclerosis and boost immunity, according to a 2013 article in “Nutrition Review.”
35 276: 
35 277: 15 GMH CYN f+2 wet, Kate+2  
35 278: 14 JJT, 26.4  
35 279: 13 Tina, UY  
35 280: 12mar JJT f+3, MARZUL/DZS m+1/mw+1  
35 281: 11mar GBM m tall dog straw 26.7  
35 282: 10mar dam 26.8 after day of rain  
35 283: Cars PQ (I think) m tall grey hair  
35 284: UY m black glasses
35 285: Car waiting, black LMJ668, still there on return  
35 286: 6mar dam 27  
35 287: 1mar dam 27.4
35 288: 
35 289: ---
35 290: 
35 291: 28feb caliphate ry [https://www.nytimes.com/interactive/2018/podcasts/caliphate-isis-rukmini-callimachi.html](https://www.nytimes.com/interactive/2018/podcasts/caliphate-isis-rukmini-callimachi.html)  
35 292: 25 Feb Lumino dentist
35 293: 25 Feb Holocaust survivor Primo Levi said: “Monsters exist, but they are too few in number to be truly dangerous. More dangerous are the common men, the functionaries ready to believe and to act without asking questions.”  
35 294: 22 Feb Bald Hills, Bannockbrae, Carrick  
35 295: Sophie 5o’clock drinks  
35 296: 13 Feb S-town podcast recommendation from Rosie  
35 297: 12 Feb [https://github.com/summernote/awesome-summernote/blob/master/README.md](https://github.com/summernote/awesome-summernote/blob/master/README.md)  
35 298: 11 Feb Purism Librem laptop & phone (pureOS)  
35 299: 7 Feb folding ebikes  
35 300: gocycle 17.5kg 22v13.7ah=300wh 2 wheel roll US$3300  
35 301: SwagCycle EB-5 Pro 36V Li Battery 250w 14″
35 302: 
35 303: 5 Feb zygote to newt [https://nature.us17.list-manage.com/track/click?u=2c6057c528fdc6f73fa196d9d&id=e6f3191c9b&e=491cc6bf49](https://nature.us17.list-manage.com/track/click?u=2c6057c528fdc6f73fa196d9d&id=e6f3191c9b&e=491cc6bf49)
35 304: 
35 305: ---
35 306: 
35 307: 26 Jan put some line shaving in.. is it disappearing?  
35 308: 18 Jan Camtasia studio for video  
35 309: 9 Jan the Okinawa Way.  Willcox
35 310: 
35 311: 7Jan  
35 312: “Marry or do not marry, you will regret it either way. …Laugh at the stupidities of the world or weep over them, you will regret it either way. …Trust a girl or do not trust her, you will regret it either way. …Hang yourself or do not hang yourself, you will regret it either way. …This, gentlemen, is the quintessence of all the wisdom of life.” – Kierkegaard, Either/Or
35 313: 
35 314: 2Jan 2019  
35 315: _  
35 316: Flights_ by Olga Tokarczuk  
35 317: _  
35 318: Compass_ by Matthias Enard  
35 319: _  
35 320: My year of rest and relaxation_
35 321: 
35 322: ---
35 323: 
35 324: 28Dec Imagine dragons  
35 325: Adele, someone like you  
35 326: Cold play  
35 327: Once I was seven years old  
35 328: Michele Wolf  
35 329: Ba bee Trump doo doo doo
35 330: 
35 331: 22Dec Cravehome Birkenhead for Lily Bee wrap
35 332: 
35 333: The headwaters Glenorchy  
35 334: 18Dec blood test [6169671](tel:6169671)
35 335: 
35 336: 7Dec 1900x1600h=1000 [imp.gal](http://imp.gal/), 4500 l  
35 337: 2500×1750=1850 [imp.gal](http://imp.gal/), 8500 l  
35 338: Total about 3000 [imp.gal](http://imp.gal/) 13000 litre  
35 339: @ 50 gal/day that’s 60 days  
35 340: Washing machine 16 gallons per wash  
35 341: Shower 3min 2 gallons, bath 25, flush 1, wash 1  
35 342: 520 gal from 1000 sq ft per inch rainfall  
35 343: 50 gal/day => 1″ per week, 50″ pa = Auckland’s rainfall.
35 344: 
35 345: ---
35 346: 
35 347: 28 GLOBAL TAT REPOSITORY Amazon, Eric Clapton Blind Faith: Can’t Find My Way Home
35 348: 
35 349: 26 chocolate plus black beans, yuzu ..   
35 350: 24 movies.. puzzle,  
35 351: 23 Nov Mountain Ash spice [14624806](tel:14624806)
35 352: 
35 353: 5 Nov Waiatarua Library
35 354: 
35 355: ---
35 356: 
35 357: 30 Oct Waiatarua table tennis
35 358: 
35 359: 
35 360: 19 Oct MBIE  
35 361: DTM terms of release  
35 362: DTM representative for UK
35 363: 
35 364: Average annual personal income was $49,475, up 5.1 percent from 2016. average annual personal income for females increased at a higher rate (7.7 percent) than for males (3.0 percent), when compared with 2016. For every $100 of household income, New Zealand households spent an average of $16.20 on housing costs
35 365: 
35 366: Wilson monthly parking.. $3-500pm  
35 367: About $4000 pa unreserved
35 368: 
35 369: Jazz Two, chick Corea & Bela Fleck  
35 370: Lisa Hilton, Joey alexander  
35 371: Not Eliane Elias  
35 372: Bodyguard, Rosie recommendation  
35 373: Salmon fishing in the Yemen
35 374: 
35 375: Yayoi Kusama  
35 376: 
35 377: Some like it Hot  
35 378: Prehistoric autopsy  
35 379: Michael Mosley, trust me I’m a doctor  
35 380: Ben Mckintyre  
35 381: The spy and the traitor
35 382: 
35 383: 26 Sep 18 Chaldon  
35 384: Delderfield, book toto  
35 385: Harvey’s of Lewis, best bitter, Kit  
35 386: Taxi 785  
35 387: 
35 388: Tv on the radio  
35 389: Leave 11:00 catch 11:09 bus and 11:40 train  
35 390: Surf film  
35 391: [https://youtu.be/BW05Lz44g-k](https://youtu.be/BW05Lz44g-k)
35 392: 
35 393: 4 Sep Greece  
35 394: Symi-center [2246070058](tel:2246070058)  
35 395: Astrology and the rising of Kundalini  
35 396: Barbara Hand Clow  
35 397: Χανιων 7, Rhodes, 85100, Greece  
35 398: Chanion 7
35 399: 
35 400: 1 cow gives 7500 litres per year, or 7500kg milk, or 750 kg cheese. We eat 10 kg per year, so 150 people could be supported by one cow .. cows eat 25kg per day.
35 401: 
35 402: 13 Aug  
35 403: Fortnite level 59 
35 404: 
35 405: Remaining \*136# Balance \*101#  
35 406: Check number \*102#  
35 407: check cost \*135\*0044xxx#
35 408: 
35 409: 4 Aug Paulien Chillida artist, sculptor  
35 410: Films..  
35 411: The female brain  
35 412: Kodachrome  
35 413: Hidden figures.. film.. NASA  
35 414: [Freecycle.co.nz](http://freecycle.co.nz/)  
35 415: A small life.. self harm
35 416: 
35 417: 13 July  
35 418: Smartbox HWD: 2.1, 1.8, 2.8  
35 419: Marriott hotels UK 
35 420: 
35 421: 
35 422: 23 April  
35 423: Novotel 604  
35 424: 26-28 Scherger Dr, Fairbairn  
35 425: chrome://flags/#pull-to-refresh  
35 426: All of me, the piano guys  
35 427: Matebook HZ-W19  
35 428: new Google
35 429: Mbie Le
35 430: 
35 431: FUJ495 mule  
35 432: J D Robb  
35 433: Ph360 genetic  
35 434: Toon details  
35 435: Radical freedom: writing, walking – and exploring the wilderness within  
35 436: [https://www.theguardian.com/books/2017/dec/26/radical-freedom-writing-walking-and-exploring-the-wilderness-within?CMP=Share\_An](https://www.theguardian.com/books/2017/dec/26/radical-freedom-writing-walking-and-exploring-the-wilderness-within?CMP=Share_An)  
35 437: MAC mineralised Foundation NW25
35 438: 
35 439: Fat bomb  
35 440: 1 cup each coconut oil, almond butter, cacao, wizz, pour in paper in muffin tin
35 441: 
35 442: ballroom dancing
35 443: 
35 444: For Netflix  
35 445: 
35 446: 
35 447: 18 Nov 2017  
35 448: Baker Street sax  
35 449: Hiromi Kansas days of yesterday, jazz piano accompaniment  
35 450: OnePointOne Myele Manzanza jazz piano track 2 ‘Absent Fade’
35 451: 
35 452: 3 Nov  
35 453: Living simply Newmarket, Victoria  
35 454: Hunt for the wilder people  
35 455: Taka waiti  
35 456: Loss aversion: Most people are likely to stick with the status quo even if there are big gains to be made from a change that involves just a small cost.  
35 457: 26″ folding ebike 22kg.. USD520  
35 458: [https://www.alibaba.com/product-detail/48V-12-8AH-LG-Cell-E\_60680003077.html](https://www.alibaba.com/product-detail/48V-12-8AH-LG-Cell-E_60680003077.html)
35 459: 
35 460: Pania = Cushla
35 461: 
35 462: Mobikin doctor for android .. Windows app to recover lost files.. trial examines..
35 463: 
35 464: 5 Oct 17 dolls names, Annabel, Crystal  
35 465: Josh.. next door’s builder  
35 466: Chris Kraus, Sylvere Lotringer  
35 467: Nimitz  
35 468: APAN US DOD website for sharing.. 
35 469: Secrets & lies.. film by Mike Lee  
35 470: Brown nissan JYW507
35 471: 
35 472: 6 Sep  
35 473: [Kampeerclub.nl](http://kampeerclub.nl/)  
35 474: Ophelie Sir John Everett Millais  
35 475: Nino europcar  
35 476: Charlotte Rampling 45 years  
35 477: Never let me go   
35 478: Emily Levine stand up comedian  
35 479: Fat freddy  
35 480: Jenny slatman strange body  
35 481: Radler bier  
35 482: Past reality integration  
35 483: Illusion  
35 484: Music: Alizee  
35 485: Silo apts Emily place  
35 486: Raw cotton $295000  
35 487: Body laid bare  
35 488: Matt Berry does the boost race  
35 489: Grocer’s apostrophe  
35 490: Justice talks.. Harvard University  
35 491: Cliff carbs ketosis ketones fats  
35 492: Zee de zone in see zuider zee zakken  
35 493: Bluestocking Helen Fletcher Kit
35 494: 
35 495: 13 Feb 2017 Inside out South  
35 496: Broadchurch TV show toto  
35 497: Paul Nash exhibition  
35 498: I let her go.. Claire mackintosh
35 499: 
35 500: ---
35 501: 
35 502: Photoshop clone Affinity Photo
35 503: 
35 504: Beauregard biere  
35 505: Plantation island  
35 506: Fundamental
35 507: Grace and grit  
35 508: 
35 509: Uptown bounce  
35 510: Rosebank road  
35 511: Kudzwai from Zimbabwe
35 512: 
35 513: Green wheels
35 514: Trusted link [http://examine.com](http://examine.com/)/  
35 515: Ifurniture 268 Neilson St Azure mattress  
35 516: [https://goo.gl/maps/Du8r4A1GyTE2](https://goo.gl/maps/Du8r4A1GyTE2)
35 517: 
35 518: Better mind map…  
35 519: [http://vue.tufts.edu/index.cfm](http://vue.tufts.edu/index.cfm)  
35 520: Musicon, Gdrive  
35 521: Four-elements  
35 522: Sauerkraut 2tsp salt per pound  
35 523: 23&me  
35 524: Grand Prix  
35 525: Small world  
35 526: 
35 527: —  
35 528: 239  
35 529: Tumblr  
35 530: Jazz festival Den Haag end august  
35 531: Sonos=Rocki [myrocki.com](http://myrocki.com/)  
35 532: Zinc: avocado oysters beans garlic nuts bananas fish oil eggs
35 533: 
35 534: ---
35 535: 
35 536: Feb2016 Morocco
35 537: 
35 538: Moha.   Facebook. Yidir Bouhayek  
35 539: Erfoud, Merzouga  
35 540: Mirlift beach near Agadir  
35 541: Maroc telecom  
35 542: Essaouira
35 543: 
35 544: ---
35 545: 
35 546: 
35 547: Although of course you end up becoming yourself ..a road trip with David Foster Wallace by David Lipsky  
35 548: [http://jsfiddle.net/leemarrett/mvajN](http://jsfiddle.net/leemarrett/mvajN)/  
35 549: A bean, a bean and a half, half a bean and two beans.  
35 550: E6E7621CDE Pepe & Celestine  
35 551: Cinematic orchestra  
35 552: Fontella Bass .. rescue me  
35 553: Nicola di  Bari  
35 554: Mario tessuto  
35 555: Milba  
35 556: [http://wellpark.co.nz](http://wellpark.co.nz/)  
35 557: Louis C.K.  
35 558: IMDB tolstoy  
35 559: Tamara sculpture  
35 560: Bmi kg/m²=72/1.75²=23.5, (18-25)  
35 561: 68/1.75²=22.2,  
35 562: 52.9/1.73²=17.6  
35 563: Epa  
35 564: Pizza: salmon, sour cream, lemon juice, dill, capers, mozzarella  
35 565: David Hockney Martina Selway (Victoria)  
35 566: Spy valley rose marlborough  
35 567: Graham Guthrie..  
35 568: Gaviscon double strength  
35 569: Mt roskill war memorial Hall, 13 may road, Mt roskill,  
35 570: Steve: Jayz  roots  
35 571: Asumi 06-0489-0152068-18  
35 572: Merchants of Venice  
35 573: The food store  
35 574: Ostro britomart  
35 575: Botswana butchery  
35 576: [webmail.webhost.co.nz](http://webmail.webhost.co.nz/)  
35 577: John Oliver  
35 578: Unprofessional  
35 579: Julia MATLAB version  
35 580: Machinarium  
35 581: Michael MacIntyre  
35 582: Eddie izzard  
35 583: Fourthacc still online   
35 584: toni Gibson  
35 585: How can I keep from singing  
35 586: Engagement kitsch  
35 587: Bas Heinje  
35 588: Tino Segal this is propaganda  
35 589: 5 year risk if dying [www.ubble.co.nz](http://www.ubble.co.nz/)  
35 590: martin chulov bagdhadi Isis dubok  
35 591: The world loosened from its other concerns is saturated with thought  
35 592: Alive inside, Dan Cohen  
35 593: Darjeeling ltd  
35 594: Mary Brunton vs Jane Austen  
35 595: alan ford  
35 596: Max Bunker  
35 597: Friend  
35 598: [http://google.com/newsstand/s/CBIwmamy1B8](http://google.com/newsstand/s/CBIwmamy1B8)  
35 599: Apps:  [http://www.milezero.org/index.php/tech/web/spoiled\_for\_choice.html](http://www.milezero.org/index.php/tech/web/spoiled_for_choice.html)  
35 600: Chhima, Galaxy quest, Mining trucks, Not technix  
35 601: [http://www.scientificamerican.com/article.cfm?id=bring-science-home-baking-cornbread](http://www.scientificamerican.com/article.cfm?id=bring-science-home-baking-cornbread)  
35 602: Elroy Flecker ‘the dead know only one thing: it is better to be alive’.. inscription, Rennie Lines  
35 603: The country’s average household net-adjusted disposable income is US$21,892 a year (NZ$27,077), less than the OECD average of US$23,047.  
35 604: Unblocks for Netflix, Hulu and BBC. If using a browser, Hola should do it . Change DNS entries to make it work. Support provides a list of sites  
35 605: Smithsonian all free content, BBC  
35 606: Sugar  
35 607: [http://www.youtube.com/watch?feature=player\_embedded&v=dBnniua6-oM](http://www.youtube.com/watch?feature=player_embedded&v=dBnniua6-oM)  
35 608: Zidag.. Zdiag.. Sdrsharp  
35 609: Mortimer Hurst, optician  
35 610: broccoli, cucumber, spring onions avocado  
35 611: saraswat.  
35 612: ua1001 gate c27  
35 613: 221  
35 614: Satie Start chords G F, G B D; G E, A C E A; G F, G B D G  
35 615: Reacher nesbo  
35 616: Blurb publishing  
35 617: iReal b music accompanist  
35 618: Pocket..  
35 619: Blurb publishing  
35 620: iReal b music accompanist  
35 621: Bish bosch Scott walker  
35 622: Use tor and turn off your cell phone  
35 623: 20 is 6mm, 76+61+43 ER  
35 624: [http://www.babble.com/pregnancy/having-trouble-getting-pregnant-at-home-artificial-insemination](http://www.babble.com/pregnancy/having-trouble-getting-pregnant-at-home-artificial-insemination)/  
35 625: The Colombo coffee shop Underground  
35 626: Colombo and Brougham  
35 627: Wordsworth and Colombo  
35 628: Meter reading 2751 kwh  
35 629: Kohukohu  
35 630: Jim pepper American Indian saxophonist  
35 631: 1962  
35 632: Hohokum computer game melbourne  
35 633: Limbo game  
35 634: [http://www.google.com/m?hl=en&gl=us&source=android-browser-type&q=shelves](http://www.google.com/m?hl=en&gl=us&source=android-browser-type&q=shelves)  
35 635: 2000×620 sink opening to 830 from end  
35 636: Hole 340 wide  
35 637: Sep 2015  
35 638: [😊](https://s.w.org/images/core/emoji/14.0.0/svg/1f60a.svg =16x*)  
35 639: Talk soon, btw she is doing well and loved the roses!! Xx  
35 640: Pisco sour  
35 641: [http://www.google.com](https://whatamigoingtodonow.net/what/%3Ca%20href=)“>google  
35 642: 200\*25 $15.17  
35 643: 150\*25 $11.06  
35 644: 150\*40 $21.01  
35 645: 100\*40 $13.69  
35 646: 100\*50,$18.01  
35 647: 200\*50,$39.62  
35 648: SF shelves. [275×32 10](tel:27593210) shelves  
35 649: 4x170x40  
35 650: 4.8 shelf widths x8 plus 4 sho  
35 651: Jim Carter. The other theory of physics  
35 652: Margaret Wertheim Physics on the fringe  
35 653: [www.swissvpn.net](http://www.swissvpn.net/)  
35 654: [Hidemyass.com](http://hidemyass.com/)  
35 655: netflicks…  
35 656: 900, 500  
35 657: 600, 500  
35 658: Rp201 dp990  
35 659: 2800 body corp inc water and insurance  
35 660: [http://sites.google.com/site/defencetechnologyagency](http://sites.google.com/site/defencetechnologyagency)  
35 661: Shelves 2800×780..[1500 3150](tel:15003150) high  
35 662: space 2900 and 3600 x 4580  
35 663: 3600 to joists  
35 664: [a.name](http://a.name/)  
35 665: issey 94 aus for 50ml   
35 666: Swiss grand resort & spa, bondi  
35 667: [02 9365 5666 3](tel:02936556663)rd to 7th  
35 668: [http://sitetophone.com/488159-9990](http://sitetophone.com/488159-9990)  
35 669: Hollow men  
35 670: Where’s my droid text messages  
35 671: ?ring ?gps  
35 672: Glass.. 900×500 & 600×500  
35 673: Kratom tea for restless legs  
35 674: Split & concat  
35 675: [Greenschool.org](http://greenschool.org/)  
35 676: Jsfiddle  
35 677: Final cut pro version 7  
35 678: file:///sdcard/aaRefs/piano.htm  
35 679: Crisis = danger/opportunity chinese churchill  
35 680: Moshi iphone cover  
35 681: otomo music from mark & young hae  
35 682: air Canada 758 SF-TO 94-95-96dB  
35 683: scientific opinion is strongly stated and loosely held…SB  
35 684: Sir Eddie Jury Maori high court judge  
35 685: Zeitgeist Stu  
35 686: Fremaux music video  
35 687: lee.. Matthew Sanders  
35 688: For I have known them all already, known them all:  
35 689: have known the evenings, mornings and the afternoons  
35 690: I have measured out my life with coffee spoons  
35 691: Megan smith a little love  
35 692: female vocal…  
35 693: 605a.  ph 6468  
35 694: Bikanervala  
35 695: Designmobel energise E2  
35 696: Blessed Unrest Paul Hawken  
35 697: kowhai large leaf 2m $58  
35 698: risotto smoked mozzarella, walnut & rocket  
35 699: music female  
35 700: ladaya sariyaho  
35 701: lisa lim  
35 702: film: the white ribbon  
35 703: Japanese film: departures (mortician)  
35 704: Robert filiou – Charles Fourier  
35 705: 12:8.3:34  
35 706: 13:7.7:37  
35 707: 14:7.1:40  
35 708: 15:6.7:42  
35 709: 16:6.3:45  
35 710: 17:5.9:48  
35 711: 18:5.6:51  
35 712: 19:5.3:54  
35 713: 20:5.0:57  
35 714: Rickson cavin spin doctor  
35 715: Douglas st coffee  
35 716: Blackbox m10 noise cancellers  
35 717: DXO optics pro e150  
35 718: PT-lens  
35 719: June 2008  
35 720: 14 may 5.2, 20 June 5.5  
35 721: Raglan  
35 722: lily cottage.  
35 723: Video:  
35 724: Tideland  
35 725: Three star books  
35 726: Ronchamp – milhouse  
35 727: Col mar  
35 728: [129.132.208.154](http://129.132.208.154/)  
35 729: I’m now supremely confident…737pm…28may  
35 730: Pfluemly  
35 731: In search of ancient nz, h.campbell,g.hutching $50  
35 732: Padlock 301  
35 733: Johnny hodges – bending alto sax  
35 734: [Projectiondesign.com](http://projectiondesign.com/)  
35 735: [http://www.screenvistas.co.nz](http://www.screenvistas.co.nz/)  
35 736: Te ngae robinson ave  
35 737: See mi yah – rhythm & sound  
35 738: Va Vau, Ha’apai, foa  
35 739: Daktarin NZ on-line  
35 740: lamisil-diflucan- fluconazole-nystatin     
35 741: AMP KT4V  
35 742: Kings of leon lyon  
35 743: Install- error 1073 Service already exists  
35 744: Bondi Junction 378 bus to Bronte Beach (end of run)  
35 745: Harrington and Goldburn  
35 746: Hunter St  
35 747: UofT school of arts  
35 748: Have an nz a .[freewebhost.Co.nz](http://freewebhost.co.nz/)  
35 749: Vikaden- scary pain killer  
35 750: Intercontinental  
35 751: 95 customhouse quay  
35 752: Ben slaney  
35 753: Valerian – silent night x2  
35 754: Sparring partner, Conte, film Francis Ozon ‘5×2’ bad film?  
35 755: Hugh Kent neuropsychologist  
35 756: Groting=blanche  
35 757: Wmmp.exe midbar tech  
35 758: paolo conti aguaplano  
35 759: greg johnson best yet  
35 760: Latin de luxe  
35 761: Nathan haines sound killer  
35 762: Coffee machine 12x8x9in  
35 763: Walton park hotel [094258149](tel:094258149)  
35 764: Hway1 north from Chch to albany, hway7 to lewis  pass & hanmer. in abt 15min enter Weka pass then 45sec before Waikari (small village) is Timpendean farm (2nd to last on left, gum trees, red mailbox is one too far) up drive past buildings, at the fork turn right, signposted about 300m further on, walk to the right of the fence, circling round the hill and there is another signpost  
35 765: White Foundation Virtuoso Sax  
35 766: Gato Barbieri Que Pasa  
35 767: Ivo Perelman The Seven Energies of the Universe  
35 768: ——–  
35 769: ebrary  
35 770: ——  
35 771: $24760 1apr08  
35 772: $1500pf  
35 773: Last payment 11nov08  
35 774: ——  
35 775: The Kirketon Hotel  
35 776: 229 Darlinghurst Rd  
35 777: Darlinghurst, Sydney  
35 778: T: [02 9332 2011](tel:0293322011) F: [02 9332 2499](tel:0293322499)  
35 779: Gewurtz  
35 780: Mills Reef Reserve 2004  
35 781: Sauv Blanc  
35 782: Sileni Marlborough 2004  
35 783: Pinot  
35 784: Mt. Difficulty
36 1: # Cancer & the blossomest blossom
36 2: 
36 3: 
36 4: <iframe width="500" height="350" src="https://www.youtube.com/embed/XpnyPl8-ZcQ" title="Dennis Potter  -  Seeing the Blossom" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
36 5: 
36 6: This is a televised interview which took place in England about 25 years ago. The celebrated playwright Dennis Potter talks about his work, and his life, to Melvyn Bragg. The amazing thing about the interview is that it takes place about a month after Potter was informed, essentially without warning, that he had just three months to live. He died under three months after the interview. During the interview Potter takes liquid morphine to control the pain.
36 7: 
36 8: The interview is famed particularly for Potter’s sincere and moving expression of how the diagnosis has intensified his moment-by-moment experience of life. He describes vividly how, below his window when he’s working _‘… the blossom is out in full now, there in the west early. It’s a plum tree, it looks like apple blossom but it’s white, and looking at it, instead of saying “Oh that’s nice blossom” … last week looking at it through the window when I’m writing, I see it is the whitest, frothiest, blossomest blossom that there ever could be…’_
36 9: 
36 10: ### ‘*We tend to forget that life can only be defined in the present tense*’
36 11: 
36 12: This is an edited transcription of Melvyn Bragg’s interview of Dennis Potter on March 15 1994. It was broadcast by Channel 4 on April 5 1994.
36 13: 
36 14: **Melvyn Bragg: When did you find out that you’d got this… cancer?**
36 15: 
36 16: **Dennis Potter:** Well, I knew for sure on St Valentine’s day, \[laughs\] like a little gift, a little kiss from somebody or something. Obviously I had suspicions. I had a lot of pain before then and there was a quite accidental sort of misdiagnosis of the condition. In a way it was almost a relief to find out what it was: cancer of the pancreas with secondary cancers already in the liver and the knowledge that it can’t be treated. There’s no … neither chemotherapy nor surgery are appropriate, it’s just simply analgesic care until, you know: Goodnight Vienna, as they say in football nowadays. \[laughs\] And I’ve been working since then, flat out at strange hours, ’cause I’m done in the evenings, because of the morphine. The pain is very energy-sapping, but I do find that I can, I can be at my desk at five o’clock in the morning, and I’m keeping to a schedule of pages, and I will and do meet that schedule every day.
36 17: 
36 18: I grieve for my family and friends who know me closest, obviously, and they’re going through it in a sense more than I am. But I discover also what you always know to be true, but you never know it till you know it, if you follow (sorry, I’ve got … my voice is echoing in my head for some reason).
36 19: 
36 20: We all, we’re the one animal that knows that we’re going to die, and yet we carry on paying our mortgages, doing our jobs, moving about, behaving as though there’s eternity in a sense. And we forget or tend to forget that life can only be defined in the present tense; it is is, and it is now only. I mean, as much as we would like to call back yesterday and indeed yearn to, and ache to sometimes, we can’t. It’s in us, but we can’t actually; it’s not there in front of us. However predictable tomorrow is, and unfortunately for most people, most of the time, it’s too predictable, they’re locked into whatever situation they’re locked into … Even so, no matter how predictable it is, there’s the element of the unpredictable, of the you don’t know. The only thing you know for sure is the present tense, and that nowness becomes so vivid that, almost in a perverse sort of way, I’m almost serene. You know, I can celebrate life.
36 21: 
36 22: Below my window in Ross, when I’m working in Ross, for example, there at this season, the blossom is out in full now, there in the west early. It’s a plum tree, it looks like apple blossom but it’s white, and looking at it, instead of saying “Oh that’s nice blossom” … last week looking at it through the window when I’m writing, I see it is the whitest, frothiest, blossomest blossom that there ever could be, and I can see it. Things are both more trivial than they ever were, and more important than they ever were, and the difference between the trivial and the important doesn’t seem to matter. But the nowness of everything is absolutely wondrous, and if people could see that, you know. There’s no way of telling you; you have to experience it, but the glory of it, if you like, the comfort of it, the reassurance … not that I’m interested in reassuring people – bugger that. The fact is, if you see the present tense, boy do you see it! And boy can you celebrate it.
36 23: 
36 24: **Do you spend much time thinking about your childhood and raking through that, Dennis, and the time in the Forest of Dean, the time with your parents? Because you’ve written about it often. Where is it now, as it were, in your …**
36 25: 
36 26: Where is the Forest of Dean? It’s still back there. It’s a sort of mythic Forest of Dean. There’s the real one (laughs), with the same signs and stresses as the real anywhere, and there’s the other one, the one I grew up as a small child in, and those rather ugly villages in beautiful landscape. Just accidentally a heart-shaped place between two rivers, somehow slightly cut off from them, the rest of England and Wales on the far side, the other border …
36 27: 
36 28: **Do you look back and … I mean, a lot of people think that you see your childhood in … there are terrors in it, but it is some kind of place in England that was a particular period in the lives of a lot of people which was to do with a sense of community. Now, we’ve both been through that, and we know that things were wrong – awful and terrible and so on – but there’s a glow there. Is it a glow because you’re a middle-aged man looking back?**
36 29: 
36 30: Well, it’s partly that and it’s partly … it’s true the fact about childhood, which I tried to do in things like Blue Remembered Hills, for example. I used adult actors to play children in order to make them like a magnifying glass, to show what it’s like. And because if you look at a child, talk about present tense, that’s all they, all a small child lives in. So a wet Tuesday afternoon can actually be years long, and it – childhood – is full to the brim of fear, horror, excitement, joy, boredom, love, anxiety … Maybe you kind of revert to that in a way, but my Forest of Dean childhood, well … it is a strange and beautiful place, with a people who were as warm as anywhere else, but they seemed warmer to me, and the accent is almost so strong, it’s almost like a dialect.
36 31: 
36 32: Up the hill three times, well, twice actually, usually on a Sunday, sometimes three times to Salem Chapel and those little floppy, orange-covered hymn books, Ira Sankey’s 1,200 Sacred Songs and Solos and all this. Numbers would be slotted up on the board like those choruses, like … There’s one I’m trying to – it’s funny, I can think of the number before I can think of the chorus, I can see it as clear as though it were written in front of me on the slat – 787, hymn number 787: “Will there be any stars, any stars in my crown, when the evening sun goes down, when I wake with the blessed in the mansion of rest, will there be any stars in my crown?” And, of course, it makes me laugh, and yet it tugs at me. And for me, of course it was the Holy Land – I knew Cannop Ponds by the pit where Dad worked, I knew that was where Jesus walked on the water; I knew where the Valley of the Shadow of Death was, that lane where the overhanging trees were.
36 33: 
36 34: We were poor, yes. Dad was a coal miner, reserved occupation, so he didn’t go in the army. But the whole country at that time was politicised; even children knew what the war was about. I mean, we did. We English tend to deride ourselves far too easily, because we’ve lost so much confidence, because we lost so much of our own sense of identity, which had been subsumed in this forced imperial identity which I obviously hate. But we were, at that time, both a brave and a steadfast people, and we shared an aim, a condition, a political aspiration if you like, which was shown immediately in the 1945 general election, and then one of the great governments of British history – those five, six years of creating what is now being so brutally and wantonly and callously dismantled was actually a period to be proud of, and I’m proud of it.
36 35: 
36 36: You don’t mind this cigarette? I mean, I always have smoked, but…
36 37: 
36 38: **Why should I mind?**
36 39: 
36 40: Well, people do nowadays. You get so bloody nervous smoking.
36 41: 
36 42: **It’s all right, I’m a very passive smoker.**
36 43: 
36 44: Thank God I don’t have to go to America any more. It’s easier to pull a gun in America than a cigarette out of your pocket. Now I’m just virtually chain-smoking, because there’s no point in … There’s so many things, like I can’t keep food down any more. I can’t have a meal, my digestive system’s gone, but I can drink things, and those prepared, those horrible chemical things with all the minerals and stuff in them, but I can add a dash of this and that to it, which I do, and … like cholesterol, aawww! I can break any rule now, you know, I can do it. But the cigarette, well, I love stroking this lovely tube of delight. Look at it (laughter).
36 45: 
36 46: **I’ve packed it in… Now stop, or I’ll be smoking again in a minute, Dennis, with you. It’s been written about so much and derided so much, people from working-class backgrounds getting to Oxford … Do you think the driving themes in your work have come from your childhood or did they come from what happened after the break to university and the first few years’ university journalism?**
36 47: 
36 48: Dunno, Melvyn. They come as you grow, and your childhood remains. I mean, I forget, I’ve forgotten who said it, but I remember reading some essay by some writer saying that for any writer, the first 14 years of his or her life are the crucible anyway, no matter what you do. But of course you add on and you use your experiences and I, I’ve always deliberately, as a device, used the equivalent of a novelist’s first-person narrative. You know when the novelist says I, he doesn’t mean I, and yet you want him to mean I, and I’ve used, for example in The Singing Detective, I used the Forest of Dean, I used the physical circumstances of psoriatic arthropathy, which, you know, I’ve still got bloody psoriasis itching away at me, which is a bugger. You’d think that would lay off now, wouldn’t you, but it won’t! But I used that, and geographical realities, and it seemed so personal then, but I often do that. It isn’t. I make it up, the story. You know the wife thing? The whole inner structure of that man is different to me. Now he was a man, the Singing Detective, Michael Gambon character, the Philip Marlow in a hospital bed at the beginning who had nothing. He was stripped of everything. He had no faith in himself, no belief in any political, religious or social system. He was full of a witty despair and cynicism. Now I have never been like that, and the dramatic story was very simple. It was simply seeing a man pick up his bed and walk. It’s interesting, I always fall back into biblical language, but that again, you see, is part of my heritage, which I, in a sense, am grateful for.
36 49: 
36 50: **Do you feel you were thought of at one stage as a political writer, at a very early stage? Your first appearance on television was talking about class to some in some documentary programme.**
36 51: 
36 52: Yes, that’s right.
36 53: 
36 54: **And then Stand Up, Nigel Barton, you stood as a Labour candidate, you worked with the Daily Herald and so on. Where does that figure now, Dennis, and when did it figure? Was it a …**
36 55: 
36 56: I realised that somewhere along the line my pen was actually going to provide me with a living. Politics seemed the gateway. My very first book I wrote as an undergraduate, although a printing strike delayed it until a year after I left Oxford – it came out in 1960.
36 57: 
36 58: **The Glittering Coffin?**
36 59: 
36 60: … called The Glittering Coffin, yes, which was a kind of metaphor for the condition of England. Typical young man’s title, you see, typical piece of that sort of humbugging, canting rhetoric, which young men – bless their hearts – specialise in. We should always look back on our own past with a sort of tender contempt. As long as the tenderness is there, but please let some of the contempt be there, because we know what we are like, we know how we hustle and bustle and shove and push and sometimes use grand words to cloak it; one does. I’m not looking at you specifically, so don’t squirm \[laughter\].
36 61: 
36 62: **Just associating bodily there.**
36 63: 
36 64: Politics was – seemed – the door, until I actually stood as a candidate. By then, of course, illness had descended and I had a walking stick and I was drowning actually, drowning, felt that I was … On the Daily Herald I hated every second of it. And that world of popular journalism, as I saw it then, and the Herald eventually mutated through the mismanagement of the Mirror Group, its eventual owners, into … There’s an interesting thing: one of the favourite fantasy plots of a writer is a character is told “You’ve got three months to live” and – which is what I was told – and you, who would you kill? (laughs). I call my cancer, the main one, the pancreas one, I call it Rupert, so I can get close to it, because the man Murdoch is the one who, if I had the time – in fact I’ve got too much writing to do and I haven’t got the energy – but I would shoot the bugger if I could. There is no one person more responsible for the pollution of what was already a fairly polluted press, and the pollution of the British press is an important part of the pollution of British political life.
36 65: 
36 66: **In your own writing, there was a time when it seemed to me, and to a lot of people, that there were novels being written and plays being put on on stage and films being made, but the power of very good writers, directors, cameramen talking to a large public was on television and you were pushing it again and again. You were bringing up ideas of the devil, you were bringing up ideas of dialogue turning into singing. You were bringing up ideas of memory matching with fantasy and so on. Did you … you obviously found television available to everything you wanted to do, and you made it available for a lot of other people.**
36 67: 
36 68: It could be, and can be, and I reached a stage and I’ve written so many things down over so many years of working for television – obviously, I’m 58. I might reach my … 59 on May 17. I might get there. It’d look neater, wouldn’t it, to die 59? But technique, I don’t think about any more. It’s just natural to me, I don’t even … it’s like with a musician …
36 69: 
36 70: **What about subject matter? Was there anything … did you feel that you were being daring doing any of the things you did in it? Did you think, I am going to be …**
36 71: 
36 72: That’s the only thing I really resent, that’s the only thing I would stamp my foot about. I never have … This is, I was going to say the gospel truth, here I go again, but this is the truth, Melvyn, that I have never felt the need to do that. It has come, the mould, if broken on any one point, has come out of the need to do what I was doing. Not, “How do I break the mould?” It’s the other way round, so things have happened. The way they come, I remember, it’s … it always sounds so mundane but, for example, the use of adults to play children in Blue Remembered Hills was, is just … I was starting to write about children and I wanted to write something difficult because children don’t have long speeches; you can’t have flashbacks to nonexistent memories. You can’t have certain rhetorical devices. You have to have a continual twitchy action because that’s how children move. And these were a group of seven seven-year-olds, and the only, ultimately the only, way I could see, while keeping exactly to the language of childhood and the movements of childhood and the constant present-tense preoccupations of childhood, to show it without that filter coming in the way, which an audience going “Ah, children” and immediately pushing it back to childhood, was by using adults, seven adult actors. Once you get over the panic of the first five minutes, when I think, my God, is this … ? Colin Welland’s great fat arse and great shorts addling, sploshing through mud, making aeroplane noises, and chewing on an apple, and I thought, oh, you know, it’s going to be one of those dire, dread embarrassments, because it ain’t gonna work. And yet after a while people could see obviously that these were adults. But they also saw that they were children, so it worked. It wasn’t because I was trying – do you see what I’m getting at? I was trying to show childhood not at one remove but straight on.
36 73: 
36 74: **What about bringing in popular songs, as you did, say, with Pennies from Heaven?**
36 75: 
36 76: That, I wanted to write about – in a sense it sounds condescending, and I don’t mean it quite this way – I wanted to write about the way popular culture is an inheritor of something else. You know that cheap songs so-called actually do have something of the Psalms of David about them. They do say the world is other than it is. They do illuminate. This is why people say, “Listen, they’re playing our song”, or whatever. It’s not because that particular song actually expressed the depth of the feelings that they felt when they met each other and heard it. It is that somehow it re-evokes and pours out of them yet again, but with a different coating of irony and selfknowledge. Those feelings come bubbling back. So I wanted to write about popular songs in a direct way. It became just a technical problem for me. Not interested in writing a musical. A musical has a different grammar: the action builds to a song and then a song caps it and then it moves on. Then I thought, well, they lip-synch things now and again. You know, like sometimes there’s a bad performance or they dub from one language to another. Why don’t I just try making the actor move his lips to the words of the song? Then I tried it a bit, I tried it with myself in a mirror, and that was fun. I mean, I was pre-karaoke and I wasn’t breaking a mould as such. I just found the ideal way of making these songs so real.
36 77: 
36 78: **\[I\] dislike, and I can understand it, the use of this word controversial, but there were many times when you really seemed to bump into opinion in this country. Can we talk about Brimstone and Treacle, the vision of a devil …**
36 79: 
36 80: Ah, Brimstone and Treacle was … Can I break off for a second? I need a swig of that – there’s liquid morphine in that thing. I’ll keep going but I … Can you unscrew that cap? I … this is not agitation about Brimstone and Treacle by the way.
36 81: 
36 82: **Are you feeling OK? How much … how much time?**
36 83: 
36 84: It’s better to go on.
36 85: 
36 86: **Why do you think you got so much resistance in Brimstone and Treacle?**
36 87: 
36 88: It’s a very complicated story, but if I could put in essence what I saw I was trying to do: it’s … in a way it’s a simple flip-over of an ordinary sentimental religiose, rather than religious, parable, in that there is an afflicted house – variously afflicted, but in particular with a crippled, seemingly mindless, struck girl, young girl. And there is a visitor, and the visitor brings her to life and makes her speak. Now, if that visitor were an angel, then all you would have is sanctimoniousness, you would learn nothing about anything. What if it were the devil? Instead of making that easy distinction which, on the whole, only the blasphemous make – non-religious people make this distinction very easily, between so-called good and so-called evil, when of course they are interrelated, and one is defined in terms of the other. So instead of the angel coming and rescuing the cripple and the dumb and the afflicted, I had the devil do it. The evil act can lead to good consequences; a good act can lead to evil consequences. This is often the case, and it is … it is incomprehensible. It is as though, you know, the rain falls on the just and upon the unjust. It is so. Now, it appeared disgusting because it was a devil, and because it was a rape, or the beginnings of a rape, that made her cry out; and interestingly, the cry out was actually an accusation against her father. That complexity is, as I say, simply a reversal of what would have been sanctimonious and sentimental.
36 89: 
36 90: **Thanks a lot.**
36 91: 
36 92: That’ll have to do. I’m done. I need that thing again, I’m sorry. I felt OK, you see. At certain points, I felt I was flying with it.
36 93: 
36 94: **You were.**
36 95: 
36 96: And so … I’m grateful for the chance. This is my chance to say my last words. So, thanks.
36 97: 
36 98: _Interview reproduced by permission of ITN Source/Channel 4._
36 99: 
36 100: * * *
36 101: 
36 102: ![](https://i0.wp.com/images-na.ssl-images-amazon.com/images/I/41QSrPfX5rL._SX310_BO1,204,203,200_.jpg?resize=177%2C283&ssl=1)
36 103: 
36 104: [**Humphrey Carpenter’s biography of Dennis Potter**](https://www.amazon.com/Dennis-Potter-Biography-Humphrey-Carpenter/dp/0571248322/ref=sr_1_5?keywords=dennis+potter&qid=1573464385&s=books&sr=1-5)
36 105: 
36 106: Humphrey Carpenter, acclaimed biographer of Tolkien, Auden, Pound, and Britten, interviewed everyone who came close to Potter, and had exclusive access to Potter’s archives, including the many unmade television and film scripts. Carpenter portrays a very different Potter from the aggressive public image: a deeply shy and reclusive man, who was psychologically as well as physically scarred by the illness which struck him down at the age of twenty-six.
39 1: # Headaches, a selection
39 2: 
39 3: ## 1. THE PRIMARY HEADACHES
39 4: 
39 5: ### 1. Migraine
39 6: 
39 7: 1.1 Migraine without aura
39 8: 
39 9: 1.  At least 5 attacks fulfilling criteria B–D  
39 10:     B. Headache attacks lasting 4-72 hours (untreated or  
39 11:     unsuccessfully treated)  
39 12:     C. Headache has at least 2 of the following characteristics:  
39 13:     1. unilateral location  
39 14:     2. pulsating quality  
39 15:     3. moderate or severe pain intensity  
39 16:     4. aggravation by or causing avoidance of routine  
39 17:     physical activity (eg, walking or climbing stairs)  
39 18:     D. During headache at least 1 of the following:  
39 19:     1. nausea and/or vomiting  
39 20:     2. photophobia and phonophobia  
39 21:     E. Not attributed to another disorder
39 22: 
39 23: 1.2 Migraine with aura
39 24: 
39 25: 1.  At least 2 attacks fulfilling criterion B  
39 26:     B. Migraine aura fulfilling criteria B–C for one of the  
39 27:     subforms 1.2.1-1.2.6  
39 28:     C. Not attributed to another disorder
39 29: 
39 30: 1.2.1 Typical aura with migraine headache
39 31: 
39 32: 1.  At least 2 attacks fulfilling criteria B–D  
39 33:     B. Aura consisting of at least 1 of the following, but no  
39 34:     motor weakness:  
39 35:     1. fully reversible visual symptoms including positive  
39 36:     features (eg, flickering lights, spots or lines) and/or  
39 37:     negative features (ie, loss of vision)  
39 38:     2. fully reversible sensory symptoms including  
39 39:     positive features (ie, pins and needles) and/or  
39 40:     negative features (ie, numbness)  
39 41:     3. fully reversible dysphasic speech disturbance  
39 42:     C. At least two of the following:  
39 43:     1. homonymous visual symptoms and/or unilateral  
39 44:     sensory symptoms  
39 45:     2. at least one aura symptom develops gradually over  
39 46:     ≥5 minutes and/or different aura symptoms occur in  
39 47:     succession over ≥5 minutes  
39 48:     3. each symptom lasts ≥5 and ≤60 minutes  
39 49:     D. Headache fulfilling criteria B–D for 1.1 Migraine  
39 50:     without aura begins during the aura or follows aura  
39 51:     within 60 minutes  
39 52:     E. Not attributed to another disorder
39 53: 
39 54: 1.2.3 Typical aura without headache  
39 55: As 1.2.1 except:  
39 56: B. Aura consisting of at least 1 of the following, with or  
39 57: without speech disturbance but no motor weakness:  
39 58: 1. fully reversible visual symptoms including positive  
39 59: features (eg, flickering lights, spots or lines) and/or  
39 60: negative features (ie, loss of vision)  
39 61: 2. fully reversible sensory symptoms including  
39 62: positive features (ie, pins and needles) and/or  
39 63: negative features (ie, numbness)  
39 64: D. Headache does not occur during aura nor follow aura  
39 65: within 60 minutes
39 66: 
39 67: ### 2. Tension-type headache (TTH)
39 68: 
39 69: 2.1 Infrequent episodic tension-type headache  
39 70: A. At least 10 episodes occurring on <1 day/month on  
39 71: average (<12 days/year) and fulfilling criteria B–D  
39 72: B. Headache lasting from 30 minutes to 7 days  
39 73: C. Headache has at least 2 of the following characteristics:  
39 74: 1. bilateral location  
39 75: 2. pressing/tightening (non-pulsating) quality  
39 76: 3. mild or moderate intensity  
39 77: 4. not aggravated by routine physical activity such as  
39 78: walking or climbing stairs  
39 79: D. Both of the following:  
39 80: 1. no nausea or vomiting (anorexia may occur)  
39 81: 2. no more than one of photophobia or phonophobia  
39 82: E. Not attributed to another disorder
39 83: 
39 84: 2.2 Frequent episodic tension-type headache  
39 85: As 2.1 except:  
39 86: A. At least 10 episodes occurring on ≥1 but <15  
39 87: days/month for ?3 months (≥12 and <180 days/year)  
39 88: and fulfilling criteria B–D
39 89: 
39 90: 2.3 Chronic tension-type headache  
39 91: As 2.1 except:  
39 92: A. Headache occurring on ≥15 days/month on average for
39 93: 
39 94: > 3 months (≥180 days/year) and fulfilling criteria B–D  
39 95: > B. Headache lasts hours or may be continuous  
39 96: > D. Both of the following:  
39 97: > 1. no more than one of photophobia, phonophobia or  
39 98: > mild nausea  
39 99: > 2. neither moderate or severe nausea nor vomiting
39 100: 
39 101: ### 3. Cluster headache and other trigeminalautonomic cephalalgias
39 102: 
39 103: 3.1 Cluster headache  
39 104: A. At least 5 attacks fulfilling criteria B–D  
39 105: B. Severe or very severe unilateral orbital, supraorbital  
39 106: and/or temporal pain lasting 15-180 minutes if untreated  
39 107: C. Headache is accompanied by at least 1 of the following:  
39 108: 1. ipsilateral conjunctival injection and/or lacrimation  
39 109: 2. ipsilateral nasal congestion and/or rhinorrhoea  
39 110: 3. ipsilateral eyelid oedema  
39 111: 4. ipsilateral forehead and facial sweating  
39 112: 5. ipsilateral miosis and/or ptosis  
39 113: 6. a sense of restlessness or agitation  
39 114: D. Attacks have a frequency from 1 every other day to 8/day  
39 115: E. Not attributed to another disorder
39 116: 
39 117: 3.1.1 Episodic cluster headache  
39 118: A. Attacks fulfilling criteria A–E for 3.1 Cluster headache  
39 119: B. At least two cluster periods lasting 7-365 days and  
39 120: separated by pain-free remission periods of ≥1 month
39 121: 
39 122: 3.1.2 Chronic cluster headache  
39 123: A. Attacks fulfilling criteria A–E for 3.1 Cluster headache  
39 124: B. Attacks recur over >1 year without remission periods  
39 125: or with remission periods lasting <1 month
39 126: 
39 127: ## PART 2. THE SECONDARY HEADACHES
39 128: 
39 129: A de novo headache occurring with another disorder recognised to be capable of causing it is diagnosed as secondary.  
39 130: A patient who has previously had a primary headache that  
39 131: becomes worse in close temporal relation to the occurrence  
39 132: of another disorder can receive two diagnoses: the primary  
39 133: headache diagnosis and the secondary headache diagnosis.  
39 134: The following factors support the use of two diagnoses: a  
39 135: very close temporal relation, marked worsening of the  
39 136: primary headache, the existence of other evidence that the  
39 137: other disorder can aggravate primary headache in the manner  
39 138: observed, and remission of the headache after cure or  
39 139: remission of the other disorder.
39 140: 
39 141: ### 5. Headache attributed to head and/orneck trauma
39 142: 
39 143: 5.2.1 Chronic post-traumatic headache attributed  
39 144: to moderate or severe head injury  
39 145: A. Headache, no typical characteristics known, fulfilling  
39 146: criteria C–D  
39 147: B. Head trauma with at least 1 of the following:  
39 148: 1. loss of consciousness for >30 minutes  
39 149: 2. Glasgow Coma Scale (GCS) <13  
39 150: 3. post-traumatic amnesia for >48 hours  
39 151: 4. imaging demonstration of a traumatic brain lesion  
39 152: (cerebral haematoma, intracerebral/subarachnoid  
39 153: haemorrhage, brain contusion, skull fracture)  
39 154: C. Headache develops within 7 days after head trauma or  
39 155: or after regaining consciousness following head trauma  
39 156: D. Headache persists for >3 months after head trauma
39 157: 
39 158: ### 6. Headache attributed to cranial orcervical vascular disorder
39 159: 
39 160: 6.4.1 Headache attributed to giant cell arteritis  
39 161: (GCA)  
39 162: A. Any new persisting headache fulfilling criteria C–D  
39 163: B. At least one of the following:  
39 164: 1. swollen tender scalp artery with elevated erythrocyte sedimentation rate and/or C reactive protein  
39 165: 2. temporal artery biopsy demonstrating giant cell  
39 166: arteritis  
39 167: C. Headache develops in close temporal relation to other  
39 168: symptoms and signs of giant cell arteritis  
39 169: D. Headache resolves or greatly improves within 3 days  
39 170: of high-dose steroid treatment
39 171: 
39 172: ### 7. Headache attributed to non-vascularintracranial disorder
39 173: 
39 174: 7.1.1 Headache attributed to idiopathic  
39 175: intracranial hypertension (IIH)  
39 176: A. Progressive headache with at least 1 of the following  
39 177: characteristics and fulfilling criteria C–D:  
39 178: 1. daily occurrence  
39 179: 2. diffuse and/or constant (non-pulsating) pain  
39 180: 3. aggravated by coughing or straining  
39 181: B. Intracranial hypertension fulfilling the following criteria:  
39 182: 1. alert patient with neurological examination that  
39 183: either is normal or demonstrates any of the  
39 184: following abnormalities:  
39 185: a) papilloedema  
39 186: b) enlarged blind spot  
39 187: c) visual field defect (progressive if untreated)  
39 188: d) sixth nerve palsy  
39 189: 2. increased CSF pressure (>200 mm H2O in the nonobese, >250 mm H2O in the obese) measured by  
39 190: lumbar puncture in the recumbent position or by  
39 191: epidural or intraventricular pressure monitoring  
39 192: 3. normal CSF chemistry (low CSF protein is  
39 193: acceptable) and cellularity  
39 194: 4. intracranial diseases (including venous sinus  
39 195: thrombosis) ruled out by appropriate investigations  
39 196: 5. no metabolic, toxic or hormonal cause of  
39 197: intracranial hypertension  
39 198: C. Headache develops in close temporal relation to  
39 199: increased intracranial pressure  
39 200: D. Headache improves after withdrawal of CSF to reduce  
39 201: pressure to 120-170 mm H2O and resolves within 72  
39 202: hours of persistent normalisation of intracranial  
39 203: pressure
39 204: 
39 205: 7.4.1 Headache attributed to increased  
39 206: intracranial pressure or hydrocephalus caused by  
39 207: neoplasm  
39 208: A. Diffuse non-pulsating headache with at least 1 of the  
39 209: following characteristics and fulfilling criteria C–D:  
39 210: 1. associated with nausea and/or vomiting  
39 211: 2. worsened by physical activity and/or manoeuvres  
39 212: known to increase intracranial pressure (such as  
39 213: Valsalva manoeuvre, coughing or sneezing)  
39 214: 3. occurring in attack-like episodes  
39 215: B. Space-occupying intracranial tumour\* demonstrated  
39 216: by CT or MRI and causing hydrocephalus  
39 217: C. Headache develops and/or deteriorates in close  
39 218: temporal relation to the hydrocephalus  
39 219: D. Headache improves within 7 days after surgical  
39 220: removal or volume-reduction of tumour  
39 221: \*including colloid cyst of the 3rd ventricle.
39 222: 
39 223: 7.4.2 Headache attributed directly to neoplasm  
39 224: A. Headache with at least 1 of the following characteristics  
39 225: and fulfilling criteria C–D:  
39 226: 1. progressive  
39 227: 2. localised  
39 228: 3. worse in the morning  
39 229: 4. aggravated by coughing or bending forward  
39 230: B. Intracranial neoplasm shown by imaging  
39 231: C. Headache develops in temporal (and usually spatial)  
39 232: relation to the neoplasm  
39 233: D. Headache resolves within 7 days after surgical  
39 234: removal or volume-reduction of neoplasm or treatment  
39 235: with corticosteroids
39 236: 
39 237: ### 8. Headache attributed to a substance or its withdrawal
39 238: 
39 239: 8.1.3 Carbon monoxide (CO)-induced headache  
39 240: A. Bilateral and/or continuous headache, with quality  
39 241: and intensity that may be related to the severity of CO  
39 242: intoxication, fulfilling criteria C–D  
39 243: B. Exposure to carbon monoxide (CO)  
39 244: C. Headache develops within 12 hours of exposure  
39 245: D. Headache resolves within 72 hours after elimination of CO
39 246: 
39 247: 8.2 Medication-overuse headache
39 248: 
39 249: 8.2.1 Ergotamine-overuse headache  
39 250: A. Headache present on >15 days/month with at least 1  
39 251: of the following characteristics and fulfilling criteria C–D:  
39 252: 1. bilateral  
39 253: 2. pressing/tightening quality  
39 254: 3. mild or moderate intensity  
39 255: B. Ergotamine intake on ≥10 days/month on a regular  
39 256: basis for ≥3 months  
39 257: C. Headache has developed or markedly worsened during  
39 258: ergotamine overuse  
39 259: D. Headache resolves or reverts to its previous pattern  
39 260: within 2 months after discontinuation of ergotamine
39 261: 
39 262: 8.2.2 Triptan-overuse headache  
39 263: A. Headache present on >15 days/month with at least 1 of  
39 264: the following characteristics and fulfilling criteria C–D:  
39 265: 1. predominantly unilateral  
39 266: 2. pulsating quality  
39 267: 3. moderate or severe intensity  
39 268: 4. aggravated by or causing avoidance of routine  
39 269: physical activity (eg, walking or climbing stairs)  
39 270: 5. associated with at least 1 of the following:  
39 271: a)nausea and/or vomiting  
39 272: b)photophobia and phonophobia  
39 273: B. Triptan intake (any formulation) on ≥10 days/month  
39 274: on a regular basis for ≥3 months  
39 275: C. Headache frequency has markedly increased during  
39 276: triptan overuse  
39 277: D. Headache reverts to its previous pattern within 2  
39 278: months after discontinuation of triptan
39 279: 
39 280: 8.2.3 Analgesic-overuse headache  
39 281: A. Headache present on >15 days/month with at least 1 of  
39 282: the following characteristics and fulfilling criteria C–D:  
39 283: 1. bilateral  
39 284: 2. pressing/tightening (non-pulsating) quality  
39 285: 3. mild or moderate intensity  
39 286: B. Intake of simple analgesics on ≥15 days/month for ≥3  
39 287: months  
39 288: C. Headache has developed or markedly worsened during  
39 289: analgesic overuse  
39 290: D. Headache resolves or reverts to its previous pattern  
39 291: within 2 months after discontinuation of analgesics  
39 292: 8.2.4 Opioid-overuse headache  
39 293: A. Headache present on >15 days/month fulfilling criteria C–D  
39 294: B. Opioid intake on ≥10 days/month for ≥3 months  
39 295: C. Headache develops or markedly worsens during opioid  
39 296: overuse  
39 297: D. Headache resolves or reverts to its previous pattern  
39 298: within 2 months after discontinuation of opioid
39 299: 
39 300: 8.2.5 Combination medication-overuse headache  
39 301: As 8.2.3 except:  
39 302: B. Intake of combination medications on ≥10 days/month  
39 303: for ≥3 months  
39 304: 8.2.7 Probable medication-overuse  
39 305: headache\*  
39 306: A. Headache fulfilling criteria A–C for any one of the  
39 307: subforms 8.2.1 to 8.2.6 above  
39 308: B. One or other of the following:  
39 309: 1. overused medication has not yet been withdrawn  
39 310: 2. medication overuse has ceased within the last 2  
39 311: months but headache has not so far resolved or  
39 312: reverted to its previous pattern  
39 313: 8.4 Headache attributed to substance  
39 314: withdrawal  
39 315: 8.4.3 Oestrogen-withdrawal headache  
39 316: A. Headache or migraine fulfilling criteria C–D  
39 317: B. Daily use of exogenous oestrogen for ≥3 weeks, which  
39 318: is interrupted  
39 319: C. Headache or migraine develops within 5 days after last  
39 320: use of oestrogen  
39 321: D. Headache or migraine resolves within 3 days
39 322: 
39 323: ### 11. Headache or facial pain attributed todisorder of cranium, neck, eyes, ears, nose,sinuses, teeth, mouth or other facial or cranialstructures
39 324: 
39 325: 11.2.1 Cervicogenic headache  
39 326: A. Pain, referred from a source in the neck and perceived  
39 327: in one or more regions of the head and/or face, fulfilling  
39 328: criteria C–D  
39 329: B. Clinical, laboratory and/or imaging evidence of a  
39 330: disorder or lesion within the cervical spine or soft  
39 331: tissues of the neck known to be, or generally accepted  
39 332: as, a valid cause of headache  
39 333: C. Evidence that the pain can be attributed to the neck  
39 334: disorder or lesion based on at least 1 of the following:  
39 335: 1. demonstration of clinical signs that implicate a  
39 336: source of pain in the neck  
39 337: 2. abolition of headache following diagnostic blockade  
39 338: of a cervical structure or its nerve supply using  
39 339: placebo- or other adequate controls  
39 340: D. Pain resolves within 3 months after successful treatment  
39 341: of the causative disorder or lesion
39 342: 
39 343: ## PART 3. CRANIAL NEURALGIAS, CENTRAL ANDPRIMARY FACIAL PAIN AND OTHER HEADACHES
39 344: 
39 345: ### 13. Cranial neuralgias and central causes of facial pain
39 346: 
39 347: 13.1.1 Classical trigeminal neuralgia  
39 348: A. Paroxysmal attacks of pain lasting from a fraction of a  
39 349: second to 2 minutes, affecting one or more divisions  
39 350: of the trigeminal nerve and fulfilling criteria B–C  
39 351: B. Pain has at least 1 of the following characteristics:  
39 352: 1. intense, sharp, superficial or stabbing  
39 353: 2. precipitated from trigger areas or by trigger factors  
39 354: C. Attacks are stereotyped in the individual patient  
39 355: D. There is no clinically evident neurological deficit  
39 356: E. Not attributed to another disorder
39 357: 
39 358: ### 13.8 Occipital neuralgia
39 359: 
39 360: 1.  Paroxysmal stabbing pain, with or without persistent  
39 361:     aching between paroxysms, in the distribution(s) of  
39 362:     the greater, lesser and/or third occipital nerves  
39 363:     B. Tenderness over the affected nerve  
39 364:     C. Pain is eased temporarily by local anaesthetic block of  
39 365:     the nerve
39 366: 
39 367: ### 13.18 Central causes of facial pain
39 368: 
39 369: 13.18.4 Persistent idiopathic facial pain  
39 370: A. Pain in the face, present daily and persisting for all or  
39 371: most of the day, fulfilling criteria B–C  
39 372: B. Pain is confined at onset to a limited area on one side  
39 373: of the face, and is deep and poorly localised  
39 374: C. Pain is not associated with sensory loss or other  
39 375: physical signs  
39 376: D. Investigations including X-ray of face and jaws do not  
39 377: demonstrate any relevant abnormality
39 378: 
39 379: 1.1 Migraine without aura
39 380: 
39 381: 1.  At least 5 attacks fulfilling criteria B–D  
39 382:     B. Headache attacks lasting 4-72 hours (untreated or  
39 383:     unsuccessfully treated)  
39 384:     C. Headache has at least 2 of the following characteristics:  
39 385:     1. unilateral location  
39 386:     2. pulsating quality  
39 387:     3. moderate or severe pain intensity  
39 388:     4. aggravation by or causing avoidance of routine  
39 389:     physical activity (eg, walking or climbing stairs)  
39 390:     D. During headache at least 1 of the following:  
39 391:     1. nausea and/or vomiting  
39 392:     2. photophobia and phonophobia  
39 393:     E. Not attributed to another disorder
39 394: 
39 395: 1.2 Migraine with aura
39 396: 
39 397: 1.  At least 2 attacks fulfilling criterion B  
39 398:     B. Migraine aura fulfilling criteria B–C for one of the  
39 399:     subforms 1.2.1-1.2.6  
39 400:     C. Not attributed to another disorder
39 401: 
39 402: 1.2.1 Typical aura with migraine headache
39 403: 
39 404: 1.  At least 2 attacks fulfilling criteria B–D  
39 405:     B. Aura consisting of at least 1 of the following, but no  
39 406:     motor weakness:  
39 407:     1. fully reversible visual symptoms including positive  
39 408:     features (eg, flickering lights, spots or lines) and/or  
39 409:     negative features (ie, loss of vision)  
39 410:     2. fully reversible sensory symptoms including  
39 411:     positive features (ie, pins and needles) and/or  
39 412:     negative features (ie, numbness)  
39 413:     3. fully reversible dysphasic speech disturbance  
39 414:     C. At least two of the following:  
39 415:     1. homonymous visual symptoms and/or unilateral  
39 416:     sensory symptoms  
39 417:     2. at least one aura symptom develops gradually over  
39 418:     ≥5 minutes and/or different aura symptoms occur in  
39 419:     succession over ≥5 minutes  
39 420:     3. each symptom lasts ≥5 and ≤60 minutes  
39 421:     D. Headache fulfilling criteria B–D for 1.1 Migraine  
39 422:     without aura begins during the aura or follows aura  
39 423:     within 60 minutes  
39 424:     E. Not attributed to another disorder
39 425: 
39 426: 1.2.3 Typical aura without headache  
39 427: As 1.2.1 except:  
39 428: B. Aura consisting of at least 1 of the following, with or  
39 429: without speech disturbance but no motor weakness:  
39 430: 1. fully reversible visual symptoms including positive  
39 431: features (eg, flickering lights, spots or lines) and/or  
39 432: negative features (ie, loss of vision)  
39 433: 2. fully reversible sensory symptoms including  
39 434: positive features (ie, pins and needles) and/or  
39 435: negative features (ie, numbness)  
39 436: D. Headache does not occur during aura nor follow aura  
39 437: within 60 minutes
39 438: 
39 439: ### 2. Tension-type headache (TTH)
39 440: 
39 441: 2.1 Infrequent episodic tension-type headache  
39 442: A. At least 10 episodes occurring on <1 day/month on  
39 443: average (<12 days/year) and fulfilling criteria B–D  
39 444: B. Headache lasting from 30 minutes to 7 days  
39 445: C. Headache has at least 2 of the following characteristics:  
39 446: 1. bilateral location  
39 447: 2. pressing/tightening (non-pulsating) quality  
39 448: 3. mild or moderate intensity  
39 449: 4. not aggravated by routine physical activity such as  
39 450: walking or climbing stairs  
39 451: D. Both of the following:  
39 452: 1. no nausea or vomiting (anorexia may occur)  
39 453: 2. no more than one of photophobia or phonophobia  
39 454: E. Not attributed to another disorder
39 455: 
39 456: 2.2 Frequent episodic tension-type headache  
39 457: As 2.1 except:  
39 458: A. At least 10 episodes occurring on ≥1 but <15  
39 459: days/month for ?3 months (≥12 and <180 days/year)  
39 460: and fulfilling criteria B–D
39 461: 
39 462: 2.3 Chronic tension-type headache  
39 463: As 2.1 except:  
39 464: A. Headache occurring on ≥15 days/month on average for
39 465: 
39 466: > 3 months (≥180 days/year) and fulfilling criteria B–D  
39 467: > B. Headache lasts hours or may be continuous  
39 468: > D. Both of the following:  
39 469: > 1. no more than one of photophobia, phonophobia or  
39 470: > mild nausea  
39 471: > 2. neither moderate or severe nausea nor vomiting
39 472: 
39 473: ### 3. Cluster headache and other trigeminalautonomic cephalalgias
39 474: 
39 475: 3.1 Cluster headache  
39 476: A. At least 5 attacks fulfilling criteria B–D  
39 477: B. Severe or very severe unilateral orbital, supraorbital  
39 478: and/or temporal pain lasting 15-180 minutes if untreated  
39 479: C. Headache is accompanied by at least 1 of the following:  
39 480: 1. ipsilateral conjunctival injection and/or lacrimation  
39 481: 2. ipsilateral nasal congestion and/or rhinorrhoea  
39 482: 3. ipsilateral eyelid oedema  
39 483: 4. ipsilateral forehead and facial sweating  
39 484: 5. ipsilateral miosis and/or ptosis  
39 485: 6. a sense of restlessness or agitation  
39 486: D. Attacks have a frequency from 1 every other day to 8/day  
39 487: E. Not attributed to another disorder
39 488: 
39 489: 3.1.1 Episodic cluster headache  
39 490: A. Attacks fulfilling criteria A–E for 3.1 Cluster headache  
39 491: B. At least two cluster periods lasting 7-365 days and  
39 492: separated by pain-free remission periods of ≥1 month
39 493: 
39 494: 3.1.2 Chronic cluster headache  
39 495: A. Attacks fulfilling criteria A–E for 3.1 Cluster headache  
39 496: B. Attacks recur over >1 year without remission periods  
39 497: or with remission periods lasting <1 month
39 498: 
39 499: ## PART 2. THE SECONDARY HEADACHES
39 500: 
39 501: A de novo headache occurring with another disorder recognised to be capable of causing it is diagnosed as secondary.  
39 502: A patient who has previously had a primary headache that  
39 503: becomes worse in close temporal relation to the occurrence  
39 504: of another disorder can receive two diagnoses: the primary  
39 505: headache diagnosis and the secondary headache diagnosis.  
39 506: The following factors support the use of two diagnoses: a  
39 507: very close temporal relation, marked worsening of the  
39 508: primary headache, the existence of other evidence that the  
39 509: other disorder can aggravate primary headache in the manner  
39 510: observed, and remission of the headache after cure or  
39 511: remission of the other disorder.
39 512: 
39 513: ### 5. Headache attributed to head and/orneck trauma
39 514: 
39 515: 5.2.1 Chronic post-traumatic headache attributed  
39 516: to moderate or severe head injury  
39 517: A. Headache, no typical characteristics known, fulfilling  
39 518: criteria C–D  
39 519: B. Head trauma with at least 1 of the following:  
39 520: 1. loss of consciousness for >30 minutes  
39 521: 2. Glasgow Coma Scale (GCS) <13  
39 522: 3. post-traumatic amnesia for >48 hours  
39 523: 4. imaging demonstration of a traumatic brain lesion  
39 524: (cerebral haematoma, intracerebral/subarachnoid  
39 525: haemorrhage, brain contusion, skull fracture)  
39 526: C. Headache develops within 7 days after head trauma or  
39 527: or after regaining consciousness following head trauma  
39 528: D. Headache persists for >3 months after head trauma
39 529: 
39 530: ### 6. Headache attributed to cranial orcervical vascular disorder
39 531: 
39 532: 6.4.1 Headache attributed to giant cell arteritis  
39 533: (GCA)  
39 534: A. Any new persisting headache fulfilling criteria C–D  
39 535: B. At least one of the following:  
39 536: 1. swollen tender scalp artery with elevated erythrocyte sedimentation rate and/or C reactive protein  
39 537: 2. temporal artery biopsy demonstrating giant cell  
39 538: arteritis  
39 539: C. Headache develops in close temporal relation to other  
39 540: symptoms and signs of giant cell arteritis  
39 541: D. Headache resolves or greatly improves within 3 days  
39 542: of high-dose steroid treatment
39 543: 
39 544: ### 7. Headache attributed to non-vascularintracranial disorder
39 545: 
39 546: 7.1.1 Headache attributed to idiopathic  
39 547: intracranial hypertension (IIH)  
39 548: A. Progressive headache with at least 1 of the following  
39 549: characteristics and fulfilling criteria C–D:  
39 550: 1. daily occurrence  
39 551: 2. diffuse and/or constant (non-pulsating) pain  
39 552: 3. aggravated by coughing or straining  
39 553: B. Intracranial hypertension fulfilling the following criteria:  
39 554: 1. alert patient with neurological examination that  
39 555: either is normal or demonstrates any of the  
39 556: following abnormalities:  
39 557: a) papilloedema  
39 558: b) enlarged blind spot  
39 559: c) visual field defect (progressive if untreated)  
39 560: d) sixth nerve palsy  
39 561: 2. increased CSF pressure (>200 mm H2O in the nonobese, >250 mm H2O in the obese) measured by  
39 562: lumbar puncture in the recumbent position or by  
39 563: epidural or intraventricular pressure monitoring  
39 564: 3. normal CSF chemistry (low CSF protein is  
39 565: acceptable) and cellularity  
39 566: 4. intracranial diseases (including venous sinus  
39 567: thrombosis) ruled out by appropriate investigations  
39 568: 5. no metabolic, toxic or hormonal cause of  
39 569: intracranial hypertension  
39 570: C. Headache develops in close temporal relation to  
39 571: increased intracranial pressure  
39 572: D. Headache improves after withdrawal of CSF to reduce  
39 573: pressure to 120-170 mm H2O and resolves within 72  
39 574: hours of persistent normalisation of intracranial  
39 575: pressure
39 576: 
39 577: 7.4.1 Headache attributed to increased  
39 578: intracranial pressure or hydrocephalus caused by  
39 579: neoplasm  
39 580: A. Diffuse non-pulsating headache with at least 1 of the  
39 581: following characteristics and fulfilling criteria C–D:  
39 582: 1. associated with nausea and/or vomiting  
39 583: 2. worsened by physical activity and/or manoeuvres  
39 584: known to increase intracranial pressure (such as  
39 585: Valsalva manoeuvre, coughing or sneezing)  
39 586: 3. occurring in attack-like episodes  
39 587: B. Space-occupying intracranial tumour\* demonstrated  
39 588: by CT or MRI and causing hydrocephalus  
39 589: C. Headache develops and/or deteriorates in close  
39 590: temporal relation to the hydrocephalus  
39 591: D. Headache improves within 7 days after surgical  
39 592: removal or volume-reduction of tumour  
39 593: \*including colloid cyst of the 3rd ventricle.
39 594: 
39 595: 7.4.2 Headache attributed directly to neoplasm  
39 596: A. Headache with at least 1 of the following characteristics  
39 597: and fulfilling criteria C–D:  
39 598: 1. progressive  
39 599: 2. localised  
39 600: 3. worse in the morning  
39 601: 4. aggravated by coughing or bending forward  
39 602: B. Intracranial neoplasm shown by imaging  
39 603: C. Headache develops in temporal (and usually spatial)  
39 604: relation to the neoplasm  
39 605: D. Headache resolves within 7 days after surgical  
39 606: removal or volume-reduction of neoplasm or treatment  
39 607: with corticosteroids
39 608: 
39 609: ### 8. Headache attributed to a substance or its withdrawal
39 610: 
39 611: 8.1.3 Carbon monoxide (CO)-induced headache  
39 612: A. Bilateral and/or continuous headache, with quality  
39 613: and intensity that may be related to the severity of CO  
39 614: intoxication, fulfilling criteria C–D  
39 615: B. Exposure to carbon monoxide (CO)  
39 616: C. Headache develops within 12 hours of exposure  
39 617: D. Headache resolves within 72 hours after elimination of CO
39 618: 
39 619: 8.2 Medication-overuse headache
39 620: 
39 621: 8.2.1 Ergotamine-overuse headache  
39 622: A. Headache present on >15 days/month with at least 1  
39 623: of the following characteristics and fulfilling criteria C–D:  
39 624: 1. bilateral  
39 625: 2. pressing/tightening quality  
39 626: 3. mild or moderate intensity  
39 627: B. Ergotamine intake on ≥10 days/month on a regular  
39 628: basis for ≥3 months  
39 629: C. Headache has developed or markedly worsened during  
39 630: ergotamine overuse  
39 631: D. Headache resolves or reverts to its previous pattern  
39 632: within 2 months after discontinuation of ergotamine
39 633: 
39 634: 8.2.2 Triptan-overuse headache  
39 635: A. Headache present on >15 days/month with at least 1 of  
39 636: the following characteristics and fulfilling criteria C–D:  
39 637: 1. predominantly unilateral  
39 638: 2. pulsating quality  
39 639: 3. moderate or severe intensity  
39 640: 4. aggravated by or causing avoidance of routine  
39 641: physical activity (eg, walking or climbing stairs)  
39 642: 5. associated with at least 1 of the following:  
39 643: a)nausea and/or vomiting  
39 644: b)photophobia and phonophobia  
39 645: B. Triptan intake (any formulation) on ≥10 days/month  
39 646: on a regular basis for ≥3 months  
39 647: C. Headache frequency has markedly increased during  
39 648: triptan overuse  
39 649: D. Headache reverts to its previous pattern within 2  
39 650: months after discontinuation of triptan
39 651: 
39 652: 8.2.3 Analgesic-overuse headache  
39 653: A. Headache present on >15 days/month with at least 1 of  
39 654: the following characteristics and fulfilling criteria C–D:  
39 655: 1. bilateral  
39 656: 2. pressing/tightening (non-pulsating) quality  
39 657: 3. mild or moderate intensity  
39 658: B. Intake of simple analgesics on ≥15 days/month for ≥3  
39 659: months  
39 660: C. Headache has developed or markedly worsened during  
39 661: analgesic overuse  
39 662: D. Headache resolves or reverts to its previous pattern  
39 663: within 2 months after discontinuation of analgesics  
39 664: 8.2.4 Opioid-overuse headache  
39 665: A. Headache present on >15 days/month fulfilling criteria C–D  
39 666: B. Opioid intake on ≥10 days/month for ≥3 months  
39 667: C. Headache develops or markedly worsens during opioid  
39 668: overuse  
39 669: D. Headache resolves or reverts to its previous pattern  
39 670: within 2 months after discontinuation of opioid
39 671: 
39 672: 8.2.5 Combination medication-overuse headache  
39 673: As 8.2.3 except:  
39 674: B. Intake of combination medications on ≥10 days/month  
39 675: for ≥3 months  
39 676: 8.2.7 Probable medication-overuse  
39 677: headache\*  
39 678: A. Headache fulfilling criteria A–C for any one of the  
39 679: subforms 8.2.1 to 8.2.6 above  
39 680: B. One or other of the following:  
39 681: 1. overused medication has not yet been withdrawn  
39 682: 2. medication overuse has ceased within the last 2  
39 683: months but headache has not so far resolved or  
39 684: reverted to its previous pattern  
39 685: 8.4 Headache attributed to substance  
39 686: withdrawal  
39 687: 8.4.3 Oestrogen-withdrawal headache  
39 688: A. Headache or migraine fulfilling criteria C–D  
39 689: B. Daily use of exogenous oestrogen for ≥3 weeks, which  
39 690: is interrupted  
39 691: C. Headache or migraine develops within 5 days after last  
39 692: use of oestrogen  
39 693: D. Headache or migraine resolves within 3 days
39 694: 
39 695: ### 11. Headache or facial pain attributed todisorder of cranium, neck, eyes, ears, nose,sinuses, teeth, mouth or other facial or cranialstructures
39 696: 
39 697: 11.2.1 Cervicogenic headache  
39 698: A. Pain, referred from a source in the neck and perceived  
39 699: in one or more regions of the head and/or face, fulfilling  
39 700: criteria C–D  
39 701: B. Clinical, laboratory and/or imaging evidence of a  
39 702: disorder or lesion within the cervical spine or soft  
39 703: tissues of the neck known to be, or generally accepted  
39 704: as, a valid cause of headache  
39 705: C. Evidence that the pain can be attributed to the neck  
39 706: disorder or lesion based on at least 1 of the following:  
39 707: 1. demonstration of clinical signs that implicate a  
39 708: source of pain in the neck  
39 709: 2. abolition of headache following diagnostic blockade  
39 710: of a cervical structure or its nerve supply using  
39 711: placebo- or other adequate controls  
39 712: D. Pain resolves within 3 months after successful treatment  
39 713: of the causative disorder or lesion
39 714: 
39 715: ## PART 3. CRANIAL NEURALGIAS, CENTRAL ANDPRIMARY FACIAL PAIN AND OTHER HEADACHES
39 716: 
39 717: ### 13. Cranial neuralgias and central causes of facial pain
39 718: 
39 719: 13.1.1 Classical trigeminal neuralgia  
39 720: A. Paroxysmal attacks of pain lasting from a fraction of a  
39 721: second to 2 minutes, affecting one or more divisions  
39 722: of the trigeminal nerve and fulfilling criteria B–C  
39 723: B. Pain has at least 1 of the following characteristics:  
39 724: 1. intense, sharp, superficial or stabbing  
39 725: 2. precipitated from trigger areas or by trigger factors  
39 726: C. Attacks are stereotyped in the individual patient  
39 727: D. There is no clinically evident neurological deficit  
39 728: E. Not attributed to another disorder
39 729: 
39 730: ### 13.8 Occipital neuralgia
39 731: 
39 732: 1.  Paroxysmal stabbing pain, with or without persistent  
39 733:     aching between paroxysms, in the distribution(s) of  
39 734:     the greater, lesser and/or third occipital nerves  
39 735:     B. Tenderness over the affected nerve  
39 736:     C. Pain is eased temporarily by local anaesthetic block of  
39 737:     the nerve
39 738: 
39 739: ### 13.18 Central causes of facial pain
39 740: 
39 741: 13.18.4 Persistent idiopathic facial pain  
39 742: A. Pain in the face, present daily and persisting for all or  
39 743: most of the day, fulfilling criteria B–C  
39 744: B. Pain is confined at onset to a limited area on one side  
39 745: of the face, and is deep and poorly localised  
39 746: C. Pain is not associated with sensory loss or other  
39 747: physical signs  
39 748: D. Investigations including X-ray of face and jaws do not  
39 749: demonstrate any relevant abnormality
